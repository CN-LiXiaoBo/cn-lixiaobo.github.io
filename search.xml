<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>LongAdder的源码学习</title>
      <link href="/2022/11/03/longadder-de-yuan-ma-xue-xi/"/>
      <url>/2022/11/03/longadder-de-yuan-ma-xue-xi/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 累加单元组，懒惰初始化</span><span class="token keyword">transient</span> <span class="token keyword">volatile</span> Cell<span class="token punctuation">[</span><span class="token punctuation">]</span> cells<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 基础值，如果没有竞争，则用cas累加这个值</span><span class="token keyword">transient</span> <span class="token keyword">volatile</span> <span class="token keyword">long</span> base<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//在cells创建或者扩容时，置为1，表示加锁</span><span class="token keyword">transient</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> cellsBusy<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><font color="#FF000"> <strong>cellsBusy</strong></font>作用是当要修改cells数组时加锁，防止多线程同时修改cells数组，0为无锁，1为加锁，加锁的情况有三种<br>1、cells数组初始化的时候<br>2、cells数组扩容的时候<br>3、如果cells数组中某个元素为null，给这个位置创建新的Cell对象的时候</p></blockquote><blockquote><p><font color="#FF000"><strong>base</strong></font>有两个作用<br>在开始没有竞争的时候，将累加值到base<br>在cells初始化的过程中，cells不可用，这时候会尝试将值累加到base上</p></blockquote><p><img src="https://img-blog.csdnimg.cn/649e4b0ad8434ca3af2d19e411dde0e5.png" alt="在这里插入图片描述"></p><blockquote><p><font color="#FF000"><strong>@sun.misc.Contended</strong></font>注解是为了防止<strong>缓存行伪共享</strong></p></blockquote><p>因为CPU与内存之间速度还是存在较大差距所以现在计算机在内存与CPU之间引入了三级缓存</p><p><img src="https://img-blog.csdnimg.cn/3a5494726c3b44cfb0547566577babd7.png" alt="在这里插入图片描述"></p><blockquote><p><strong>L1与L2是每个CPU独享的，L3是所有CPU共享的</strong></p></blockquote><p><img src="https://img-blog.csdnimg.cn/f55d37ad8ca644e2af6876f6af962baa.png" alt="在这里插入图片描述"></p><blockquote><p>因为CPU与内存的速度差异很大，需要靠预读数据至缓存来提升效率<br>而缓存以缓存行为单位，每个缓存行对应着一块内存，一般是64byte<br>缓存的加入会造成<strong>数据副本</strong>的产生，即同一份数据会缓存在不同核心的缓存行中<br><strong>CPU要保证数据的一致性</strong>，<strong>如果某个CPU核心更改了数据</strong>，<strong>其他CPU核心对应的整个缓存行必须失效</strong></p></blockquote><p><img src="https://img-blog.csdnimg.cn/e1264fdf42224c20a9038141c44fefb5.png" alt="在这里插入图片描述"></p><blockquote><p>因为cell是数组形式，在内存中是连续存储的，一个Cell为24个字节(16字节的对象头和8字节的value)，因此缓存行可以存下2个Cell对象，所以问题来了：<br>Core-0要修改Cell[0]<br>Core-1要修改Cell[1]<br>无论谁修改成功，都会导致对方Core的缓存行失效<br><br><br>@sun.misc.Contended注解就是用来解决这个问题，它的原理是在适用此注解的对象或字段的前后各增加128字节大小的padding，从而让CPU将对象预读至缓存时占用不同的缓存行，这样就不会造成对方的缓存行失效</p></blockquote><h2 id="有了AtomicLong为什么还要LongAdder"><a href="#有了AtomicLong为什么还要LongAdder" class="headerlink" title="有了AtomicLong为什么还要LongAdder"></a>有了AtomicLong为什么还要LongAdder</h2><blockquote><p>虽然AtomicLong使用CAS算法，但是CAS失败后还是通过无限循环的自旋锁不断的尝试，在高并发下CAS性能低下的原因所在</p></blockquote><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">getAndAddInt</span><span class="token punctuation">(</span>Object o<span class="token punctuation">,</span> <span class="token keyword">long</span> offset<span class="token punctuation">,</span> <span class="token keyword">int</span> delta<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> v<span class="token punctuation">;</span>        <span class="token keyword">do</span> <span class="token punctuation">{</span>            v <span class="token operator">=</span> <span class="token function">getIntVolatile</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> offset<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> v<span class="token punctuation">,</span> v <span class="token operator">+</span> delta<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> v<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>高并发下N多线程同时去操作一个变量会造成大量CAS失败，然后处于自选状态，导致严重浪费CPU资源，降低了并发性。既然AtomicLong性能问题是由于多线程同时去竞争同一个变量的更新而降低，那么把一个变量分解为多个变量，让同样多的线程去竞争多个资源</p></blockquote><p><img src="https://img-blog.csdnimg.cn/9de930f3e8fe4dc5bf5d5c5a08c2dd33.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/386c35635d014e8da079f5f858c254ee.png" alt="在这里插入图片描述"></p><blockquote><p>LongAdder在内部维护了一个Cells数组，每个Cell里面有一个初始值为0的long型变量，在同等并发量的情况下，争夺单个变量的线程会减少，这是变相减少了争夺共享资源的并发量，另外多个线程在争夺同一个原子变量时候，如果失败不是自选CAS重试而是尝试获取其他原子变量的锁，最后当获取当前值的时候把所有变量的值累加后再加上base的值返回<br>Cells占用内存相对比较大的所以一开始并不创建，而是在需要时候再创建，也就是<strong>惰性加载</strong>，当一开始没有空间的时候，所有的更新都是操作base变量</p></blockquote><h2 id="LongAdder中的主要方法"><a href="#LongAdder中的主要方法" class="headerlink" title="LongAdder中的主要方法"></a>LongAdder中的主要方法</h2><p><strong>add方法</strong></p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">long</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Cell<span class="token punctuation">[</span><span class="token punctuation">]</span> as<span class="token punctuation">;</span> <span class="token keyword">long</span> b<span class="token punctuation">,</span> v<span class="token punctuation">;</span> <span class="token keyword">int</span> m<span class="token punctuation">;</span> Cell a<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**        * casBase 就是使用CAS来进行更改值的        * 只有两种情况才会执行if内的语句        * 1、cells数组不为空的时候(cells数组为空时候不存在竞争，所以直接操作caseBase，当不为空的时候就存在多个线程来竞争)        * 2、cells为空，casBase执行失败的时候(casBase执行成功，则直接返回，如果casBase失败，说明第一次争用冲突产生，需要对cells数组初始化进入if)        */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>as <span class="token operator">=</span> cells<span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">casBase</span><span class="token punctuation">(</span>b <span class="token operator">=</span> base<span class="token punctuation">,</span> b <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">boolean</span> uncontended <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/**            * as == null ：cells数组没有初始化，成立就进入if执行cell初始化            * (m = as.length - 1) &lt; 0 ：cells数组的长度为0            * 上面两个条件都代表cells数组没有被初始化成功            * (a = as[getProbe() &amp; m]) == null ：说明当前线程获取的cells数组的这个位置的cell没有做过累加，所以需要创建一个cell对象            * !(uncontended = a.cas(v = a.value, v + x)) ：尝试对这个位置的cell进行累加并返回结果，如果累加失败就找另外一个cell            *            * 进入longAccumulate方法有三种情况            * 1、cells没有初始化            * 2、当前线程获取cell[i]的地方为空，需要创建一个cell对象            * 3、当前对cell[i]cas加值失败            */</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>as <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token punctuation">(</span>m <span class="token operator">=</span> as<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span>                <span class="token punctuation">(</span>a <span class="token operator">=</span> as<span class="token punctuation">[</span><span class="token function">getProbe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> m<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">||</span>                <span class="token operator">!</span><span class="token punctuation">(</span>uncontended <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">cas</span><span class="token punctuation">(</span>v <span class="token operator">=</span> a<span class="token punctuation">.</span>value<span class="token punctuation">,</span> v <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token function">longAccumulate</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> null<span class="token punctuation">,</span> uncontended<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>longAccumulate方法</strong></p><pre class="line-numbers language-java"><code class="language-java"> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">longAccumulate</span><span class="token punctuation">(</span><span class="token keyword">long</span> x<span class="token punctuation">,</span> LongBinaryOperator fn<span class="token punctuation">,</span><span class="token keyword">boolean</span> wasUncontended<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> h<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**        *         */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>h <span class="token operator">=</span> <span class="token function">getProbe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ThreadLocalRandom<span class="token punctuation">.</span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// force initialization</span>            h <span class="token operator">=</span> <span class="token function">getProbe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            wasUncontended <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// cas冲突标志位</span>        <span class="token keyword">boolean</span> collide <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// True if last slot nonempty</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Cell<span class="token punctuation">[</span><span class="token punctuation">]</span> as<span class="token punctuation">;</span> Cell a<span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">;</span> <span class="token keyword">long</span> v<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/**            * 有三个分支            * 主分支一：cells初始化好(处理add方法中的第3，4个条件)            * 主分支二：cells数组没有初始化或者长度为0的情况(这个分支处理add方法的第1，2个条件)            * 主分支三：cells数组正在被其他线程初始化则尝试将累加值通过cas累加到base上            */</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>as <span class="token operator">=</span> cells<span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> as<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">/**                * 小分支一：如果当前cess[i]的位置为空处理的是第三个条件                */</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">=</span> as<span class="token punctuation">[</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> h<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 代表没有其他线程修改</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>cellsBusy <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">// Try to attach new Cell</span>                        <span class="token comment" spellcheck="true">// 创建一个cell对象</span>                        Cell r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cell</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// Optimistically create</span>                        <span class="token comment" spellcheck="true">// 如果没有其它线程修改通过cas将cellBusy设置为1</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>cellsBusy <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">casCellsBusy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token comment" spellcheck="true">//标记create是否创建成功并放入cells数组被hash的位置上</span>                            <span class="token keyword">boolean</span> created <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                            <span class="token keyword">try</span> <span class="token punctuation">{</span>               <span class="token comment" spellcheck="true">// Recheck under lock</span>                                                                Cell<span class="token punctuation">[</span><span class="token punctuation">]</span> rs<span class="token punctuation">;</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> j<span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">//再次检查cells数组不为空并且长度大于0</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>rs <span class="token operator">=</span> cells<span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span>                                    <span class="token punctuation">(</span>m <span class="token operator">=</span> rs<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>                                    rs<span class="token punctuation">[</span>j <span class="token operator">=</span> <span class="token punctuation">(</span>m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> h<span class="token punctuation">]</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                    rs<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> r<span class="token punctuation">;</span>                                    <span class="token comment" spellcheck="true">// 表示执行成功</span>                                    created <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                                <span class="token punctuation">}</span>                            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                                <span class="token comment" spellcheck="true">//去掉锁</span>                                cellsBusy <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                            <span class="token comment" spellcheck="true">// 成功跳出循环</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>created<span class="token punctuation">)</span>                                <span class="token keyword">break</span><span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">//失败说明被其它线程赋值了cells[i]位置</span>                            <span class="token keyword">continue</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// Slot is now non-empty</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                    collide <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">/**                * 小分支二：如果add方法中条件4通过cas加cell[i]失败则重新设置为true去找另一个cell                */</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>wasUncontended<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">// CAS already known to fail</span>                    wasUncontended <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// Continue after rehash</span>                <span class="token comment" spellcheck="true">/**                * 小分支三：给cell[i]加值如果成功则直接退出                */</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">cas</span><span class="token punctuation">(</span>v <span class="token operator">=</span> a<span class="token punctuation">.</span>value<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>fn <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> v <span class="token operator">+</span> x <span class="token operator">:</span>fn<span class="token punctuation">.</span><span class="token function">applyAsLong</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/**                * 小分支四：如果cells发生了扩容或者当前cells数组长度大于了CPU的数量就存在冲突                */</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">>=</span> NCPU <span class="token operator">||</span> cells <span class="token operator">!=</span> as<span class="token punctuation">)</span>                    collide <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// At max size or stale</span>                <span class="token comment" spellcheck="true">/**                * 小分支五：如果发生了冲突设置为true再次hash                */</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>collide<span class="token punctuation">)</span>                    collide <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/**                * 小分支六： 扩容                */</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cellsBusy <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">casCellsBusy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// 检查cells是否已经扩容</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>cells <span class="token operator">==</span> as<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// Expand table unless stale</span>                            Cell<span class="token punctuation">[</span><span class="token punctuation">]</span> rs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cell</span><span class="token punctuation">[</span>n <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>                                rs<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> as<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                            cells <span class="token operator">=</span> rs<span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                        cellsBusy <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    collide <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">// Retry with expanded table</span>                <span class="token punctuation">}</span>                                <span class="token comment" spellcheck="true">// 重新计算hash</span>                h <span class="token operator">=</span> <span class="token function">advanceProbe</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">/**            * 主分支二：初始化            */</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cellsBusy <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> cells <span class="token operator">==</span> as <span class="token operator">&amp;&amp;</span> <span class="token function">casCellsBusy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">boolean</span> init <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                           <span class="token comment" spellcheck="true">// Initialize table</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>cells <span class="token operator">==</span> as<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        Cell<span class="token punctuation">[</span><span class="token punctuation">]</span> rs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cell</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                        rs<span class="token punctuation">[</span>h <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cell</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>                        cells <span class="token operator">=</span> rs<span class="token punctuation">;</span>                        init <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                    cellsBusy <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>init<span class="token punctuation">)</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">/**            * 主分支三：如果别人正在初始化就尝试CAS加base            */</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">casBase</span><span class="token punctuation">(</span>v <span class="token operator">=</span> base<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>fn <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> v <span class="token operator">+</span> x <span class="token operator">:</span>fn<span class="token punctuation">.</span><span class="token function">applyAsLong</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>                          <span class="token comment" spellcheck="true">// Fall back on using base</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>advanceProbe</strong></p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">advanceProbe</span><span class="token punctuation">(</span><span class="token keyword">int</span> probe<span class="token punctuation">)</span> <span class="token punctuation">{</span>        probe <span class="token operator">^=</span> probe <span class="token operator">&lt;&lt;</span> <span class="token number">13</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// xorshift</span>        probe <span class="token operator">^=</span> probe <span class="token operator">>>></span> <span class="token number">17</span><span class="token punctuation">;</span>        probe <span class="token operator">^=</span> probe <span class="token operator">&lt;&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span>        UNSAFE<span class="token punctuation">.</span><span class="token function">putInt</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> PROBE<span class="token punctuation">,</span> probe<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> probe<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><font color="red">怎么确保Probe是当前线程的</font><br>在Thread类中定义了三个变量</p></blockquote><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@sun</span><span class="token punctuation">.</span>misc<span class="token punctuation">.</span><span class="token function">Contended</span><span class="token punctuation">(</span><span class="token string">"tlr"</span><span class="token punctuation">)</span>    <span class="token keyword">long</span> threadLocalRandomSeed<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/** Probe hash value; nonzero if threadLocalRandomSeed initialized */</span>    <span class="token annotation punctuation">@sun</span><span class="token punctuation">.</span>misc<span class="token punctuation">.</span><span class="token function">Contended</span><span class="token punctuation">(</span><span class="token string">"tlr"</span><span class="token punctuation">)</span>    <span class="token keyword">int</span> threadLocalRandomProbe<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/** Secondary seed isolated from public ThreadLocalRandom sequence */</span>    <span class="token annotation punctuation">@sun</span><span class="token punctuation">.</span>misc<span class="token punctuation">.</span><span class="token function">Contended</span><span class="token punctuation">(</span><span class="token string">"tlr"</span><span class="token punctuation">)</span>    <span class="token keyword">int</span> threadLocalRandomSecondarySeed<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见IO模型</title>
      <link href="/2022/11/01/chang-jian-io-mo-xing/"/>
      <url>/2022/11/01/chang-jian-io-mo-xing/</url>
      
        <content type="html"><![CDATA[<h2 id="用户空间与内核空间"><a href="#用户空间与内核空间" class="headerlink" title="用户空间与内核空间"></a>用户空间与内核空间</h2><blockquote><p>进程的寻址空间会划分为两部分：<strong>内核空间</strong>、<strong>用户空间</strong><br>用户空间只能执行受限的命令，而且不能直接调用系统资源，必须通过内核提供的接口来访问<br>内核空间可以执行特权命令。调用一切系统资源</p></blockquote><h2 id="阻塞IO"><a href="#阻塞IO" class="headerlink" title="阻塞IO"></a>阻塞IO</h2><p><img src="https://img-blog.csdnimg.cn/019f0f84ac15423d8961009537138dbd.png" alt="在这里插入图片描述"></p><blockquote><p>在客户端连接数量不高的情况下，是没问题的。但是，当面对十万甚至百万级连接的时候，传统的 BIO 模型是无能为力的。因此，我们需要一种更高效的 I/O 处理模型来应对更高的并发量</p></blockquote><h2 id="非阻塞IO"><a href="#非阻塞IO" class="headerlink" title="非阻塞IO"></a>非阻塞IO</h2><p><img src="https://img-blog.csdnimg.cn/7f28d4e3982a4ddca1108ad520db91ed.png" alt="在这里插入图片描述"></p><blockquote><p>应用程序不断进行 I/O 系统调用轮询数据是否已经准备好的过程是十分消耗 CPU 资源的。</p></blockquote><h2 id="IO多路复用"><a href="#IO多路复用" class="headerlink" title="IO多路复用"></a>IO多路复用</h2><blockquote><p>如果调用recvform时，恰好没有数据，阻塞IO会使进程阻塞，非阻塞IO使CPU空转，不能充分发挥CPU作用<br>如果调用recvform时恰好有数据，则用户进程进入第二个阶段，读取并处理数据   </p></blockquote><blockquote><p><strong>文件描述符：</strong> 简称FD，是一个从0开始递增的无符号整数，用来关联Linux中的一个文件。在Linux中一切皆文件。<br><strong>IO多路复用：</strong> 是利用单个线程来同时监听多个FD，并在某个FD可读、可写时得到通知，从而避免无效的等待，充分利用CPU资源<br>不同监听FD的方式、通知的方式有多种实现，常见的有：<br>select<br>poll<br>epoll<br><strong>差异</strong><br>select和poll只会通知进程有FD就绪，但不确定具体是那个FD，需要用户进程逐个遍历FD来确认<br>epoll则会通知用户进程FD就绪的同时，把已就绪的FD写入用户空间</p></blockquote><p><img src="https://img-blog.csdnimg.cn/f7bb98ad6b574ee8b8fda12126532b4a.png" alt="在这里插入图片描述"></p><h3 id="IO多路复用-select"><a href="#IO多路复用-select" class="headerlink" title="IO多路复用-select"></a>IO多路复用-select</h3><p><img src="https://img-blog.csdnimg.cn/e9e290fb506a48febe905729b32053e3.png" alt="在这里插入图片描述"></p><blockquote><p><strong>缺点</strong><br>需要将整个fd_set从用户空间拷贝到内核空间，select结束还要再次拷贝回用户空间<br>select无法得知具体是那个fd就绪，需要遍历整个fd_set<br>fd_set监听的fd数量不能超过1024</p></blockquote><h3 id="IO多路复用-poll"><a href="#IO多路复用-poll" class="headerlink" title="IO多路复用-poll"></a>IO多路复用-poll</h3><p><img src="https://img-blog.csdnimg.cn/7ed80652660f4ec6994225ee57b00602.png" alt="在这里插入图片描述"></p><blockquote><p><strong>流程</strong><br>创建pollfd数组，向其中添加关注fd信息，数组大小自定义<br>调用poll函数，将pollfd数组拷贝到内核空间，转链表存储，无上限<br>内核遍历fd，判断是否就绪<br>数据就绪或超时后，拷贝pollfd数组到用户空间，返回就绪fd数量<br>用户进程判断n是否大于0<br>大于0则遍历pollfd数组，找到就绪数组</p></blockquote><blockquote><p><strong>与select对比</strong><br>select模式中的fd_set大小固定为1024，而pollfd在内核中采用链表，理论上无上限<br>监听FD越多，每次遍历消耗时间也越久，性能反而会下降</p></blockquote><h3 id="IO多路复用-epoll"><a href="#IO多路复用-epoll" class="headerlink" title="IO多路复用-epoll"></a>IO多路复用-epoll</h3><p><img src="https://img-blog.csdnimg.cn/7f80bb9e3f6341d3b09aa8fb4f47049e.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/9206d0cd9a0b44d1b41beb0030a9537a.png" alt="在这里插入图片描述"></p><blockquote><p>基于epoll实例中的红黑树保存要监听的FD，理论上无上限，而且增删改查效率都非常高，性能不会随着监听的FD数量增多而下降<br>每个FD只需执行一次epoll_ctl添加到红黑树，以后每次epol_wait无需传递任何参数，无需重复拷贝FD到内核空间<br>内核会将就绪的FD直接拷贝到用户空间的指定位置，用户进程无需遍历所有的FD就知道就绪的FD是谁</p></blockquote><h3 id="IO多路复用-事件通知机制"><a href="#IO多路复用-事件通知机制" class="headerlink" title="IO多路复用-事件通知机制"></a>IO多路复用-事件通知机制</h3><blockquote><p>当FD有数据可读时，我们调用epoll_wait就可以得到通知，但是事件通知的模型有两种：<br>LevelTriggered：简称LT，当FD有数据可读时，会重复通知多次，直到数据处理完成<br>EdgeTriggered：简称ET，当FD有数据可读时，只会通知一次，不管数据是否处理完成</p></blockquote><h2 id="信号驱动IO"><a href="#信号驱动IO" class="headerlink" title="信号驱动IO"></a>信号驱动IO</h2><blockquote><p>信号驱动IO是与内核建立SIGIO的信号关联并设置回调，当内核有FD就绪时，会发出SIGIO信号通知用户，期间用户应用可以执行其它业务，无需阻塞等待<br><img src="https://img-blog.csdnimg.cn/0a77023eb35c4d8cb78e533402c4bc7a.png" alt="在这里插入图片描述"></p></blockquote><blockquote><p>当有大量IO操作时，信号较多，SIGIO处理函数不能及时处理可能导致信号队列溢出<br>而且内核空间与用户空间的频繁交互性能较低</p></blockquote><h2 id="异步IO"><a href="#异步IO" class="headerlink" title="异步IO"></a>异步IO</h2><blockquote><p>异步IO的整个过程都是非阻塞的，用户进程调用完异步API后就可以去做其它事情，内核等待数据就绪并拷贝到用户空间才会递交信号</p></blockquote><p><img src="https://img-blog.csdnimg.cn/d33e4630516745168739acdd679f13ad.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IO模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MuziDB数据库—1.TM的实现</title>
      <link href="/2022/11/01/muzidb-shu-ju-ku-1-tm-de-shi-xian/"/>
      <url>/2022/11/01/muzidb-shu-ju-ku-1-tm-de-shi-xian/</url>
      
        <content type="html"><![CDATA[<h2 id="TM简述"><a href="#TM简述" class="headerlink" title="TM简述"></a>TM简述</h2><p>TM是项目中最简单的一个模块，TM主要的功能为</p><blockquote><p><strong>1. 管理事务状态</strong><br><strong>2. 提供接口供其它模块使用</strong></p></blockquote><p>其中文件格式</p><p><img src="https://img-blog.csdnimg.cn/a65dbef0db394362999d75e9fb9bcee3.png" alt="在这里插入图片描述"></p><h2 id="XID文件"><a href="#XID文件" class="headerlink" title="XID文件"></a>XID文件</h2><h3 id="文件概述"><a href="#文件概述" class="headerlink" title="文件概述"></a>文件概述</h3><p>每个事务都有一个XID，这个XID唯一标识了这个事务，事务的XID从1开始自增并且不能重复，如果一些操作在不需要事务的情况下进行，则可以设置XID为0，XID为0的事务的状态永远是committed<br>XID文件头部占用8个字节，记录了这个XID文件管理的事务的个数，每个事务分配一个字节的空间用来保存其状态，所以事务XID在文件中的起始位置为(XID-1)+8字节处，XID为0的状态不需要记录</p><p>每一个事务都存在三种状态</p><blockquote><p><strong>0 active 活跃的<br>1 committed 已提交的<br>2 aborted 撤销(回滚的)</strong></p></blockquote><h2 id="TM提供接口"><a href="#TM提供接口" class="headerlink" title="TM提供接口"></a>TM提供接口</h2><h3 id="提供接口"><a href="#提供接口" class="headerlink" title="提供接口"></a>提供接口</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">long</span> <span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 开启一个事务</span><span class="token keyword">void</span> <span class="token function">commit</span><span class="token punctuation">(</span><span class="token keyword">long</span> xid<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 提交一个事务</span><span class="token keyword">void</span> <span class="token function">abort</span><span class="token punctuation">(</span><span class="token keyword">long</span> xid<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//取消一个事务</span><span class="token keyword">boolean</span> <span class="token function">isActive</span><span class="token punctuation">(</span><span class="token keyword">long</span> xid<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 查询一个事务是否处于正在进行状态</span><span class="token keyword">boolean</span> <span class="token function">isCommitted</span><span class="token punctuation">(</span><span class="token keyword">long</span> xid<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 查询一个事务是否已经提交</span><span class="token keyword">boolean</span> <span class="token function">isAbort</span><span class="token punctuation">(</span><span class="token keyword">long</span> xid<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//查询一个事务是否已经取消</span><span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 关闭tm</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="事务的操作"><a href="#事务的操作" class="headerlink" title="事务的操作"></a>事务的操作</h3><p>事务的开启、提交、取消</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">// 开启一个事务</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        counterLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">long</span> xid <span class="token operator">=</span> xidCounter <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token function">updateXID</span><span class="token punctuation">(</span>xid<span class="token punctuation">,</span> FIELD_TRAN_ACTIVE<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">incrXIDCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> xid<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            counterLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 提交XID事务</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">commit</span><span class="token punctuation">(</span><span class="token keyword">long</span> xid<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">updateXID</span><span class="token punctuation">(</span>xid<span class="token punctuation">,</span> FIELD_TRAN_COMMITTED<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 回滚XID事务</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">abort</span><span class="token punctuation">(</span><span class="token keyword">long</span> xid<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">updateXID</span><span class="token punctuation">(</span>xid<span class="token punctuation">,</span> FIELD_TRAN_ABORTED<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//修改状态</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">updateXID</span><span class="token punctuation">(</span><span class="token keyword">long</span> xid<span class="token punctuation">,</span> <span class="token keyword">byte</span> status<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span> offset <span class="token operator">=</span> <span class="token function">getXidPosition</span><span class="token punctuation">(</span>xid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tmp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span>XID_FIELD_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>        tmp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> status<span class="token punctuation">;</span>        ByteBuffer buf <span class="token operator">=</span> ByteBuffer<span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            fc<span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span>offset<span class="token punctuation">)</span><span class="token punctuation">;</span>            fc<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Panic<span class="token punctuation">.</span><span class="token function">panic</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            fc<span class="token punctuation">.</span><span class="token function">force</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Panic<span class="token punctuation">.</span><span class="token function">panic</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查询事务状态"><a href="#查询事务状态" class="headerlink" title="查询事务状态"></a>查询事务状态</h3><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isActive</span><span class="token punctuation">(</span><span class="token keyword">long</span> xid<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>xid <span class="token operator">==</span> SUPER_XID<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">checkXID</span><span class="token punctuation">(</span>xid<span class="token punctuation">,</span> FIELD_TRAN_ACTIVE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isCommitted</span><span class="token punctuation">(</span><span class="token keyword">long</span> xid<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>xid <span class="token operator">==</span> SUPER_XID<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">checkXID</span><span class="token punctuation">(</span>xid<span class="token punctuation">,</span> FIELD_TRAN_COMMITTED<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isAborted</span><span class="token punctuation">(</span><span class="token keyword">long</span> xid<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>xid <span class="token operator">==</span> SUPER_XID<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">checkXID</span><span class="token punctuation">(</span>xid<span class="token punctuation">,</span> FIELD_TRAN_ABORTED<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">checkXID</span><span class="token punctuation">(</span><span class="token keyword">long</span> xid<span class="token punctuation">,</span> <span class="token keyword">byte</span> status<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span> offset <span class="token operator">=</span> <span class="token function">getXidPosition</span><span class="token punctuation">(</span>xid<span class="token punctuation">)</span><span class="token punctuation">;</span>        ByteBuffer buf <span class="token operator">=</span> ByteBuffer<span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span>XID_FIELD_SIZE<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            fc<span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span>offset<span class="token punctuation">)</span><span class="token punctuation">;</span>            fc<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Panic<span class="token punctuation">.</span><span class="token function">panic</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> buf<span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> status<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>TM就这么具体实现了，可能会有人认为这个项目其实也不是很难，但是这个TM是该项目中最最简单的所以实现的很快，TM基本上就是查询文件，修改文件来维护事务的状态的修改与查询</p>]]></content>
      
      
      <categories>
          
          <category> 优质项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MuziDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MuziDB数据库—0.项目描述</title>
      <link href="/2022/11/01/muzidb-shu-ju-ku-0-xiang-mu-miao-shu/"/>
      <url>/2022/11/01/muzidb-shu-ju-ku-0-xiang-mu-miao-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>该项目写完也有一段时间了，为了避免以后忘记该项目的一些实现的原理，所以写下这篇博客来记录一下该项目的设计等</p><h2 id="项目整体"><a href="#项目整体" class="headerlink" title="项目整体"></a>项目整体</h2><p>MuziDB分为前端与后端，前后端交互通过socket进行交互，前端的作用就是读取用户输入并发送到后端进行执行然后输出返回结果，并等待下一次的输入，后端则需要解析SQL，尝试执行并返回结果。MuziDB的后端分为五个模块</p><blockquote><p><strong>Transaction Manager (TM )<br>Data Manager (DM)<br>Version Manager (VM)<br>Index Manager (IM)<br>Table Manager (TBM)</strong></p></blockquote><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><p><img src="https://img-blog.csdnimg.cn/0f4136332f944455b7e27eb66425df43.png" alt="在这里插入图片描述"></p><p>TM：维护XID文件来维护事务的状态，并提供接口给其它模块来查询某个事务的状态<br>DM：直接管理数据的DB文件和日志文件<br>VM：基于两段锁协议实现调度序列的可串行化，并实现了MVCC消除读写阻塞<br>IM：实现了B+树的索引<br>TBM：实现了对字段和表的管理，同时解析SQL语句并根据语句操作表</p><h2 id="项目涉及四个文件"><a href="#项目涉及四个文件" class="headerlink" title="项目涉及四个文件"></a>项目涉及四个文件</h2><p><img src="https://img-blog.csdnimg.cn/0661dd745eed4b8f8ba8e104a4289963.png" alt="在这里插入图片描述"></p><blockquote><p>根据<strong>UID</strong>可以定位到是那个页面多少偏移量，因为pgno是int类型，offset是short类型，而我们返回的UID是long类型所以long占八个字节而UID = ((long)pgno &lt;&lt; 32) | (long)offset，所以前四个字节是pgno所占用的，最后2个字节是offset占用的，所以只需要再经过简单换算就可以换算出来对应的pgno与offset，所以.db中的每个资源都有着唯一的UID，所以<strong>UID的作用可以相当于一个资源定位符</strong></p></blockquote><p><strong>.bt文件</strong><br>该文件只有8个字节，当创建一张新表的时候就会把新表的UID复制到这个文件保存</p><p><strong>.xid文件</strong><br>这个文件就是管理事务的文件，里面会保存首先8个字节的XIDCounter，然后接下来的每个字节就是保存一个事务的状态<br><img src="https://img-blog.csdnimg.cn/efe0e53fed44496b955c666e8c8d527d.png" alt="在这里插入图片描述"></p><p>这个文件对应的功能就是比较简单的TM，只需要保证事务的开启、提交、取消即可<br>事务对应着三种状态</p><blockquote><p><strong>0 - active<br>1 - committed<br>2 - aborted</strong></p></blockquote><p><strong>.log文件</strong></p><p>为什么一直不说.db文件呢，因为.db文件中的要素过多留到最后来讲<br>.log文件就是记录操作过程中产生的日志，为什么要记录日志呢，有了.db文件，.db文件中不是就已经存储了数据了吗?那MySQL数据中为啥又会存在redo、undo log日志呢，而且记录日志有助于后面实现可重复读，假如不记录日志的话，那么可重复读就不能够实现</p><p>日志文件格式如下 前四个字节记录所有日志的校验和，后面就是一个一个的[Log]对象即 [xchecksum] [log1] [log2] … [logn] [BadTail] ，badTail有可能会出现，比如当你记录最后一条日志的时候但是你没有记录完但是数据库宕机了那么这就是badTail<br>每个日志对象即[log]的形式是 [size][checksum][data]<br>其中size占四个字节，checksum占四个字节，data所占字节就是size所描述的</p><p><img src="https://img-blog.csdnimg.cn/83816ef0860341bfa2615ac015c72a26.png" alt="在这里插入图片描述"></p><p><strong>.db文件</strong></p><p>.db文件是最重要的一个文件了，里面包含表结构数据、表中数据、Node节点数据等，.db文件中保存的都是一个一个的DataItem结构,.db文件是以页来区分，每个页面大小为8k但是你也可以设置更大的容量，每个页面的前2个字节为该页面的偏移量(便宜量就是当前页面要从哪里开始写入新数据)，<br>DataItem中存在三个字段<br>ValidFlag 1字节的标志位代表是否有效<br>Size 2字节Data的字段的大小<br>Data 就是数据</p><p><img src="https://img-blog.csdnimg.cn/c6b6e9c35aa24598856bbeb34d7a2376.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 优质项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MuziDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DNS查询流程</title>
      <link href="/2022/10/05/dns-cha-xun-liu-cheng/"/>
      <url>/2022/10/05/dns-cha-xun-liu-cheng/</url>
      
        <content type="html"><![CDATA[<p>查询服务器域名对应的IP地址<br>其中域名的层级关系类似于一个树状结构</p><ul><li>根DNS服务器(.)</li><li>顶级域名服务器(.com)</li><li>权威DNS服务器(server.com)</li></ul><p><img src="https://img-blog.csdnimg.cn/b245b4ca07494033aad56103c92e90c2.png" alt="在这里插入图片描述"></p><p><strong>域名解析工作流程</strong><br><img src="https://img-blog.csdnimg.cn/63fb956ff3504d7a8d069e9bc5f1fc17.png" alt="在这里插入图片描述"></p><blockquote><p><strong>1. 客户端发起一个DNS请求，先查看本地浏览器是否有这个域名的缓存，有解析结束<br>2. 没有则去看操作系统是否有缓存，有解析结束<br>3. 没有则去看本地host文件，有解析结束<br>4. 没有则发送该请求到本地DNS服务器，如果本地DNS服务器存在则返回<br>5. 不存在本地DNS服务器则请求根域名服务器，比如请求”<a href="http://www.baidu.com&quot;,根域名服务器告诉本地dns/">www.baidu.com&quot;，根域名服务器告诉本地DNS</a> “.com” 顶级域名服务器的位置<br>6. 本地DNS服务器收到顶级域名服务器位置后则向顶级域名服务器请求”<a href="http://www.baidu.com&quot;的ip地址,顶级域名服务器收到后则告诉本地dns服务器&quot;www.baidu.com&quot;的权威域名服务器地址/">www.baidu.com&quot;的IP地址，顶级域名服务器收到后则告诉本地DNS服务器&quot;www.baidu.com&quot;的权威域名服务器地址</a><br>7. 本地DNS服务器再向权威DNS服务器发起请求，权威DNS服务器查询后将对应的IP地址告诉本地DNS<br>8. 本地DNS服务器缓存该域名与对应IP然后返回IP给客户端<br>9. 浏览器根据TTL缓存该值</strong></p></blockquote><blockquote><p><strong>注意：其中1-4为递归查询，5-7为迭代查询</strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 计网 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DNS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cookie、Session、Token区别</title>
      <link href="/2022/10/03/cookie-session-token-qu-bie/"/>
      <url>/2022/10/03/cookie-session-token-qu-bie/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>由于HTTP协议本身是无状态的，及服务器无法判断用户身份。cookie与session都是用来跟踪浏览器用户身份的会话</strong></p></blockquote><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><blockquote><p>Cookie其实是浏览器保存在电脑中的一些key-value结构形式的文本数据，其中包含了我们以及服务器的一些信息，当我们向服务器发送请求的时候，这些cookie数据会随着请求报文一起发送服务器，服务器识别当前的cookie，同时服务器也可以在响应报文的头部加上set-cookie希望浏览器可以缓存cookie，浏览器收到响应报文，发现了set-cookie字段就会将其数据保在浏览器</p></blockquote><p><img src="https://img-blog.csdnimg.cn/974139e65a0e47bea889fcc7bd851fb0.png" alt="在这里插入图片描述"></p><blockquote><p>由于Cookie是保存在本地文件中，所以是能够长期保存，只需要将过期时间设置的长一些。由于cookie是存储在本地，所以它其实是<strong>不安全</strong>的，并且Cookie能够<strong>保存的数据大小有限</strong>，单个Cookie保存的数据不能超过4K<br><img src="https://img-blog.csdnimg.cn/913f360188f542f8aca93cbfd5dfdda5.png" alt="在这里插入图片描述"></p></blockquote><table><thead><tr><th>参数名</th><th>作用</th><th>后端设置方法</th></tr></thead><tbody><tr><td>Max-Age</td><td>设置Cookie的过期时间，单位为秒</td><td>cookie.setMaxAge(60);</td></tr><tr><td>Domain</td><td>指定了Cookie所属的域名</td><td>cookie.setDomain(“”);</td></tr><tr><td>Path</td><td>指定了Cookie所属的路径</td><td>cookie.setPath(“/test”);</td></tr><tr><td>HttpOnly</td><td>告诉浏览器此Cookie只能靠Http协议传输</td><td>cookie.setHttpOnly();</td></tr><tr><td>Secure</td><td>告诉浏览器此Cookie只能靠Https安全协议传输</td><td>cookie.setSecure();</td></tr></tbody></table><h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><blockquote><p>从字面上讲就是<strong>会话</strong>，表明客户端与服务器的一次会话，与Cookie不一样，Session是由服务器进行维护的。当客户端向服务发送一个请求时，服务器会为发起这个请求的客户端创建一个对象并存储在服务器的一个集合中，同时生成一个唯一的<strong>SessionId</strong>来标识这个对象，而有关这个请求的客户端信息就保存在这个session中。当服务器给用户发送响应报文时，也会将<strong>sessionid</strong>放入<strong>set-cookie</strong>中，用户接收到响应报文后，保存这个cookie，当下一次向服务器发送请求的时候会带上这个cookie然后服务端进行验证<br>服务端<strong>不会一直维护session</strong>，它会在用户退出浏览器、或者在一段时间没有接收到这个用户的请求后将Session清除</p></blockquote><p><img src="https://img-blog.csdnimg.cn/accdd55a24674db1b279b348074661a7.png" alt="在这里插入图片描述"></p><blockquote><p>Session的缺点，对于每一个用户服务器都需要维护一个或多个Session，若一段时间内访问服务器的用户数量庞大，将导致服务器需要<strong>维护大量的Session对象，严重占用资源</strong> ，除此之外，当今的web服务器，都采用了集群的技术，集群中的每一台服务器的Session都是独立的，要实现<strong>Session共享比较麻烦</strong> 。</p></blockquote><h2 id="Token"><a href="#Token" class="headerlink" title="Token"></a>Token</h2><blockquote><p>Token的主要作用是对用户做身份认证，我们一般称之为<strong>令牌</strong>。当我们登录一个网站的时候，输入账号密码发送到客户端，此时服务器擦哈寻数据库，验证账号密码，若验证成功服务器则根据一些加密算法加密一些不敏感的用户信息计算出一个Token然后返回给客户端。客户端收到Token后保存下来，接下来的每次请求都携带者走，然后解析Token，如果解析成功就验证成功获取服务器数据。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/83f50143ca0248dc9206293a05952bde.png" alt="在这里插入图片描述"></p><blockquote><p>但是Token如果一旦被别人截获，对方就可以使用你的身份，所以Token一般是基于HTTPS使用</p></blockquote><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><p><strong>Cookie与Session的区别</strong></p><blockquote><p>安全性：Session比Cookie安全，Session是存储在服务器端的，Cookie是存储在客户端的<br>存取值的类型不同：Cookie只支持存字符串数据，Session可以存任意数据类型<br>有效期不同：Cookie可以设置为长时间保存，Session一般时间较短，客户端关闭或者Session超时就会失效<br>存储大小不同：单个Cookie保存的数据不能超过4K.Session存储数据远大于Cookie但是当访问量过高的时候会占用更多的服务器资源</p></blockquote><h2 id="禁用Cookie后如何使用Session"><a href="#禁用Cookie后如何使用Session" class="headerlink" title="禁用Cookie后如何使用Session"></a>禁用Cookie后如何使用Session</h2><p><strong>URL重写</strong></p><pre class="line-numbers language-java"><code class="language-java">http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>test<span class="token punctuation">.</span>com<span class="token operator">/</span>test<span class="token punctuation">;</span>jsessionid<span class="token operator">=</span>ByOK3vjFD75aPnrF7C2HmdnV6QZcEbzWoWiBYEnLerjQ99zWpBng<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>如果重写URL则应该在应用程序的所有页面中都要对URL编码重写，包括超链接和表单action属性值<br>静态的HTML页面必须通过Servlet运行，在它将页面发送给客户时重写URL</p></blockquote><p><strong>表单隐藏字段</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span>form name<span class="token operator">=</span><span class="token string">"testform"</span> action<span class="token operator">=</span><span class="token string">"/xxx"</span><span class="token operator">></span> <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"hidden"</span> name<span class="token operator">=</span><span class="token string">"jsessionid"</span> value<span class="token operator">=</span><span class="token string">"ByOK3vjFD75aPnrF7C2HmdnV6QZcEbzWoWiBYEnLerjQ99zWpBng!-145788764″> &lt;input type="</span>text"<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>需要页面中含有表单或者自己构建一个表单来使用</p></blockquote><p><strong>localStorage</strong></p><blockquote><p>使用其它存储缓存sessionid</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 计网 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cookie </tag>
            
            <tag> Session </tag>
            
            <tag> Token </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态缓存热点数据</title>
      <link href="/2022/10/03/dong-tai-huan-cun-re-dian-shu-ju/"/>
      <url>/2022/10/03/dong-tai-huan-cun-re-dian-shu-ju/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写在前面，因为我们最近的大作业项目需要用到热点排行这个功能，因为我们是要使用Elasticsearch来存储数据，然后最初设想是在ES中实现这个热点排行的功能，但是经过仔细思考，在我们这个项目中使用ES来做热点排行是一个很蠢的方式，因为我们这只是一个很小的排行，所以最终我们还是使用Redis来实现热点排行</p></blockquote><h2 id="使用LRU？"><a href="#使用LRU？" class="headerlink" title="使用LRU？"></a>使用LRU？</h2><p>LRU是一种常见的算法，假如我们设定TOP10的热点数据，那么我们可以规定LRU容量为10，当容量没有满的时候，我们可以直接放入，当满了的时候我们就将最后一个排除然后引入最新的放在首部<br><img src="https://img-blog.csdnimg.cn/241327197ae849d4a6dcd2a59b46dad6.png" alt="在这里插入图片描述"></p><blockquote><p>这看似实现了热点排行但是没有，比如说2号数据访问100次而11号数据才访问一次，那么使用LRU就把100次访问的排除掉了，这就是不合理的，所以我们应该以每个数据的访问频率来选择排行</p></blockquote><h2 id="如何进行访问率排行"><a href="#如何进行访问率排行" class="headerlink" title="如何进行访问率排行"></a>如何进行访问率排行</h2><p>把所有数据都加入内存中，然后记录每个数据被访问的频率，这看起来就是很简单的，使用zset就可以实现，但是假如你的数据有100w条呢？你这样全部存入Redis，那么会导致大key的出现，同时引起Redis的效率降低，那么可以单独启动一台服务器来保存排行榜的数据？这其实是浪费的，因为一般我们的排行榜都是TOP10~TOP100，基本占用不了多少内存，而在我们的项目中我们的数据量是比较少的，而且有上传时间，一般上传时间越近更容易上TOP10，而且我们需要的只是TOP10，所有有两种方案</p><blockquote><p><strong>第一种</strong>：在数据库中挑选最近上传的10条数据，然后如果有人访问了这10条数据，那么对应的数据的访问频率就加一，不在这10条数据里面就不去管它，然后经过一段时间就去掉末尾几条访问频率较低的数据，再随机挑选几条假如TOP10，然后循环<br><strong>第二种</strong>：第一种还是存在一点缺陷，就是有可能最开始TOP10就是访问最高的，那么可能会把真正的TOP10挤下去，所有在第二种方案中，我们缓存20条数据，每隔一段时间去掉访问频率最低的5-10条，然后随机挑选进来补充至20条但是我们只取前10，其它与方案一类似，只是缓存更多的数据</p></blockquote><h2 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h2><p>理解思路过后，代码编写是最简单的一步，如何在项目中引入Redis以及操作Redis的依赖配置就不再赘述，因为那个与代码编写逻辑没有什么关联</p><h3 id="选择最近20条数据"><a href="#选择最近20条数据" class="headerlink" title="选择最近20条数据"></a>选择最近20条数据</h3><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getCur2MySQL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Set<span class="token operator">&lt;</span>ZSetOperations<span class="token punctuation">.</span>TypedTuple<span class="token operator">&lt;</span>String<span class="token operator">>></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> cur2Ids <span class="token operator">=</span> baseMapper<span class="token punctuation">.</span><span class="token function">getCur2Ids</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cur2Ids<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>e<span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            DefaultTypedTuple<span class="token operator">&lt;</span>String<span class="token operator">></span> tuple <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultTypedTuple</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0d</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tuple<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForZSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeRange</span><span class="token punctuation">(</span>Constant<span class="token punctuation">.</span>POLICY_TOP_10<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForZSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>Constant<span class="token punctuation">.</span>POLICY_TOP_10<span class="token punctuation">,</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="有访问就加一"><a href="#有访问就加一" class="headerlink" title="有访问就加一"></a>有访问就加一</h3><p>这里加一方法可以使用Lua脚本，感兴趣的大佬可以去优化</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//访问</span>    <span class="token keyword">public</span> PolicyEntity <span class="token function">getByPolicyById</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">addVisited</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        Object o <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Constant<span class="token punctuation">.</span>POLICY_HASH_OBJECT<span class="token punctuation">,</span> Integer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        PolicyEntity policy <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span> o<span class="token punctuation">,</span> PolicyEntity<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> policy<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//加一</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addVisited</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForZSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">score</span><span class="token punctuation">(</span>Constant<span class="token punctuation">.</span>POLICY_TOP_10<span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForZSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">incrementScore</span><span class="token punctuation">(</span>Constant<span class="token punctuation">.</span>POLICY_TOP_10<span class="token punctuation">,</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1d</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="获取Top10"><a href="#获取Top10" class="headerlink" title="获取Top10"></a>获取Top10</h3><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>PolicyEntity<span class="token operator">></span> <span class="token function">getTop10</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Set<span class="token operator">&lt;</span>String<span class="token operator">></span> ids <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForZSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverseRange</span><span class="token punctuation">(</span>Constant<span class="token punctuation">.</span>POLICY_TOP_10<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Object<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ids<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>list<span class="token operator">:</span><span class="token operator">:</span>add<span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Object<span class="token operator">></span> multiGet <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">multiGet</span><span class="token punctuation">(</span>Constant<span class="token punctuation">.</span>POLICY_HASH_OBJECT<span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>PolicyEntity<span class="token operator">></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        multiGet<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>           PolicyEntity policyEntity <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span> d<span class="token punctuation">,</span> PolicyEntity<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>policyEntity<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来就是实现定时任务的代码编写，我使用的是Quartz编写定时任务，这个实现定时任务还是有着其它的方法，如果有兴趣的大佬可以去尝试尝试</p><h3 id="编写任务"><a href="#编写任务" class="headerlink" title="编写任务"></a>编写任务</h3><p>删除最后五个然后在数据库中随机挑选五个加入其中</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TopTenQuartzJob</span> <span class="token keyword">extends</span> <span class="token class-name">QuartzJobBean</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    StringRedisTemplate redisTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    PolicyService policyService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">executeInternal</span><span class="token punctuation">(</span>JobExecutionContext jobExecutionContext<span class="token punctuation">)</span> <span class="token keyword">throws</span> JobExecutionException <span class="token punctuation">{</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForZSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeRange</span><span class="token punctuation">(</span>Constant<span class="token punctuation">.</span>POLICY_TOP_10<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Set<span class="token operator">&lt;</span>String<span class="token operator">></span> ids <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForZSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span>Constant<span class="token punctuation">.</span>POLICY_TOP_10<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> ids<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>e <span class="token operator">-</span><span class="token operator">></span> Integer<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> id <span class="token operator">=</span> policyService<span class="token punctuation">.</span><span class="token function">listIdsAndNotIn</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        Set<span class="token operator">&lt;</span>ZSetOperations<span class="token punctuation">.</span>TypedTuple<span class="token operator">&lt;</span>String<span class="token operator">>></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        id<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>e<span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            DefaultTypedTuple<span class="token operator">&lt;</span>String<span class="token operator">></span> tuple <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultTypedTuple</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0d</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tuple<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForZSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>Constant<span class="token punctuation">.</span>POLICY_TOP_10<span class="token punctuation">,</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中的xml文件为</p><pre class="line-numbers language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>listIdsAndNotIn<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>integer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select id from p_policy where id not in        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span> <span class="token attr-name">open</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(<span class="token punctuation">"</span></span> <span class="token attr-name">close</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>)<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            #{id}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span>        order by RAND() limit 5    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="编写Trigger与JobDetail"><a href="#编写Trigger与JobDetail" class="headerlink" title="编写Trigger与JobDetail"></a>编写Trigger与JobDetail</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QuarztConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${quartz.policy.top10.cron}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String cron<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> JobDetail <span class="token function">topTenQuartzJobDetail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        JobDetail jobDetail <span class="token operator">=</span> JobBuilder<span class="token punctuation">.</span><span class="token function">newJob</span><span class="token punctuation">(</span>TopTenQuartzJob<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">storeDurably</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> jobDetail<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Trigger <span class="token function">topTenQuartzTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        CronScheduleBuilder schedule <span class="token operator">=</span> CronScheduleBuilder<span class="token punctuation">.</span><span class="token function">cronSchedule</span><span class="token punctuation">(</span>cron<span class="token punctuation">)</span><span class="token punctuation">;</span>        CronTrigger trigger <span class="token operator">=</span> TriggerBuilder<span class="token punctuation">.</span><span class="token function">newTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">forJob</span><span class="token punctuation">(</span><span class="token function">topTenQuartzJobDetail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withSchedule</span><span class="token punctuation">(</span>schedule<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> trigger<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种方式实现排行榜还是存在着问题，假如存在一个经常访问的数据但是一直随机没有随机进Redis，那么它就一直上不了排行榜，但是对于我这种项目的实现已经够用了，因为在我这个项目中我们保存的是最新的文件而且比较少，一般对于文件这种上热榜一般都是新发布的，所以该影响对此项目的影响较小</p><blockquote><p>如果有其它大佬有设计更好的排行榜希望可以评论区留言或者私信，感激不尽！！！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 场景 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 热点缓存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何定位慢查询SQL以及优化</title>
      <link href="/2022/10/03/ru-he-ding-wei-man-cha-xun-sql-yi-ji-you-hua/"/>
      <url>/2022/10/03/ru-he-ding-wei-man-cha-xun-sql-yi-ji-you-hua/</url>
      
        <content type="html"><![CDATA[<h2 id="慢查询日志记录慢SQL"><a href="#慢查询日志记录慢SQL" class="headerlink" title="慢查询日志记录慢SQL"></a>慢查询日志记录慢SQL</h2><p>定位慢SQL可以通过慢查询日志来查看慢SQL，默认的情况下，MySQL数据库不开启慢查询日志(slow query log)，需要手动把它打开<br>SET GLOBAL slow_query_log = ‘ON’;<br><img src="https://img-blog.csdnimg.cn/ca5a435941b34b31ac9d3667f4b1796f.png" alt="在这里插入图片描述"></p><p><strong>查看下慢查询日志配置</strong><br>SHOW VARIABLES LIKE ‘slow_query_log%’</p><p>slow_query_log：表示慢查询开启的状态<br>slow_query_log_file：表示慢查询日志存放的位置</p><p><strong>查看超过多少时间，才记录到慢查询日志</strong><br>SHOW VARIABLES LIKE ‘long_query_time’</p><p>注意： 这样配置是临时的如果需要永久修改需要去配置文件(/etc/my.cnf)</p><h2 id="explain查看分析SQL执行计划"><a href="#explain查看分析SQL执行计划" class="headerlink" title="explain查看分析SQL执行计划"></a>explain查看分析SQL执行计划</h2><p>通过慢查询日志定位出查询效率较低的SQL，可以使用explain查看SQL的执行计划<br><img src="https://img-blog.csdnimg.cn/363d74d85a864fafb0c7dc973c65b02f.png" alt="在这里插入图片描述"></p><p><strong>id</strong></p><blockquote><p><strong>1. id 值相同时，被视为一组从上向下执行。</strong><br><strong>2. 如果是子查询，id 值会递增，id 值越高，优先级越高</strong><br><strong>3. id为NULL最后执行</strong></p></blockquote><p><strong>select_type</strong></p><blockquote><p><strong>1. simple: 简单的select, 查询中不包含子查询或者 union。例如: select name from student where id= 100<br>2. primary: 子查询中最外层查询, 查询中若包含任何复杂的子部分, 最外层的select被标记为primary<br>3. derived：在 from 的列表中包含的子查询被标记成 derived（派生表）。例如: explain select id from (select id,name from student) student1 where name= ‘name100’<br>4. subquery：在 select 或 where 列表中包含了子查询，则子查询被标记成 subquery。例如: explain select id from student where score = (select score from student where<br>name=’name100’);<br>5. union: union中的第二个或后面的select语句. 例如: EXPLAIN select id from student where id&lt;12691055 UNION all select id from student where id&lt;12691060;</strong></p></blockquote><p><strong>table</strong></p><blockquote><p><strong>显示这一步所访问数据库中表名称. 有时候不是真实的表名, 可能是简称</strong></p></blockquote><p><strong>partitions</strong></p><blockquote><p><strong>该字段看table所在的分区, 值为NULL表示表未被分区</strong></p></blockquote><p><strong>possible_keys</strong></p><blockquote><p><strong>可能会使用到的索引(ps.其实不太重要)</strong></p></blockquote><p><strong>重点关注的字段</strong><br><strong>type</strong></p><blockquote><p><strong>表示连接类型，查看索引执行情况的一个重要指标 以下性能从好到坏依次：system &gt; const &gt; eq_ref &gt; ref &gt;<br>ref_or_null &gt; index_merge &gt; unique_subquery &gt; index_subquery &gt; range &gt;<br>index &gt; ALL<br>system：这种类型要求数据库表中只有一条数据，是const类型的一个特例，一般情况下是不会出现的<br>const：通过一次索引就能找到数据，一般用于主键或唯一索引作为条件，这类扫描效率极高，速度非常快<br>eq_ref：常用于主键或唯一索引扫描，一般指使用主键的关联查询 ref : 常用于非主键和唯一索引扫描<br>ref_or_null：这种连接类型类似于ref，区别在于MySQL会额外搜索包含NULL值的行<br>index_merge：使用了索引合并优化方法，查询使用了两个以上的索引<br>unique_subquery：类似于eq_ref，条件用了in子查询<br>index_subquery：区别于unique_subquery，用于非唯一索引，可以返回重复值<br>range：常用于范围查询，比如：between … and 或 In 等操作 index：全索引扫描 ALL：全表扫描</strong></p></blockquote><p><strong>key</strong></p><blockquote><p><strong>实际使用到的索引</strong></p></blockquote><p><strong>key_len</strong></p><blockquote><p><strong>实际使用到的索引的长度</strong></p></blockquote><p><strong>rows</strong></p><blockquote><p><strong>该列表示MySQL估算找到我们所需的记录，需要读取的行数</strong></p></blockquote><p><strong>filtered</strong></p><blockquote><p><strong>该列是一个百分比，是满足条件的记录数量与我们查询了多少记录数量的比值</strong></p></blockquote><p><strong>extra</strong></p><blockquote><p><strong>该字段包含有关MySQL如何解析查询的其他信息，它一般会出现这几个值：<br>● Usingfilesort：表示按文件排序，一般是在指定的排序和索引排序不一致的情况才会出现，一般见于order by语句<br>● Using index：表示是否用了覆盖索引<br>● Using temporary: 表示是否使用了临时表,性能特别差，需要重点优化，一般多见于groupby语句，或者union语句<br>● Using where : 表示使用了where条件过滤<br>● Using index condition：MySQL5.6之后新增的索引下推，在存储引擎层进行数据过滤，而不是在服务层过滤，利用索引现有的数据减少回表的数据</strong></p></blockquote><h2 id="profile分析执行耗时"><a href="#profile分析执行耗时" class="headerlink" title="profile分析执行耗时"></a>profile分析执行耗时</h2><blockquote><p><strong>explain只是看到SQL预估的执行计划，如果要了解SQL真正的执行线程状态及消耗的时间，需要使用profiling，开启profiling参数后，后续执行的SQL语句都会记录其资源开销，包括IO，上下文切换，CPU，内存等等，可以根据这些开销进一步分析当前慢SQL的瓶颈再进一步进行优化</strong></p></blockquote><p><img src="https://img-blog.csdnimg.cn/c556a8c892074bc08daf7cac58ba8d5f.png" alt="在这里插入图片描述"></p><h2 id="Optimizer-Trace分析详情"><a href="#Optimizer-Trace分析详情" class="headerlink" title="Optimizer Trace分析详情"></a>Optimizer Trace分析详情</h2><blockquote><p><strong>profile只能查看到SQL的执行耗时，但无法看到SQL真正执行的过程信息，不知道MySQL优化器是如何选择执行计划，这时候，可以使用Optimizer<br>Trace，它可以跟踪执行语句的解析优化执行的全过程</strong></p></blockquote><p><img src="https://img-blog.csdnimg.cn/f1315716958849f9a15717c99201a7f0.png" alt="在这里插入图片描述"></p><p>三个阶段分为对应：准备阶段、分析阶段、执行阶段</p><h1 id="确定问题采用响应措施"><a href="#确定问题采用响应措施" class="headerlink" title="确定问题采用响应措施"></a>确定问题采用响应措施</h1><p>● 多数慢SQL都跟索引有关，比如不加索引，索引不生效、不合理等，这时候，可以优化索引<br>● 还可以优化SQL语句，比如一些in元素过多问题(分批)，深分页问题(基于上一次数据过滤等)，进行时间分段查询<br>● SQL没办法很好优化，可以改用ES的方式，或者数仓<br>● 如果单表数据量过大导致慢查询，可以考虑分库分表<br>● 如果数据库在刷脏页导致慢查询，考虑是否可以优化一些参数<br>● 如果存量数据量太大，考虑是否可以让部分数据归档</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> SQL优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>索引的学习与理解</title>
      <link href="/2022/10/02/suo-yin-de-xue-xi-yu-li-jie/"/>
      <url>/2022/10/02/suo-yin-de-xue-xi-yu-li-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="为什么使用索引"><a href="#为什么使用索引" class="headerlink" title="为什么使用索引"></a>为什么使用索引</h2><p>索引是存储引擎用于快速找到数据记录的一种数据结构。MySQL在进行数据查找时，首先查看查询条件是否命中某条索引，符合则<strong>通过索引查找</strong>相关数据，如果不符合则<strong>全表扫描</strong>，建索引目的就是为了<strong>减少磁盘I/O次数</strong>，加快查询效率。</p><h2 id="索引及其优缺点"><a href="#索引及其优缺点" class="headerlink" title="索引及其优缺点"></a>索引及其优缺点</h2><h3 id="索引概述"><a href="#索引概述" class="headerlink" title="索引概述"></a>索引概述</h3><blockquote><p><strong>索引本质</strong>：索引是数据结构。这些数据结构以某种方式指向数据，这样可以在这些数据结构的基础上实现高效查找算法。<br><strong>索引是在存储引擎实现的</strong>，因此每种存储引擎的索引不一定完全相同，并且每种存储引擎不一定支持所有类型的索引。同时存储引擎可以定义每个表的最大索引数和最大索引长度。所有存储引擎支持每个表至少16个索引，总索引长度至少为256字节。</p></blockquote><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><blockquote><p>1、提高数据检索的效率，降低数据库的I/O成本<br>2、通过创建唯一索引，可以保证数据库表中每一行数据的唯一性<br>3、可以加速表和表之间的连接。对于有依赖关系的子表和父表联合查询时，可以提高查询速度<br>4、在使用分组和排序子句进行数据查询时，可以显著减少查询中分组和排序的时间，降低CPU的消耗</p></blockquote><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><blockquote><p>1、创建索引和维护索引要耗费时间<br>2、索引需要占磁盘空间，存储在磁盘上<br>3、虽然索引大大提高了查询 速度，同时也会降低更新表的速度</p></blockquote><h2 id="InnoDB中的索引"><a href="#InnoDB中的索引" class="headerlink" title="InnoDB中的索引"></a>InnoDB中的索引</h2><h3 id="常见索引概念"><a href="#常见索引概念" class="headerlink" title="常见索引概念"></a>常见索引概念</h3><blockquote><p><strong>聚簇索引</strong> 并不是一种单独的索引类型，而是一种数据存储方式（所有的用户记录都存储在了叶子节点）。<br><strong>特点</strong><br>1、使用主键值的大小进行记录和页的排序<br>页内的记录是按照主键大小顺序排成一个单向链表<br>各个存放用户记录的页排序成一个双向链表<br>存放目录项的页也排成一个双向链表<br>2、B+树的叶子节点存储的是完整的用户记录<br><strong>优点</strong><br>数据访问更快，因为聚簇索引将索引和数据保存在同一个B+树中，因此从聚簇索引获取数据比非聚簇索引更快<br>聚簇索引对于主键的排序查找和范围查找更快<br>因为聚簇索引排列顺序，查询显示一定范围数据时不用从多个数据块中提取数据，节省了大量I/O操作<br><strong>缺点</strong><br>插入速度严重依赖插入顺序，按照主键的顺序插入是最快的方式，否则会出现页分裂，严重影响性能<br>更新主键的代价很高，因为将会导致被更新的行移动<br>二级索引需要两次索引查找</p></blockquote><blockquote><p><strong>非聚簇索引</strong>与聚簇索引的区别就是叶子节点放的是主键</p></blockquote><h2 id="索引的代价"><a href="#索引的代价" class="headerlink" title="索引的代价"></a>索引的代价</h2><blockquote><p><strong>空间上的代价</strong><br>每建立一颗B+树，每一颗B+树的每一个节点都是一个数据页，一个页默认占用16kb的存储空间，一颗很大的B+树由许多数据页组成<br><strong>时间上的代价</strong><br>每次对表中数据进行<strong>增删改</strong>操作时，都需要去修改各个B+树索引</p></blockquote><h2 id="索引的声明与使用"><a href="#索引的声明与使用" class="headerlink" title="索引的声明与使用"></a>索引的声明与使用</h2><h3 id="索引的分类"><a href="#索引的分类" class="headerlink" title="索引的分类"></a>索引的分类</h3><blockquote><p>从<strong>功能逻辑</strong>分为普通索引、唯一索引、主键索引、全文索引<br>从<strong>物理实现</strong>方式分聚簇索引和非聚簇索引<br>从<strong>作用字段个数</strong>分单列索引和联合索引</p></blockquote><blockquote><p><strong>普通索引</strong><br>在创建索引时，不附加任何限制条件，只是用于提高查询效率。这类索引可以创建在任何数据类型</p></blockquote><blockquote><p><strong>唯一索引</strong><br>使用UNIQUE参数可以设置唯一性索引，在创建唯一性索引时限制该索引的值必须是唯一的，但允许有空值。一张数据表里可以有多个唯一索引</p></blockquote><blockquote><p><strong>主键索引</strong><br>主键索引就是一种特殊的唯一性索引，不能为空且最多只有一个主键索引</p></blockquote><blockquote><p><strong>单列索引</strong><br>在单个字段创建索引</p></blockquote><blockquote><p><strong>多列索引</strong><br>多个字段组合上创建一个索引，使用组合索引时需要遵循<strong>最左前缀集合</strong></p></blockquote><blockquote><p><strong>全文索引</strong><br>利用分词技术等多种算法智能分析出文本文字中关键词的频率和重要性，然后按照一定的算法智能的筛选出我们想要的搜索结果。全文索引适合大型数据集，对于小的数据集，用处不大。<br>使用参数FULLTEXT设置全文索引</p></blockquote><h3 id="索引的创建"><a href="#索引的创建" class="headerlink" title="索引的创建"></a>索引的创建</h3><blockquote><p>查看索引<br>show create table 表名；<br>show index from 表名；</p></blockquote><blockquote><p>在<strong>创建表的定义语句</strong>中指定索引列，使用<strong>alter table</strong>语句或者<strong>create index</strong></p></blockquote><blockquote><p><strong>创建表时</strong><br><strong>隐式创建索引</strong><br>添加约束的时候自动创建<br><strong>显示创建索引</strong><br>create table table_name(<br>name varchar(30),<br>[unique | fulltext | spatial] [index | key] (col_name [length]) [asc | desc])<br><strong>alter table</strong><br>alter table 表名 add index 索引名(字段名)<br><strong>create index</strong><br>create index 索引名 on 表名(字段名)</p></blockquote><h3 id="索引的删除"><a href="#索引的删除" class="headerlink" title="索引的删除"></a>索引的删除</h3><blockquote><p>alter table .. drop index …<br>drop index … on table_name</p></blockquote><h2 id="索引的设计原则"><a href="#索引的设计原则" class="headerlink" title="索引的设计原则"></a>索引的设计原则</h2><blockquote><p>1.针对数据量较大,且查询比较频繁的表建立索引<br>2.针对于常作为查询条件(where)、排序(order by)、分组(group by)操作的字段建立索引<br>3.尽量选择区分度高的列作为索引,尽量建立唯一索引,区分度越高,使用索引的效率越高<br>4.如果是字符串类型的字段,字段的长度较长,可以针对字段的特点建立前缀索引<br>5.尽量使用联合索引,减少单列索引,查询时,联合索引很多时候可以覆盖索引,节省存储空间,避免回表,提高查询效率<br>6.要控制索引的数量,索引并不是多多益善,索引越多,维护索引结构的代价也就越大,会影响增删改的效率<br>7.如果索引列不能存储NULL值,请在创建表时使用NOT NULL约束它.当优化器知道每列是否包含NULL值时,它可以更好的确定那个索引最有效的用于查询</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> 索引 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis持久化</title>
      <link href="/2022/10/01/redis-chi-jiu-hua/"/>
      <url>/2022/10/01/redis-chi-jiu-hua/</url>
      
        <content type="html"><![CDATA[<h2 id="Redis如何实现数据不丢失"><a href="#Redis如何实现数据不丢失" class="headerlink" title="Redis如何实现数据不丢失"></a>Redis如何实现数据不丢失</h2><p>Redis的读写操作都是在内存中，所以Redis性能才会高，但是当Redis重启后，内存中的数据就会丢失，那为了保存内存中的数据不会丢失，Redis实现了数据持久化机制，会把数据保存到磁盘，这样Redis重启就能够从磁盘恢复原有的数据</p><p>Redis提供了三种数据持久化方式</p><blockquote><p><strong>AOF日志</strong>：每执行一条写操作命令就把该命令以追加的方式写入一个文件里<br><strong>RDB快照</strong>：将某一时刻的内存数据以二进制的方式写入磁盘<br><strong>混合持久化</strong>：集成了AOF与RDB的优点</p></blockquote><h2 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h2><p><strong>AOF步骤</strong><br>Redis在执行完一条命令后就会把该命令以追加的方式写到一个文件，然后Redis重启时，会读取该命令然后逐一执行命令的方式来进行数据恢复</p><p><img src="https://img-blog.csdnimg.cn/134afa3dbfc347a0aeea66e5c560e653.png" alt="在这里插入图片描述"></p><blockquote><p><strong>why先执行命令后写入磁盘？</strong></p></blockquote><p>避免额外的检查开销：因为如果先将写操作记录到AOF日志中，再执行该命令的话，如果当前命令有问题如果不检查的话，Redis使用该命令进行恢复的时候就可能会出错<br>不会阻塞当前写操作命令的执行：因为是在当前线程的写操作之后</p><ul><li>数据可能会丢失：当前线程执行完命令而还没有写入磁盘时就宕机了</li><li>可能阻塞其它操作：因为记录AOF日志也是在主线程中执行，所以当Redis把日志写入磁盘时会阻塞后续的命令</li></ul><p><strong>AOF的写回策略</strong></p><blockquote><p><strong>Always</strong>：每次写操作命令都会执行完后，同步AOF日志数据写回硬盘<br><strong>Everysec</strong>：每次写操作命令执行完后，先写入AOF日志缓冲区，每秒写回磁盘<br><strong>No</strong>：不由Redis控制写回磁盘，每次都写入AOF日志缓冲区，再由操作系统决定何时写回磁盘</p></blockquote><p><img src="https://img-blog.csdnimg.cn/27c09236c66d461ea1e16e0aebb80d61.png" alt="在这里插入图片描述"></p><p><strong>AOF日志文件过大怎么办?</strong></p><p>AOF日志是一个文件，随着写命令的执行，文件会越来越大，如果文件过大就会带来性能问题，比如AOF恢复中执行的命令就会很多就会导致恢复过程很慢<br>所以Redis提供了AOF重写机制，当AOF文件大小超过设定的阈值时AOF就会启用重写机制来压缩AOF文件，比如set name lixiaobo 与set name lidabo 就会设置为一条指令set name lidabo</p><p><strong>重写AOF日志过程</strong></p><p>Redis的重写AOF过程是由后台子进程bgwriteaof来完成的，这么做的好处：</p><blockquote><p> 1、子进程进行AOF重写期间，主进程可以继续处理命令请求，从而避免阻塞主进程<br>2、子进程带有父进程的数据副本，之所以不使用多线程是因为多线程会共享内存那么修改时候就需要加锁来保证数据安全而这样就会降低性能。而使用子进程，创建子进程时候父子进程是共享内存数据，而当父子进程任意一方修改就会发生写时复制</p></blockquote><p>触发重写机制后，主进程会创建重写AOF的子进程，此时子进程只会对这个内存进行只读，重写AOF子进程会读取所有指令，并逐一把内存数据的键值对转换成另一条命令，再将命令记录到重写日志(新的AOF文件)<br>但是重写过程中，主进程依然可以正常处理命令，所以就出现了问题，如果主进程修改了已经存在的key-value，那么就会发生写时复制，此时这个key-value数据在子进程的内存数据就与主进程的内存数据不一样了<br>为了解决这种数据不一致，Redis设置了一个<strong>AOF重写缓冲区</strong>，这个缓冲区在创建bgwriteaof子进程之后开始使用<br>在重写AOF期间，当Redis执行完一个写命令之后，它会同时把这个写命令放入AOF缓冲区与AOF<strong>重写缓冲区</strong><br>也就是说在bgwriteaof期间，主进程需要执行三个工作</p><blockquote><p> 1、 执行客户端发来的命令<br> 2、将执行后的命令写入AOF缓冲区<br> 3、将执行后的命令写入AOF重写缓冲区</p></blockquote><p>当子进程重写完成之后会向主进程发送一条信号，信号是进程间通信的一种方式<br>主进程收到该信号后，会调用一个信号处理函数</p><blockquote><p>1、将AOF重写缓冲区中的所有内容追加到新的AOF文件中，使得新旧两个AOF所保存的数据一致<br>2、新的AOF的文件进行改名，覆盖现有的AOF文件</p></blockquote><p><img src="https://img-blog.csdnimg.cn/442937bc9f6b4b3fad68ff93403d1349.png" alt="在这里插入图片描述"></p><h2 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h2><p>RDB记录的是某一个瞬间的内存数据，记录的是实际数据，因此在数据恢复时，RDB恢复数据的效率比AOF高些</p><p><strong>如何进行RDB</strong></p><p>redis提供了两个命令来执行RDB</p><blockquote><p><strong>save</strong>：执行save会在主线程生成RDB文件，所以会阻塞主线程<br><strong>bgsave</strong>：创建一个子进程来生成RDB文件，避免阻塞主线程</p></blockquote><p>Redis的快照是全量快照，也就是每次执行快照都会把内存中的数据都记录到磁盘，所以这是一个比较重的操作</p><p><strong>RDB执行快照时候数据能修改？</strong></p><p>可以修改，在执行bgsave过程，Redis依旧可以继续处理操作命令，也就是数据是能被修改，关键技术还是写时复制</p><h2 id="混合持久化"><a href="#混合持久化" class="headerlink" title="混合持久化"></a>混合持久化</h2><p><strong>混合持久化步骤</strong></p><p>AOF的优点是丢失数据少，但是数据恢复慢，而RDB是优点是恢复速度快而快照的频率不好把握，如果频率过低，数据丢失的量就比较多，如果频率高就会影响性能<br>所以退出了混合持久化集成两者优点，在AOF重写日志时，fork出来的子进程会把当前主线程共享的内存数据以RDB方式写入到AOF文件，然后主线程处理的命令被记录到重写缓冲区中，重写缓冲区中的命令会以追加AOF的形式存在AOF日志中</p><p><img src="https://img-blog.csdnimg.cn/225c19b532ba4bf886564bfdd8e05a24.png" alt="在这里插入图片描述"></p><p>混合持久化的优缺点<br><strong>优点</strong><br>集成了AOF与RDB的优点<br><strong>缺点</strong><br>文件可读性变差</p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 持久化 </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BlockingQueue贰</title>
      <link href="/2022/07/16/blockingqueue-er/"/>
      <url>/2022/07/16/blockingqueue-er/</url>
      
        <content type="html"><![CDATA[<p>接着上篇BlockingQueue没讲完的</p><h2 id="LinkedTransferQueue"><a href="#LinkedTransferQueue" class="headerlink" title="LinkedTransferQueue"></a>LinkedTransferQueue</h2><p>LinkedTransferQueue是一个由链表结构组成的无界阻塞队列，相对于其它阻塞队列，LinkedBlockingQueue可以算是LinkedBlockingQueue与SynhronoousQueue结合，LinkedtransferQueue是一种无界阻塞队列，底层基于单链表实现，其内部结构分为数据节点、请求节点，基于CAS无锁算法实现</p><p> 与前面类似不再赘述</p><pre class="line-numbers language-java"><code class="language-java">        <span class="token keyword">final</span> <span class="token keyword">boolean</span> isData<span class="token punctuation">;</span>           <span class="token keyword">volatile</span> Object item<span class="token punctuation">;</span>          <span class="token keyword">volatile</span> Node next<span class="token punctuation">;</span>        <span class="token keyword">volatile</span> Thread waiter<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>其中节点操作过程类似于SynchronousQueue<br><img src="https://img-blog.csdnimg.cn/1fdc16cb6913484684e396571187e78d.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/bccf0df60217494c90c85cabc4ba414c.png" alt="在这里插入图片描述"><br>与SynchronousQueue有区别的是这个可以设置是否阻塞当前线程</p><blockquote><p><strong>NOW=0表示即时操作(可能失败),即不会阻塞调用线程</strong><br>poll(获取并移除首元素，如果队列为空，直接返回null)<br>tryTransfer(尝试将元素传递给消费者，如果没有等待的消费者则立即返回false，也不会将元素入队)<br><br><br><strong>ASYNC=1表示异步操作(必然成功)</strong><br>xfer被操作线程调用时，无论xfer操作过程多久完成，调用者都不会阻塞等待<br>offer，put，add(插入指定元素到队尾，由于是无界队列，所以会立即返回true)<br><br><br><strong>SYNC=2表示同步操作(阻塞调用线程)</strong><br>只有xfer操作过程达到了调用线程所期望的结果，调用者才会继续向下执行<br><br><br><strong>TIMED=3表示限时同步操作</strong></p></blockquote><h2 id="PriorityBlockingQueue"><a href="#PriorityBlockingQueue" class="headerlink" title="PriorityBlockingQueue"></a>PriorityBlockingQueue</h2><p>优先级队列，里面是数组，但是数组与普通数组不一样，里面的数组维护了一颗堆的二叉树<br>默认大小为11，但是这个可以扩容</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//默认容量</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DEFAULT_INITIAL_CAPACITY <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//最大容量</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MAX_ARRAY_SIZE <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE <span class="token operator">-</span> <span class="token number">8</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//存储数据</span>    <span class="token keyword">private</span> <span class="token keyword">transient</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> queue<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//元素个数</span>    <span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//比较</span>    <span class="token keyword">private</span> <span class="token keyword">transient</span> Comparator<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> E<span class="token operator">></span> comparator<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//锁</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> ReentrantLock lock<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//等待</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Condition notEmpty<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> allocationSpinLock<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="扩容"><a href="#扩容" class="headerlink" title="扩容"></a>扩容</h3><p>如果容量小于64的时候，扩容为原来两倍+2；<br>如果容量大于64的时候，扩容为原来1.5倍</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">tryGrow</span><span class="token punctuation">(</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">,</span> <span class="token keyword">int</span> oldCap<span class="token punctuation">)</span> <span class="token punctuation">{</span>        lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//扩容前先释放锁(扩容可能会费时，先让出锁，让出队线程可以正常操作)</span>        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> newArray <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>allocationSpinLock <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>            UNSAFE<span class="token punctuation">.</span><span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> allocationSpinLockOffset<span class="token punctuation">,</span>                                     <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//通过CAS操作确保只有一个线程可以扩容</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> newCap <span class="token operator">=</span> oldCap <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>oldCap <span class="token operator">&lt;</span> <span class="token number">64</span><span class="token punctuation">)</span> <span class="token operator">?</span>                                       <span class="token punctuation">(</span>oldCap <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">:</span>                                        <span class="token punctuation">(</span>oldCap <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>newCap <span class="token operator">-</span> MAX_ARRAY_SIZE <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//大于当前最大容量则可能溢出</span>                    <span class="token keyword">int</span> minCap <span class="token operator">=</span> oldCap <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>minCap <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> minCap <span class="token operator">></span> MAX_ARRAY_SIZE<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//扩大一个元素也溢出或者超过最大容量则抛出异常</span>                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">OutOfMemoryError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    newCap <span class="token operator">=</span> MAX_ARRAY_SIZE<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//扩容后如果超过最大容量，则只扩大到最大容量</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>newCap <span class="token operator">></span> oldCap <span class="token operator">&amp;&amp;</span> queue <span class="token operator">==</span> array<span class="token punctuation">)</span>                    newArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>newCap<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//根据最新容量初始化一个新数组</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                allocationSpinLock <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newArray <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//如果是空，说明前面CAS失败，有线程在扩容，让出CPU</span>            Thread<span class="token punctuation">.</span><span class="token function">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这里重新加锁是确保数组复制操作只有一个线程能进行</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newArray <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> queue <span class="token operator">==</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>            queue <span class="token operator">=</span> newArray<span class="token punctuation">;</span>            System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> newArray<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> oldCap<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将旧的元素复制到新数组</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h3><p>添加元素不会阻塞线程，因为该队列是一个无界队列，因为可以扩容，所以添加元素不会出现阻塞</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">offer</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">==</span> null<span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> ReentrantLock lock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">;</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n<span class="token punctuation">,</span> cap<span class="token punctuation">;</span>        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">=</span> size<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token punctuation">(</span>cap <span class="token operator">=</span> <span class="token punctuation">(</span>array <span class="token operator">=</span> queue<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token function">tryGrow</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> cap<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Comparator<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> E<span class="token operator">></span> cmp <span class="token operator">=</span> comparator<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp <span class="token operator">==</span> null<span class="token punctuation">)</span>                <span class="token function">siftUpComparable</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> e<span class="token punctuation">,</span> array<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                <span class="token function">siftUpUsingComparator</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> e<span class="token punctuation">,</span> array<span class="token punctuation">,</span> cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>            size <span class="token operator">=</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            notEmpty<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="取出元素"><a href="#取出元素" class="headerlink" title="取出元素"></a>取出元素</h3><p>取出元素需要判断是否为空，如果为空则需要等待，不然直接返回</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> E <span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token keyword">final</span> ReentrantLock lock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">;</span>        lock<span class="token punctuation">.</span><span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        E result<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>result <span class="token operator">=</span> <span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span>                notEmpty<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> E <span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            Object<span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> queue<span class="token punctuation">;</span>            E result <span class="token operator">=</span> <span class="token punctuation">(</span>E<span class="token punctuation">)</span> array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            E x <span class="token operator">=</span> <span class="token punctuation">(</span>E<span class="token punctuation">)</span> array<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>            array<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span>            Comparator<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> E<span class="token operator">></span> cmp <span class="token operator">=</span> comparator<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp <span class="token operator">==</span> null<span class="token punctuation">)</span>                <span class="token function">siftDownComparable</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> array<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                <span class="token function">siftDownUsingComparator</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> array<span class="token punctuation">,</span> n<span class="token punctuation">,</span> cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>            size <span class="token operator">=</span> n<span class="token punctuation">;</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="里面主要堆的上浮与下沉"><a href="#里面主要堆的上浮与下沉" class="headerlink" title="里面主要堆的上浮与下沉"></a>里面主要堆的上浮与下沉</h3><p>另一个上浮的方法除了比较器不同以外其它都类似，所以就讲这一个<br>假设我们构造的是小根堆</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">void</span> <span class="token function">siftUpComparable</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span> T x<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 其中k就是当前放的末尾的位置</span>        Comparable<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token operator">></span> key <span class="token operator">=</span> <span class="token punctuation">(</span>Comparable<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token operator">></span><span class="token punctuation">)</span> x<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> parent <span class="token operator">=</span> <span class="token punctuation">(</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">>>></span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//找到其父节点</span>            Object e <span class="token operator">=</span> array<span class="token punctuation">[</span>parent<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span> e<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//如果当前放入的值大于其父节点则跳出，否则继续</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 到这里说明当前放入的值小于其父节点,与父节点交换位置，并且k变为父节点的位置</span>            array<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>             k <span class="token operator">=</span> parent<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        array<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> key<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"> <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">void</span> <span class="token function">siftDownComparable</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span> T x<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Comparable<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token operator">></span> key <span class="token operator">=</span> <span class="token punctuation">(</span>Comparable<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token operator">></span><span class="token punctuation">)</span>x<span class="token punctuation">;</span>            <span class="token keyword">int</span> half <span class="token operator">=</span> n <span class="token operator">>>></span> <span class="token number">1</span><span class="token punctuation">;</span>                       <span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;</span> half<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> child <span class="token operator">=</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                   Object c <span class="token operator">=</span> array<span class="token punctuation">[</span>child<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> right <span class="token operator">=</span> child <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;</span> n <span class="token operator">&amp;&amp;</span>                    <span class="token punctuation">(</span><span class="token punctuation">(</span>Comparable<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token operator">></span><span class="token punctuation">)</span> c<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span> array<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>                    c <span class="token operator">=</span> array<span class="token punctuation">[</span>child <span class="token operator">=</span> right<span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 如果右孩子比左孩子小，则弄成右孩子</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span> c<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//如果传入的值小于孩子则退出</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                array<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">;</span>                k <span class="token operator">=</span> child<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            array<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> key<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="LinkedBlockingDeque"><a href="#LinkedBlockingDeque" class="headerlink" title="LinkedBlockingDeque"></a>LinkedBlockingDeque</h2><p>与LinkedBlockingQueue类似，只是这个是可以从两端存取，而LinkedBlockingQueue是单链表只能从一边存取，同时LinkedBlockingDeque只有一把锁，如果两把锁的话容易造成下标出错</p><h2 id="DelayQueue"><a href="#DelayQueue" class="headerlink" title="DelayQueue"></a>DelayQueue</h2><p> 其中内部也是由一个PriorityQueue维护一个优先队列</p><h3 id="add"><a href="#add" class="headerlink" title="add"></a>add</h3><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">offer</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> ReentrantLock lock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">;</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            q<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                leader <span class="token operator">=</span> null<span class="token punctuation">;</span>                available<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="take"><a href="#take" class="headerlink" title="take"></a>take</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> E <span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token keyword">final</span> ReentrantLock lock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">;</span>        lock<span class="token punctuation">.</span><span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                E first <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>first <span class="token operator">==</span> null<span class="token punctuation">)</span>                    available<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//如果队列为空阻塞</span>                <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token keyword">long</span> delay <span class="token operator">=</span> first<span class="token punctuation">.</span><span class="token function">getDelay</span><span class="token punctuation">(</span>NANOSECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>delay <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>                        <span class="token keyword">return</span> q<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//如果到期了就返回</span>                    first <span class="token operator">=</span> null<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// don't retain ref while waiting</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>leader <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 没有到期且leader不为空，等待</span>                        available<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//头节点为空，设置当前线程为头节点</span>                        Thread thisThread <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        leader <span class="token operator">=</span> thisThread<span class="token punctuation">;</span>                        <span class="token keyword">try</span> <span class="token punctuation">{</span>                            available<span class="token punctuation">.</span><span class="token function">awaitNanos</span><span class="token punctuation">(</span>delay<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>leader <span class="token operator">==</span> thisThread<span class="token punctuation">)</span>                                leader <span class="token operator">=</span> null<span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>leader <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> q<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span>                available<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Leader-Follower线程模型"><a href="#Leader-Follower线程模型" class="headerlink" title="Leader-Follower线程模型"></a>Leader-Follower线程模型</h3><p> 在Leader-follower线程模型中每个线程有三种模式：</p><p><strong>leader</strong>：只有一个线程成为leader，如DelayQueue如果有一个线程在等待元素到期，则其他线程就会阻塞等待<br><strong>follower</strong>：会一直尝试争抢leader，抢到leader之后才开始干活<br><strong>processing</strong>：处理中的线程</p><blockquote><p>感谢这位大佬 <a href="https://blog.csdn.net/zwx900102">双子孤狼</a>的博客</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BlockingQueue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BlockingQueue壹</title>
      <link href="/2022/07/15/blockingqueue-yi/"/>
      <url>/2022/07/15/blockingqueue-yi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>网上看了好多文章将线程池的但是似乎都没的多少人会详细讲解里面的任务队列，所以只有自己动手学习其中的任务队列</p></blockquote><h2 id="BlockingQueue"><a href="#BlockingQueue" class="headerlink" title="BlockingQueue"></a>BlockingQueue</h2><p><img src="https://img-blog.csdnimg.cn/19321c6f467b4ca9965735d748762a4f.png" alt="在这里插入图片描述"><br>要学习其中的任务队列就需要先学习<strong>BlockingQueue</strong>，Blocking是一个接口，其中主要的方法为</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">// 尝试往队尾添加元素，添加成功返回true,添加失败返回false</span>    <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 尝试往队尾添加元素，添加成功返回true,添加失败返回false</span>    <span class="token keyword">boolean</span> <span class="token function">offer</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 尝试往队尾添加元素，如果队列满了，则阻塞当前线程，直到其能够添加成功为止</span>    <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 尝试往队尾添加元素，如果队列满了，则阻塞当前线程，直到超时</span>    <span class="token keyword">boolean</span> <span class="token function">offer</span><span class="token punctuation">(</span>E e<span class="token punctuation">,</span> <span class="token keyword">long</span> timeout<span class="token punctuation">,</span> TimeUnit unit<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 从队头取出元素，如果队列为空则一直等待</span>    E <span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 从队头取出元素，如果队列为空则等待一段时间</span>    E <span class="token function">poll</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeout<span class="token punctuation">,</span> TimeUnit unit<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException<span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">remainingCapacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//从队列中移除指定对象</span>    <span class="token keyword">boolean</span> <span class="token function">remove</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//判断队列是否存在指定对象</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//将队列中元素转移到指定集合</span>    <span class="token keyword">int</span> <span class="token function">drainTo</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> E<span class="token operator">></span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//将最多MAX个元素转移到指定集合</span>    <span class="token keyword">int</span> <span class="token function">drainTo</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> E<span class="token operator">></span> c<span class="token punctuation">,</span> <span class="token keyword">int</span> maxElements<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ArrayBlockingQueue"><a href="#ArrayBlockingQueue" class="headerlink" title="ArrayBlockingQueue"></a>ArrayBlockingQueue</h2><p>ArrayBlockingQueue的底层是基于数组实现，当指定容量后数组就确定了不会发生扩容</p><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">// 元素</span>    <span class="token keyword">final</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> items<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//可以被取到的元素下标</span>    <span class="token keyword">int</span> takeIndex<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//可以放入元素的下标</span>    <span class="token keyword">int</span> putIndex<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//元素个数</span>    <span class="token keyword">int</span> count<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//锁</span>    <span class="token keyword">final</span> ReentrantLock lock<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//等待条件，用于队列为空的时候阻塞当前线程获取</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Condition notEmpty<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//等待条件，用于队列满的时候阻塞当前线程加入元素</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Condition notFull<span class="token punctuation">;</span>    <span class="token keyword">transient</span> Itrs itrs <span class="token operator">=</span> null<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过上述数据结构可以看出，ArrayBlockingQueue是通过一个循环数组的方式来实现存储元素的，这里takeIndex记录当前可以取元素的索引位置，而putIndex则记录了下一个元素可以放入的位置，如果队列满了则是takeIndex == putIndex，这里可以通过判断count字段来判断当前是处于满状态还是空置状态，通过一个全局锁lock来实现控制<br>对于其中的方法比较重要的是出队与入队方法，enqueue与dequeue</p><h3 id="重要方法"><a href="#重要方法" class="headerlink" title="重要方法"></a>重要方法</h3><p><strong>enqueue与dequeue</strong></p><p>其中入队与出队就是将对应位置的putIndex与takeIndex放入其中位置即可，然后加一，但是加一要判断是否超过了当前数组最大位置，如果是则设置为0，同时需要唤醒对应条件的等待队列</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">enqueue</span><span class="token punctuation">(</span>E x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> items <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">;</span>        items<span class="token punctuation">[</span>putIndex<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>putIndex <span class="token operator">==</span> items<span class="token punctuation">.</span>length<span class="token punctuation">)</span>            putIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>        notEmpty<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">private</span> E <span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> items <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">;</span>        <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>        E x <span class="token operator">=</span> <span class="token punctuation">(</span>E<span class="token punctuation">)</span> items<span class="token punctuation">[</span>takeIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>        items<span class="token punctuation">[</span>takeIndex<span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>takeIndex <span class="token operator">==</span> items<span class="token punctuation">.</span>length<span class="token punctuation">)</span>            takeIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        count<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>itrs <span class="token operator">!=</span> null<span class="token punctuation">)</span>            itrs<span class="token punctuation">.</span><span class="token function">elementDequeued</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        notFull<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> x<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是其中内层调用的方法，而外部方法我们提供方法为</p><p><strong>put与take</strong></p><p>put与take实现了其阻塞队列满足条件的方法</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token function">checkNotNull</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> ReentrantLock lock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">;</span>        lock<span class="token punctuation">.</span><span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> items<span class="token punctuation">.</span>length<span class="token punctuation">)</span>                notFull<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//通过while循环以防止当前线程被意外唤醒,如果当前循环被打破则代表没有满了</span>            <span class="token function">enqueue</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 放入元素</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> E <span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token keyword">final</span> ReentrantLock lock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">;</span>        lock<span class="token punctuation">.</span><span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                notEmpty<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//与上面类似</span>            <span class="token keyword">return</span> <span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从这里可以看出ArrayBlockingQueue实现的是先进先出</p><h2 id="LinkedBlockingQueue"><a href="#LinkedBlockingQueue" class="headerlink" title="LinkedBlockingQueue"></a>LinkedBlockingQueue</h2><p>LinkedBlockingQueue，其底层是通过一个单项链表实现的，由于单项链表需要有一个指向下一个节点的指针，因而其必须使用一个对象这里是Node来存储当前元素的值和下一个节点索引</p><h3 id="Node节点"><a href="#Node节点" class="headerlink" title="Node节点"></a>Node节点</h3><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//当前元素的值</span>        E item<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//下一个元素</span>        Node<span class="token operator">&lt;</span>E<span class="token operator">></span> next<span class="token punctuation">;</span>        <span class="token function">Node</span><span class="token punctuation">(</span>E x<span class="token punctuation">)</span> <span class="token punctuation">{</span> item <span class="token operator">=</span> x<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h3><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//容量</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> capacity<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//当前队列已经存储个数</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> AtomicInteger count <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//头指针</span>    <span class="token keyword">transient</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> head<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//尾指针</span>    <span class="token keyword">private</span> <span class="token keyword">transient</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> last<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//从队列取出元素的锁</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> ReentrantLock takeLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//等待如果队列为空</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Condition notEmpty <span class="token operator">=</span> takeLock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//放入元素的锁</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> ReentrantLock putLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Condition notFull <span class="token operator">=</span> putLock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里与ArrayBBlockingQueue存在着一些差异，其中head与last与takeIndex与putIndex都是类似的，但是LinkedBlockingQueue使用了两把锁，而上面只使用了一把锁</p><h3 id="重要方法-1"><a href="#重要方法-1" class="headerlink" title="重要方法"></a>重要方法</h3><p><strong>enqueue与dequeue</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">enqueue</span><span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>E<span class="token operator">></span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//将队列尾部节点的下一个节点指向新的节点，并更新尾部节点为最新的节点</span>        last <span class="token operator">=</span> last<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//返回头节点的下一个节点并更新头节点</span>    <span class="token comment" spellcheck="true">//因为头节点存储不是第一个元素</span>    <span class="token keyword">private</span> E <span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Node<span class="token operator">&lt;</span>E<span class="token operator">></span> h <span class="token operator">=</span> head<span class="token punctuation">;</span>        Node<span class="token operator">&lt;</span>E<span class="token operator">></span> first <span class="token operator">=</span> h<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        h<span class="token punctuation">.</span>next <span class="token operator">=</span> h<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// help GC</span>        head <span class="token operator">=</span> first<span class="token punctuation">;</span>        E x <span class="token operator">=</span> first<span class="token punctuation">.</span>item<span class="token punctuation">;</span>        first<span class="token punctuation">.</span>item <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">return</span> x<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到对于链表的入队与出队操作是非常简单的，所以我们需要看其中的<strong>take与put</strong>方法</p><p><strong>take与put</strong></p><pre class="line-numbers language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        Node<span class="token operator">&lt;</span>E<span class="token operator">></span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> ReentrantLock putLock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>putLock<span class="token punctuation">;</span>        <span class="token keyword">final</span> AtomicInteger count <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">;</span>        putLock<span class="token punctuation">.</span><span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>count<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>                notFull<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果满了则进入等待</span>            <span class="token punctuation">}</span>            <span class="token function">enqueue</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//放入元素</span>            c <span class="token operator">=</span> count<span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//元素个数++</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> capacity<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//如果添加元素过后还是未满那么则继续唤醒下一个</span>                notFull<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            putLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>             <span class="token comment" spellcheck="true">//将等待取出的线程唤醒,而唤醒的时候也必须获取take锁才能唤醒</span>            <span class="token function">signalNotEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"> <span class="token keyword">public</span> E <span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        E x<span class="token punctuation">;</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> AtomicInteger count <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">;</span>        <span class="token keyword">final</span> ReentrantLock takeLock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>takeLock<span class="token punctuation">;</span>        takeLock<span class="token punctuation">.</span><span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>count<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                notEmpty<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//同理</span>            <span class="token punctuation">}</span>            x <span class="token operator">=</span> <span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            c <span class="token operator">=</span> count<span class="token punctuation">.</span><span class="token function">getAndDecrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span>                notEmpty<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//继续获取</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            takeLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> capacity<span class="token punctuation">)</span>            <span class="token function">signalNotFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//同理</span>        <span class="token keyword">return</span> x<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ArrayBlockingQueue与LinkedBlockingQueue区别"><a href="#ArrayBlockingQueue与LinkedBlockingQueue区别" class="headerlink" title="ArrayBlockingQueue与LinkedBlockingQueue区别"></a>ArrayBlockingQueue与LinkedBlockingQueue区别</h2><blockquote><p>1、两种底层数据结构不同，一个是基于循环数组一个是基于单向链表<br>2、两种阻塞方式不同，ArrayBlockingQueue使用了一个全局锁来处理所有操作，也就是无论插入还是获取都只能一个线程执行，而LinkedBlockingQueue则是使用两个锁，使得获取与放入无干扰<br>3、两着初始化不同，ArrayBlockingQueue必须指定一个大小初始化而LinkedBlockingQueue则可以不指定，不指定则为Integer.MAX_VALUE</p></blockquote><h2 id="SynchronousQueue"><a href="#SynchronousQueue" class="headerlink" title="SynchronousQueue"></a>SynchronousQueue</h2><p>这个阻塞队列就比上面两种麻烦多了，那就需要一步一步理解<br>SynchronousQueue也是一个队列来的，但他的特别之处在于它内部没有容器，一个生产线程，当它生产产品(即put时候)，如果当前没有人想要消费产品此生产线程必须阻塞等待一个消费者调用take操作，take操作将唤醒该生产线程，同时消费线程会获取生产线程的产品(即数据传递)，这样的一个过程称一次配对过程</p><h3 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h3><p>其构造器可传入是公平还是非公平的,默认是非公平的</p><p>如果是公平的则采用TransferQueue如果是非公平的则采用TransferStack</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token function">SynchronousQueue</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> fair<span class="token punctuation">)</span> <span class="token punctuation">{</span>        transferer <span class="token operator">=</span> fair <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">TransferQueue</span><span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">TransferStack</span><span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>从源码上课其中的pull、take等方法都素调用transfer方法</p><blockquote><p>transfer中有三个参数：<br>        <strong>e</strong>：要存放的元素<br>        <strong>timed</strong>：是否超时等待<br>        <strong>nanos</strong>：超时等待时间</p></blockquote><h3 id="TransferQueue"><a href="#TransferQueue" class="headerlink" title="TransferQueue"></a>TransferQueue</h3><p>TransferQueue内部有一个内部类：QNode，TransferQueue是由QNode节点构成的链表结构</p><p><strong>QNode</strong></p><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//下一个节点</span>    <span class="token keyword">volatile</span> QNode next<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//存入元素         </span>    <span class="token keyword">volatile</span> Object item<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//等待线程     </span>    <span class="token keyword">volatile</span> Thread waiter<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//是否是数据</span>    <span class="token keyword">final</span> <span class="token keyword">boolean</span> isData<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/cd58bad5f93147c79223e476a54af592.jpeg" alt="在这里插入图片描述"></p><p><strong>TransferQueue初始化</strong></p><p>TransferQueue创建时会初始化一个QNode节点，head，tail都会指向这个空节点，在TransferQueue中会以根据传入的参数：e是否为null来将节点分为两类，从TransferQueue队列中获取元素的线程是同一类节点，比如：调用take，poll的线程就是同一类节点；从TransferQueue队列中添加元素的线程是一类节点</p><p>TransferQueue队列特殊的地方就在于这个队列中只会存在一种节点：要么是获取元素的线程节点，要么是添加元素的线程节点</p><p><img src="https://img-blog.csdnimg.cn/74d64e0e29694d1d8682f2e74a72a635.jpeg" alt="在这里插入图片描述"><br>在初始化TransferQueue对象时，会初始化生产一个节点队列的头，尾：head，tail都会指向这个init节点</p><p>举个例子：假设当前队列中都是put线程，此时有一个take线程，那么这个take线程就会唤醒队列中的一个put线程</p><p><img src="https://img-blog.csdnimg.cn/0dfe1ca3c8e94c728611c3d653b7a8a1.jpeg" alt="在这里插入图片描述"><br>在唤醒线程时，同时会修改该线程所在节点的item值，在后面分析源码时候会看到，如果只是唤醒线程是没有用的，还需要将item的值修改才能真正唤醒该线程</p><p><strong>Transfer</strong></p><p>下面就来分析Transfer方法</p><pre class="line-numbers language-java"><code class="language-java">E <span class="token function">transfer</span><span class="token punctuation">(</span>E e<span class="token punctuation">,</span> <span class="token keyword">boolean</span> timed<span class="token punctuation">,</span> <span class="token keyword">long</span> nanos<span class="token punctuation">)</span> <span class="token punctuation">{</span>            QNode s <span class="token operator">=</span> null<span class="token punctuation">;</span>             <span class="token keyword">boolean</span> isData <span class="token operator">=</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 判断当前是什么类型线程</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                QNode t <span class="token operator">=</span> tail<span class="token punctuation">;</span>                QNode h <span class="token operator">=</span> head<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> null <span class="token operator">||</span> h <span class="token operator">==</span> null<span class="token punctuation">)</span>                           <span class="token keyword">continue</span><span class="token punctuation">;</span>                                    <span class="token keyword">if</span> <span class="token punctuation">(</span>h <span class="token operator">==</span> t <span class="token operator">||</span> t<span class="token punctuation">.</span>isData <span class="token operator">==</span> isData<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 如果队列为空 || 新类型线程与队列中线程类型一致</span>                    QNode tn <span class="token operator">=</span> t<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                      <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">!=</span> tail<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//队列尾节点已经被更新                </span>                        <span class="token keyword">continue</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>tn <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//有新节点加入到队列      </span>                        <span class="token function">advanceTail</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> tn<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//更新尾节点</span>                        <span class="token keyword">continue</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>timed <span class="token operator">&amp;&amp;</span> nanos <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>                                <span class="token keyword">return</span> null<span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> null<span class="token punctuation">)</span>                        s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QNode</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> isData<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将线程包装成QNode节点</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>t<span class="token punctuation">.</span><span class="token function">casNext</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//将新节点添加到队列末尾</span>                        <span class="token keyword">continue</span><span class="token punctuation">;</span>                    <span class="token function">advanceTail</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//添加成功后更新tail      </span>                    Object x <span class="token operator">=</span> <span class="token function">awaitFulfill</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> e<span class="token punctuation">,</span> timed<span class="token punctuation">,</span> nanos<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//等待被唤醒</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//中断标记,带阻塞时间的线程等待了规定时间恢复运行            </span>                        <span class="token function">clean</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//节点从队列中删除</span>                        <span class="token keyword">return</span> null<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">.</span><span class="token function">isOffList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                   <span class="token function">advanceHead</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>                                 <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">!=</span> null<span class="token punctuation">)</span>                                          s<span class="token punctuation">.</span>item <span class="token operator">=</span> s<span class="token punctuation">;</span>                        s<span class="token punctuation">.</span>waiter <span class="token operator">=</span> null<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">return</span> <span class="token punctuation">(</span>x <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span>E<span class="token punctuation">)</span>x <span class="token operator">:</span> e<span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//唤醒队列节点         </span>                    <span class="token comment" spellcheck="true">// 取出当前节点            </span>                    QNode m <span class="token operator">=</span> h<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                                   <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">!=</span> tail <span class="token operator">||</span> m <span class="token operator">==</span> null <span class="token operator">||</span> h <span class="token operator">!=</span> head<span class="token punctuation">)</span>                        <span class="token keyword">continue</span><span class="token punctuation">;</span>                                     Object x <span class="token operator">=</span> m<span class="token punctuation">.</span>item<span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>isData <span class="token operator">==</span> <span class="token punctuation">(</span>x <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">||</span>                            x <span class="token operator">==</span> m <span class="token operator">||</span>                                          <span class="token operator">!</span>m<span class="token punctuation">.</span><span class="token function">casItem</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//将被唤醒线程的值修改为当前线程的值  </span>                        <span class="token function">advanceHead</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>                                  <span class="token keyword">continue</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token function">advanceHead</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>                                  LockSupport<span class="token punctuation">.</span><span class="token function">unpark</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>waiter<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//唤醒线程</span>                    <span class="token keyword">return</span> <span class="token punctuation">(</span>x <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span>E<span class="token punctuation">)</span>x <span class="token operator">:</span> e<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>awaitFulfill</strong></p><pre class="line-numbers language-java"><code class="language-java">Object <span class="token function">awaitFulfill</span><span class="token punctuation">(</span>QNode s<span class="token punctuation">,</span> E e<span class="token punctuation">,</span> <span class="token keyword">boolean</span> timed<span class="token punctuation">,</span> <span class="token keyword">long</span> nanos<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/* Same idea as TransferStack.awaitFulfill */</span>            <span class="token keyword">final</span> <span class="token keyword">long</span> deadline <span class="token operator">=</span> timed <span class="token operator">?</span> System<span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> nanos <span class="token operator">:</span> 0L<span class="token punctuation">;</span>            Thread w <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> spins <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>next <span class="token operator">==</span> s<span class="token punctuation">)</span> <span class="token operator">?</span>                         <span class="token punctuation">(</span>timed <span class="token operator">?</span> maxTimedSpins <span class="token operator">:</span> maxUntimedSpins<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>w<span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    s<span class="token punctuation">.</span><span class="token function">tryCancel</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                Object x <span class="token operator">=</span> s<span class="token punctuation">.</span>item<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">!=</span> e<span class="token punctuation">)</span>                    <span class="token keyword">return</span> x<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>timed<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    nanos <span class="token operator">=</span> deadline <span class="token operator">-</span> System<span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>nanos <span class="token operator">&lt;=</span> 0L<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        s<span class="token punctuation">.</span><span class="token function">tryCancel</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">continue</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>spins <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>                      <span class="token operator">--</span>spins<span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span>waiter <span class="token operator">==</span> null<span class="token punctuation">)</span>                    s<span class="token punctuation">.</span>waiter <span class="token operator">=</span> w<span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>timed<span class="token punctuation">)</span>                    LockSupport<span class="token punctuation">.</span><span class="token function">park</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nanos <span class="token operator">></span> spinForTimeoutThreshold<span class="token punctuation">)</span>                    LockSupport<span class="token punctuation">.</span><span class="token function">parkNanos</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> nanos<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>特别说明一下变量spins，所有进入阻塞队列的线程都不着急立即阻塞，而是会先自旋一段时间，然后再阻塞，因为阻塞线程再唤醒线程的代价就比让线程自选的大</p><h3 id="TransferStack"><a href="#TransferStack" class="headerlink" title="TransferStack"></a>TransferStack</h3><p>里面存在一个内部类：SNode，TransferStack是由Snode单链表构建成的堆栈结构，只有一个head指针指向链表的表头；每次添加元素都是在表头处添加，新节点称为新的表头head，唤醒的线程的时候也是唤醒head节点，因此就形成了先进后出的堆栈结构，TransferStack中根据e也就线程分为两类，一类是获取元素：REQUEST，一类的添加元素：DATA，其中也只有一种节点只有被唤醒时候才会短暂出现2种节点</p><p><img src="https://img-blog.csdnimg.cn/76606da253dd4f23888497502ac8d7c9.jpeg" alt="在这里插入图片描述"><br><strong>SNode</strong></p><pre class="line-numbers language-java"><code class="language-java">      <span class="token comment" spellcheck="true">//下一个节点</span>      <span class="token keyword">volatile</span> SNode next<span class="token punctuation">;</span>              <span class="token keyword">volatile</span> SNode match<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//当前线程      </span>      <span class="token keyword">volatile</span> Thread waiter<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//值    </span>      Object item<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//模式                </span>      <span class="token keyword">int</span> mode<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在TransferStack的堆栈中，如果新加入的线程类型与堆栈中的节点类型不同，那么会先将新线程包装成Snode节点加入堆栈中，成为新的header节点并将旧的节点唤醒。然后更新head节点返回DATA类型节点的元素值</p><p><img src="https://img-blog.csdnimg.cn/894ecd920cc340ee8833961f7d4910eb.jpeg" alt="在这里插入图片描述"></p><p>在有不同类型的节点进入堆栈中的时候，新节点添加到堆栈顶端并更新为新的head节点；这个节点的mode = REQUEST | FULFILLING ;FULFILLING 是用来标记，表示这个head节点正在唤醒堆栈中的一个节点线程；最后在新节点唤醒旧的head节点（ oldHead节点）之后，更新堆栈的head节点；</p><p>TransferStack部分的源码就再不分析了，入队阻塞部分的源码几乎与TransferQ ueue一样；TransferStack唤醒节点的方式与TransferQueue有点差别，TransferStack是将新节点先包装成节点添加到堆栈中，再唤醒节点线程，最后重新设置堆栈的head指针并将这2个节点清除出堆栈。</p><blockquote><p><strong><a href="http://t.csdn.cn/oG3Be">SynchronousQueue</a></strong> 这位大佬写的SynchronousQueue感觉很好，画图也很好只有自己理解但是想不出这些理解的话，感谢这位大佬我只是资源的整合者</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BlockingQueue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC执行流程</title>
      <link href="/2022/07/13/springmvc-zhi-xing-liu-cheng/"/>
      <url>/2022/07/13/springmvc-zhi-xing-liu-cheng/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/53aa66e68fd444e1874b90f90ec8421e.png" alt="在这里插入图片描述"></p><h2 id="SpringMVC的流程"><a href="#SpringMVC的流程" class="headerlink" title="SpringMVC的流程"></a>SpringMVC的流程</h2><ol><li>整个过程开始于客户端发出的一个HTTP请求，Web应用服务器接收到这个请求。如果匹配DispatcherServlet的请求映射路径，则Web容器将该请求转交给DispatcherServlet处理。</li><li>DispatcherServlet接收到这个请求后，将根据请求的信息（包括URL、HTTP方法、请求报文头、请求参数、Cookie等）及HandlerMapping的配置找到处理请求的处理器（Handler）。可将HandlerMapping看做路由控制器，将Handler看做目标主机。值得注意的是，在Spring MVC中并没有定义一个Handler接口，实际上任何一个Object都可以成为请求处理器。</li><li>当DispatcherServlet根据HandlerMapping得到对应当前请求的Handler后，通过HandlerAdapter对Handler进行封装，再以统一的适配器接口调用Handler。HandlerAdapter是Spring MVC框架级接口，顾名思义，HandlerAdapter是一个适配器，它用统一的接口对各种Handler方法进行调用。</li><li>处理器完成业务逻 辑的处理后，将返回一个ModelAndView给DispatcherServlet，ModelAndView包含了视图逻辑名和模型数据信息。</li><li>ModelAndView中包含的是“逻辑视图名”而非真正的视图对象，DispatcherServlet借由ViewResolver完成逻辑视图名到真实视图对象的解析工作。</li><li>当得到真实的视图对象View后，DispatcherServlet就使用这个View对象对ModelAndView中的模型数据进行视图渲染。</li><li>最终客户端得到的响应消息可能是一个普通的HTML页面，也可能是一个XML或JSON串，甚至是一张图片或一个PDF文档等不同的媒体形式。</li></ol><h2 id="SpringMVC中重要组件"><a href="#SpringMVC中重要组件" class="headerlink" title="SpringMVC中重要组件"></a>SpringMVC中重要组件</h2><ul><li>前端控制器 DispatcherServlet：接收请求、响应结果，相当于转发器，有了 DispatcherServlet 就减少了其它组件之间的耦合度</li><li>处理器映射器 HandlerMapping：根据请求的 URL 来查找 Handler</li><li>处理器适配器 HandlerAdapter：负责执行 Handler</li><li>处理器 Handler：处理业务逻辑的 Java 类（我们自己写的 Controller 类）</li><li>视图解析器 ViewResolver：进行视图的解析，根据视图逻辑名将 ModelAndView 解析成真正的视图（view） </li><li>视图 View：View 是一个接口， 它的实现类支持不同的视图类型，如 jsp，freemarker， pdf 等</li></ul>]]></content>
      
      
      <categories>
          
          <category> SpringMVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 执行流程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TCP详解</title>
      <link href="/2022/07/10/tcp-xiang-jie/"/>
      <url>/2022/07/10/tcp-xiang-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="TCP概述"><a href="#TCP概述" class="headerlink" title="TCP概述"></a>TCP概述</h2><blockquote><p>TCP是一种面向连接的协议，在发送数据前通信双方必须在彼此间建立一条连接<br>所谓的连接其实就是客户端和服务器的内存里保存一份关于对方的信息，如IP地址、端口<br>TCP是一种字节流，它会处理IP层的丢包、重复以及错误问题<br>在建立连接的过程中，双方交换的一些参数可以放到TCP的头部<br><br><br><strong>总结</strong> ：TCP提供了一种可靠、面向连接、字节流、传输层的服务，采用三次握手建立一个连接，四次挥手关闭一个连接</p></blockquote><h2 id="TCP报文格式"><a href="#TCP报文格式" class="headerlink" title="TCP报文格式"></a>TCP报文格式</h2><p><img src="https://img-blog.csdnimg.cn/6d88c41f3f2844c689c758bfebf8ad91.png" alt="在这里插入图片描述"></p><blockquote><p>源端口、目的端口：发送方和接收方的端口号<br>序号：TCP连接中的字节流都有编号。如果101开始，传送了100个字节，那么下次就是从201开始<br>确认序号：接送方发给发送方下次需要的字节序号<br>首部长度：就是TCP首部的长度，记录了TCP报文数据到TCP报文段开始的距离<br>保留：留待以后使用<br>URG：紧急字段 1-代表有紧急数据 0-代表没有<br>ACK：在TCP报文段中，字段ACK=1时，确认号字段才有效。TCP规定，在连接建立后所有传送的报文段都必须把ACK置1<br>PSH：当两个应用在进行交互时，如果想要立马得到对方的回复就PSH设置为1<br>RST：RST为1时代表需要重新建立连接<br>SYN：在连接建立时用来同步序号。当SYN=1，ACK=0，表明是连接请求报文，若同意连接，则响应报文中应该使SYN=1，ACK=1；<br>FIN：用来释放连接；当FIN=1时代表终止连接<br>窗口大小：用来进行流量控制<br>校验和：对整个TCP报文段进行校验和计算，由目标端进行校验<br>紧急指针：记录一个偏移量，指向紧急数据的最后一位（也可以是紧急数据的下一位，两者都是标准），在读取到紧急指针所指向的位置之前，TCP的接受进程都处于紧急状态，当读取到紧急数据后一位时，回复到正常状态。</p></blockquote><h2 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h2><p><img src="https://img-blog.csdnimg.cn/37c4b1312b664a1db07bc41d73a744d7.png" alt="在这里插入图片描述"></p><h2 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h2><p><img src="https://img-blog.csdnimg.cn/f5e97c195559437d9838abfd54b5ffb3.png" alt="在这里插入图片描述"></p><h2 id="流量控制"><a href="#流量控制" class="headerlink" title="流量控制"></a>流量控制</h2><blockquote><p>如果发送者发送数据过快，接收者来不及接收，那么就会有分组丢失。为了避免分组丢失，控制发送者的发送速度，使得接收者来得及接收，这就是流量控制。流量控制根本目的是防止分组丢失，它是构成TCP可靠性的一方面<br><br><br>流量控制主要是用滑动窗口实现<br>发送窗口 = 1，接收窗口 = 1 停止等待<br>发送窗口 &gt; 1，接收窗口 = 1 回退N帧协议<br>发送窗口 &gt; 1，接收窗口 &gt; 1 选择重传协议</p></blockquote><blockquote><p><strong>停止协议</strong><br>发送方必须受到接收方返回回来的ACK数据包才能继续发送下一个不然就超时重传<br>性能较差一次只能发送一个<br><strong>没有问题</strong><br><img src="https://img-blog.csdnimg.cn/2feb827ef1644264993505337918b90c.png" alt="在这里插入图片描述"><br><strong>出现问题</strong><br><img src="https://img-blog.csdnimg.cn/ba562a4b9a324146a4e98e95896ffa75.png" alt="在这里插入图片描述"></p></blockquote><blockquote><p><strong>回退N帧协议</strong><br>发送窗口<br>新的分组落入发送缓冲区，发送-&gt;前沿移动<br>超时重发机制让发送端将发送窗口中的所有方法发送出去<br>接收窗口<br>收到乱序分组，没有落入到接收窗口范围，抛弃<br>发送老分组的确认，累计确认</p></blockquote><blockquote><p><strong>选择重传协议</strong><br>发送窗口<br>新的分组落入发送区域缓冲区范围，发送-&gt;前沿移动<br>超时重发机制让发送端将超时的分组重新发送出去<br>来了乱序分组的确认-&gt;后沿不向前移动-&gt;新的分组无法落入发送缓冲区的范围<br>接收窗口<br>收到乱序分组，落入到接收窗口范围，接收<br>收到该分组的确认，单独确认</p></blockquote><h2 id="拥塞控制"><a href="#拥塞控制" class="headerlink" title="拥塞控制"></a>拥塞控制</h2><blockquote><p>在某段时间内，若对网络中某一资源的需求超过了该资源所能提供的可用部分，网络的性能就要变坏。这种情况就叫拥塞控制。拥塞控制就是为了防止过多的数据注入到网络中，这样就可以使网络中的路由器或链路不致过载。拥塞控制所要做的都有一个前提，就是网络能够承受现有的网络负荷。<strong>拥塞控制是一个全局性的过程，涉及到所有的主机，所有的路由器以及与降低网络传输有关的因素。相反，流量控制往往是控制点对点的通信量，是个端到端的问题。流量控制所要做到的就是抑制发送端发送数据的速率，以便于接收方来得及接收</strong></p></blockquote><p><img src="https://img-blog.csdnimg.cn/c0f46ea208e1440bb6777e8d60a10fb3.png" alt="在这里插入图片描述"></p><blockquote><p><strong>慢开始</strong><br><br><br>拥塞窗口和接收窗口共同决定的发送窗口<br>当主机开始发送数据时，如果把大量数据字节注入到网络中，那么会引起网络阻塞，因为现在不知道网络的负荷情况<br>所有较好的办法就是先探测一下，即由小到大逐渐增大发送窗口，也就是由小到大逐渐增大拥塞窗口数值。cwnd初始值为1，每经过一个传播轮次，cwnd加倍<br><br><br>如果不对cwnd限制马上就会导致cwnd膨胀所有就有一个慢启动阈值ssthresh<br>如果cwnd &gt; ssthresh 就用拥塞避免<br>如果cwnd &lt; ssthresh 就用慢开始</p></blockquote><blockquote><p><strong>拥塞避免</strong><br><br><br>拥塞避免算法的思路是让拥塞窗口 cwnd 缓慢增大，即每经过一个往返时间 RTT 就把发送放的 cwnd 加 1<br><br><br>不论是慢开始还是拥塞避免只要网络出现拥塞（没有按时到达）时，就把ssthresh的值置为出现拥塞时的拥塞窗口的一半（但不能小于2），以及cwnd置为1，进行慢开始。 目的是迅速减少主机发送到网络中的分组数，使得发生 拥塞的路由器有足够时间把队列中积压的分组处理完毕。</p></blockquote><blockquote><p><strong>快重传与快恢复</strong><br>快重传详情看 重传机制-快速重传<br><br><br><strong>快速恢复</strong><br>当发送方连续收到三个重复确认，就执行”乘法减小”算法，把慢开始门限<strong>ssthresh减半</strong>。然后立即重传丢失报文段，并将<strong>cwnd设置为新的ssthresh</strong>然后进行<strong>拥塞避免算法</strong></p></blockquote><h2 id="重传机制"><a href="#重传机制" class="headerlink" title="重传机制"></a>重传机制</h2><h3 id="超时重传"><a href="#超时重传" class="headerlink" title="超时重传"></a>超时重传</h3><blockquote><p><strong>RTT</strong>：往返时间（发送方发给服务方然后发送方收到服务方应答的时间）<br><strong>RTO</strong>：超时重传时间</p></blockquote><blockquote><p>在发送数据包时就开启一个定时器，如果定时器超时了还没有收到ACK就发起重传，如果收到了ACK就发送数据包再重置定时器<br><br><br>超时重传发生情况：<br>    1、数据包丢失<br>2、确认应答丢失<br><br><br>RTO时间设置<br>1、RTO 较大时：重发就慢，丢了过后很久才发，效率低<br>2、RTO 较小时：可能没有丢失，但是RTO到了就重发，导致网络拥塞，导致更多的超时，导致更多的重发<br>所有RTO应略大于RTT</p></blockquote><h3 id="快速重传"><a href="#快速重传" class="headerlink" title="快速重传"></a>快速重传</h3><blockquote><p>快速重传的工作方式是当收到三个相同的 ACK 报文时，会在定时器过期之前，重传丢失的报文段。<br>为什么是三次冗余ACK<br>通过大量经验表明三次比较合适</p></blockquote><h2 id="为什么不进行两次握手"><a href="#为什么不进行两次握手" class="headerlink" title="为什么不进行两次握手"></a>为什么不进行两次握手</h2><blockquote><p>1、确认双方的接收与发送能力是否正常<br>第一次握手：客户端发送网络包，服务端收到了。服务端：客户端的发送能力、服务端的接收能力正常<br>第二次握手：服务端发包，客户端收到了。客户端：服务的发送能力、服务端的接收能力、客户端的接收能力、发送能力正常<br>第三次握手：客户端发包，服务端收到了。服务端：服务端的发送能力，客户端的接收能力正常<br>2、防止已经失效的连接请求报文突然又传送到了服务器，从而产生错误<br>如果客户端发出连接请求，因连接请求报文丢失而未收到确认，于是客户端再重传一次连接请求。后来收到了确认，建立了连接。数据传输完毕后释放连接，客户端发出了两个连接请求报文段，其中一个丢失了，第二个到达了服务端，但是第一个丢失的报文段有可能只是由于某些网络节点长时间滞留了，延误到连接释放以后的某个节点，此时服务端认为是客户端又发出一次请求，于是就向客户端发出确认报文段，同意建立连接，不采用三次握手，只要服务端发出确认就建立了新的连接，此时客户端忽略服务端发来的确认，也不发送数据，则服务端一致等待客户端发送数据，浪费资源</p></blockquote><h2 id="为什么关闭连接时客户端会等待2MSL"><a href="#为什么关闭连接时客户端会等待2MSL" class="headerlink" title="为什么关闭连接时客户端会等待2MSL"></a>为什么关闭连接时客户端会等待2MSL</h2><blockquote><p>MSL：报文段最大存活时间<br>1、为了保证客户端发送的最后一个ACK报文能够到达服务器，因为在这个ACK报文可能丢失，站在服务器的角度看来，我已经发送了FIN+ACK报文请求断开了，客户端没有给我回应，应该是我发送的请求断开报文它没有收到，于是服务器又会重新发送一次，而客户端就能在这个2MSL时间段内收到这个重传的报文，接着给出回应报文，并且重启2MSL计时器<br>2、防止类似与”三次握手中提到了”已经失效的请求报文段”出现在本连接中。客户端发送完最后一个确认报文后，在这个2MSL时间中，就可以使本连接持续的时间内所产生的所有报文段都从网络中消失。这样新的连接中就不会出现旧连接的请求报文</p></blockquote><h2 id="建立连接后客户端出现故障怎么办"><a href="#建立连接后客户端出现故障怎么办" class="headerlink" title="建立连接后客户端出现故障怎么办"></a>建立连接后客户端出现故障怎么办</h2><blockquote><p>TCP设有一个保活计时器，当客户端出现故障时，服务器不能一直等待下去，白白浪费资源。服务器每收到一个客户端的请求后都会复位这个计时器，时间通常设置为2小时，若超时后还没有收到客户端的任何数据，服务器就会发送一个探测报文段，以后每隔75s发送一次。若一连发送10个探测报文仍然没有反应，服务器就认为客户端出了故障，接着就关闭连接</p></blockquote><h2 id="TCP黏包与粘包问题"><a href="#TCP黏包与粘包问题" class="headerlink" title="TCP黏包与粘包问题"></a>TCP黏包与粘包问题</h2><h3 id="什么是黏包与粘包"><a href="#什么是黏包与粘包" class="headerlink" title="什么是黏包与粘包"></a>什么是黏包与粘包</h3><blockquote><p>TCP传输的是字节流，所谓流，就是发送的是一连串的数据，没有界限。TCP底层不会解析具体的数据内容，它会根据缓冲区的实际情况进行包的划分（发送和接收），由此会导致上层业务的一个完整的包被拆分成多个包进行发送（“拆包”），或者多个小包被封装成一个大的数据包进行发送（“粘包”），这就是所谓的TCP的拆包和粘包问题。</p></blockquote><h3 id="如何解决"><a href="#如何解决" class="headerlink" title="如何解决"></a>如何解决</h3><blockquote><p>1、固定应用层发送消息的长度，如果不够就补充空格<br>2、在包尾添加回车换行符进行分割<br>3、将消息分为消息头与消息体，消息头中包含长度<br>4、更复杂的应用层协议</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 计网 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> TCP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>session共享</title>
      <link href="/2022/07/08/session-gong-xiang/"/>
      <url>/2022/07/08/session-gong-xiang/</url>
      
        <content type="html"><![CDATA[<h2 id="tomcat的安装与配置"><a href="#tomcat的安装与配置" class="headerlink" title="tomcat的安装与配置"></a>tomcat的安装与配置</h2><h3 id="tomcat的安装"><a href="#tomcat的安装" class="headerlink" title="tomcat的安装"></a>tomcat的安装</h3><p><strong>官网下载</strong></p><p><a href="https://tomcat.apache.org/">Apache Tomcat官网</a></p><blockquote><p> 我下载的版本为<strong>8.5.82</strong></p></blockquote><p><img src="https://img-blog.csdnimg.cn/7e354ff584b74ca780399b8490b042ca.png" alt="在这里插入图片描述"></p><p><strong>解压两份</strong></p><p><img src="https://img-blog.csdnimg.cn/a97adaace08743d0be95900e6825f518.png" alt="在这里插入图片描述"></p><h3 id="tomcat集群的配置"><a href="#tomcat集群的配置" class="headerlink" title="tomcat集群的配置"></a>tomcat集群的配置</h3><p><strong>官网提供的配置</strong></p><p><a href="https://tomcat.apache.org/tomcat-8.5-doc/cluster-howto.html">官网配置地址</a></p><p><img src="https://img-blog.csdnimg.cn/c560ac8546ee42b494d6b0fe1545a807.png" alt="在这里插入图片描述"></p><p><strong>我的配置步骤</strong></p><pre class="line-numbers language-xml"><code class="language-xml">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Cluster</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.apache.catalina.ha.tcp.SimpleTcpCluster<span class="token punctuation">"</span></span>                 <span class="token attr-name">channelSendOptions</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Manager</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.apache.catalina.ha.session.DeltaManager<span class="token punctuation">"</span></span>                   <span class="token attr-name">expireSessionsOnShutdown</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>                   <span class="token attr-name">notifyListenersOnReplication</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Channel</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.apache.catalina.tribes.group.GroupChannel<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Membership</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.apache.catalina.tribes.membership.McastService<span class="token punctuation">"</span></span>                        <span class="token attr-name">address</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>228.0.0.4<span class="token punctuation">"</span></span>                        <span class="token attr-name">port</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>45564<span class="token punctuation">"</span></span>                        <span class="token attr-name">frequency</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>500<span class="token punctuation">"</span></span>                        <span class="token attr-name">dropTime</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3000<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Receiver</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.apache.catalina.tribes.transport.nio.NioReceiver<span class="token punctuation">"</span></span>                      <span class="token attr-name">address</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>auto<span class="token punctuation">"</span></span>                      <span class="token attr-name">port</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>4000<span class="token punctuation">"</span></span>                      <span class="token attr-name">autoBind</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span>                      <span class="token attr-name">selectorTimeout</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>5000<span class="token punctuation">"</span></span>                      <span class="token attr-name">maxThreads</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>6<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Sender</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.apache.catalina.tribes.transport.ReplicationTransmitter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Transport</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.apache.catalina.tribes.transport.nio.PooledParallelSender<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Sender</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Interceptor</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.apache.catalina.tribes.group.interceptors.TcpFailureDetector<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Interceptor</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.apache.catalina.tribes.group.interceptors.MessageDispatchInterceptor<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Channel</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Valve</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.apache.catalina.ha.tcp.ReplicationValve<span class="token punctuation">"</span></span>                 <span class="token attr-name">filter</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Valve</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.apache.catalina.ha.session.JvmRouteBinderValve<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Deployer</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.apache.catalina.ha.deploy.FarmWarDeployer<span class="token punctuation">"</span></span>                    <span class="token attr-name">tempDir</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/tmp/war-temp/<span class="token punctuation">"</span></span>                    <span class="token attr-name">deployDir</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/tmp/war-deploy/<span class="token punctuation">"</span></span>                    <span class="token attr-name">watchDir</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/tmp/war-listen/<span class="token punctuation">"</span></span>                    <span class="token attr-name">watchEnabled</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ClusterListener</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.apache.catalina.ha.session.ClusterSessionListener<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Cluster</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>1、将上面的复制到两个tomcat的server.xml配置文件中</strong></p><p><img src="https://img-blog.csdnimg.cn/aadbe1a6fd1b44af81387a16dd4c32ea.png" alt="在这里插入图片描述"></p><p><strong>2、改端口</strong></p><blockquote><p>为啥改端口：<strong>因为我只有一台电脑</strong><br><br><br>只要不与tomcat1相同就行</p></blockquote><p><img src="https://img-blog.csdnimg.cn/f1a3242f29d94d73a7d2977f528b8433.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/64316338d2b34668872effce067c0db0.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/7d23fc889de94f8b96035ffc52eac3aa.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/fda2f588963f4ee99b4b239b97ed1607.png" alt="在这里插入图片描述"><br><strong>3、在tomcat1和tomcat2中的webapps\ROOT目录下删除页面然后加上这三个页面</strong></p><blockquote><p><strong>第一个是index，第二个是login，第三个是logout</strong><br>index是首页，login是设置session，logout是删除session<br>把tomcat2改为tomcat1然后继续复制</p></blockquote><p><img src="https://img-blog.csdnimg.cn/80ccadf49bc94ffcaf21987bfa22fb3f.png" alt="在这里插入图片描述"></p><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">%</span>@ page contentType<span class="token operator">=</span><span class="token string">"text/html;charset=UTF-8"</span> language<span class="token operator">=</span><span class="token string">"java"</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span>    <span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span>    tomcat2    <span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>body<span class="token operator">></span>        SessionID<span class="token operator">:</span><span class="token operator">&lt;</span><span class="token operator">%=</span>session<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token operator">></span>        <span class="token operator">&lt;</span>br<span class="token operator">></span>        SessionValue<span class="token operator">:</span><span class="token operator">&lt;</span><span class="token operator">%=</span>session<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"session"</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token operator">></span>        <span class="token operator">&lt;</span>br<span class="token operator">></span>        SessionIP<span class="token operator">:</span><span class="token operator">&lt;</span><span class="token operator">%=</span>request<span class="token punctuation">.</span><span class="token function">getServerName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token operator">></span>        <span class="token operator">&lt;</span>br<span class="token operator">></span>        SessionPort<span class="token operator">:</span><span class="token operator">&lt;</span><span class="token operator">%=</span>request<span class="token punctuation">.</span><span class="token function">getServerPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token operator">></span>        <span class="token operator">&lt;</span>br<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">%</span>            out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"this is tomcat 2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">%</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">%</span>@ page contentType<span class="token operator">=</span><span class="token string">"text/html;charset=UTF-8"</span> language<span class="token operator">=</span><span class="token string">"java"</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span>    <span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span>    tomcat2    <span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>body<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">%</span>            session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"session"</span><span class="token punctuation">,</span><span class="token string">"libo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">%</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">%</span>            out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"this is set SessionValue success"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">%</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">%</span>@ page contentType<span class="token operator">=</span><span class="token string">"text/html;charset=UTF-8"</span> language<span class="token operator">=</span><span class="token string">"java"</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span>    <span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span>    tomcat2    <span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>body<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">%</span>            session<span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span><span class="token string">"session"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">%</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">%</span>            out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"this is remove SessionValue success"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">%</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="session问题解决方法"><a href="#session问题解决方法" class="headerlink" title="session问题解决方法"></a>session问题解决方法</h2><h3 id="前端存储"><a href="#前端存储" class="headerlink" title="前端存储"></a>前端存储</h3><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><blockquote><p>每次前端发请求时候都把这个携带走</p></blockquote><p><img src="https://img-blog.csdnimg.cn/4909059c93fb438baa6d6a29cd5169ca.png" alt="在这里插入图片描述"></p><h4 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h4><blockquote><p><strong>优点</strong><br>不占用服务端内存<br><br><br><strong>缺点</strong><br>存在安全风险<br>数据大小受cookie限制<br>占用外网宽带</p></blockquote><h3 id="session的复制"><a href="#session的复制" class="headerlink" title="session的复制"></a>session的复制</h3><h4 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h4><blockquote><p>在每个tomcat 的 “webapps\ROOT\WEB-INF\web.xml” 里面加上  distributable标签</p></blockquote><p><img src="https://img-blog.csdnimg.cn/e51cf65ffef444be8e9ced407ab2c1b3.png" alt="在这里插入图片描述"></p><p><strong>都没有登录</strong></p><p><img src="https://img-blog.csdnimg.cn/05d7e0229a36468592abd08f23b5fbbe.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/e1121723bd26439a841cd6aa84dc9310.png" alt="在这里插入图片描述"></p><p><strong>tomcat1登录</strong></p><p><img src="https://img-blog.csdnimg.cn/a464ebfd58334b6b8ed5e1334fbad6a6.png" alt="在这里插入图片描述"></p><p><strong>tomcat2查看是否可以获取数据</strong></p><blockquote><p>获取成功</p></blockquote><p><img src="https://img-blog.csdnimg.cn/8d8ea8de9d134fb49f244b64d6312564.png" alt="在这里插入图片描述"><br><strong>tomcat1退出</strong></p><p><img src="https://img-blog.csdnimg.cn/b528729fd1b44e7a99ffd50325cc17be.png" alt="在这里插入图片描述"></p><p><strong>tomcat2查看是否可以获取数据</strong></p><blockquote><p>获取不到了，因为session是共享，已经在tomcat1那里退出登录了</p></blockquote><p><img src="https://img-blog.csdnimg.cn/495cf848e3b9456f84ef728bcbc72a3e.png" alt="在这里插入图片描述"></p><h4 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h4><blockquote><p>多个server之间相互同步session，这样每个server之间都包含全部的session</p></blockquote><p><img src="https://img-blog.csdnimg.cn/631068384eea4249a46d73f3b50066b4.png" alt="在这里插入图片描述"></p><h4 id="优缺点-1"><a href="#优缺点-1" class="headerlink" title="优缺点"></a>优缺点</h4><blockquote><p><strong>优点</strong><br>1、只需要设定配置，应用程序不需要修改代码<br>2、有一台机器挂了，其他机器还保存有<br><br><br><strong>缺点</strong><br>1、ession的同步需要数据传输，占内网带宽，有延时<br>2、所有server都包含所有session数据，数据量受最小内存的sever限制</p></blockquote><h3 id="session粘性"><a href="#session粘性" class="headerlink" title="session粘性"></a>session粘性</h3><h4 id="操作步骤-1"><a href="#操作步骤-1" class="headerlink" title="操作步骤"></a>操作步骤</h4><p><strong>下载安装nginx</strong></p><blockquote><p>官网下载，我是已经下载过的了<br>CSDN博客找篇按照下载</p></blockquote><p><strong>配置nginx.conf</strong></p><blockquote><p>这样就会轮询两个tomcat服务器</p></blockquote><p><img src="https://img-blog.csdnimg.cn/e4c36920337b481b80d4e519695e53d3.png" alt="在这里插入图片描述"><br><strong>把刚才tomcat里面的web.xml去掉distributable标签</strong></p><p><strong>访问localhost然后就会一直是一个tomcat</strong></p><p><img src="https://img-blog.csdnimg.cn/e21a730aafb5413b85cba7c32e902bdb.png" alt="在这里插入图片描述"><br><strong>注意</strong></p><blockquote><p>如果还是轮询的话,可能是配置文件没有生效<br> 去任务管理器关闭所有带有nginx的进程<br><img src="https://img-blog.csdnimg.cn/fc05d8db557f41cba5be75bd7f26a312.png" alt="在这里插入图片描述"></p></blockquote><h4 id="原理-2"><a href="#原理-2" class="headerlink" title="原理"></a>原理</h4><blockquote><p>可以通过某种形式，将用户的每次请求都固定到某一台机器上。例如通过Nginx的ip_hash策略进行负载均衡，只要用户的IP固定不变，总能访问到同一台服务器上</p></blockquote><p><img src="https://img-blog.csdnimg.cn/b57e19917ee54ea3b9ba346b23fee7b8.png" alt="在这里插入图片描述"></p><h4 id="优缺点-2"><a href="#优缺点-2" class="headerlink" title="优缺点"></a>优缺点</h4><blockquote><p><strong>优点</strong><br>无需修改代码<br>服务端可以水平扩展<br><br><br><strong>缺点</strong><br>如果某台服务器挂掉了，Session就会丢失<br>如果一个局域网内大量用户那么也没啥用了（使用默认的ip_hash算法）</p></blockquote><h3 id="后端存储-Mysql、Redis等"><a href="#后端存储-Mysql、Redis等" class="headerlink" title="后端存储(Mysql、Redis等)"></a>后端存储(Mysql、Redis等)</h3><blockquote><p>原理都是一样的，但是如果要是海量请求同时发送，请求数据库，容易造成数据库的压力过大从而崩溃，<strong>所以我们演示是基于Redis</strong></p></blockquote><h4 id="操作步骤-2"><a href="#操作步骤-2" class="headerlink" title="操作步骤"></a>操作步骤</h4><p>访问我仓库下载代码<br><a href="https://gitee.com/isleeboer/jsjkyfzpt/tree/master/work/session%E5%85%B1%E4%BA%AB/springboot+redis">点击进入</a></p><h4 id="原理-3"><a href="#原理-3" class="headerlink" title="原理"></a>原理</h4><blockquote><p>传统模式中，当request进入web容器，根据request获取session时，如果容器内存在session则返回，如果不存在就创建一个session然后返回，将sessionId返回<br>后端存储就是将session从容器里面抽出来，形成独立的模块，以便分布式或者集群能够共享。当request进入容器时，根据request获取session时，去找redis如果存在就返回，如果不存在就创建并存储</p></blockquote><p><img src="https://img-blog.csdnimg.cn/239d9b23b77846f18c0c6ac41974b255.png" alt="在这里插入图片描述"></p><h4 id="优缺点-3"><a href="#优缺点-3" class="headerlink" title="优缺点"></a>优缺点</h4><blockquote><p><strong>优点</strong><br>代码灵活，对web容器无侵入<br>速度比mysql更快<br><br><br><strong>缺点</strong><br>需要编写代码</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 计网 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Session </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态代理</title>
      <link href="/2022/06/03/dong-tai-dai-li/"/>
      <url>/2022/06/03/dong-tai-dai-li/</url>
      
        <content type="html"><![CDATA[<h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><p>代理类在程序运行时创建的代理方式被称为动态代理<br> 静态代理中，代理类是自己定义好的，在程序运行之前就已经编译完成。然而动态代理，代理类并不是在Java代码中定义的，而是运行时根据我们在Java代码中的指示动态生成的。<strong>相比较静态代理，动态代理的优势在于可以很方便的对代理类的函数进行统一的处理，而不用修改每个代理类中的方法</strong>，比如想要在每个代理方法前都加上一个处理方法，静态代理就需要在每个类内部加上这个方法</p><h3 id="静态代理与动态代理的区别"><a href="#静态代理与动态代理的区别" class="headerlink" title="静态代理与动态代理的区别"></a>静态代理与动态代理的区别</h3><p> <strong>静态代理</strong></p><blockquote><p><strong>优点</strong><br>简单、效率高、容易理解<br><strong>缺点</strong><br>当目标类增多，代理类也需要增加<br>当接口方法增加或修改的时候，很多类都需要修改，因为目标类和代理类都实现了相同的接口</p></blockquote><p><strong>动态代理</strong></p><blockquote><p><strong>优点</strong><br>动态代理中的目标类很多的时候代理类的数量可以很少<br>修改接口的方法的时候不会影响到代理类<br>代理类可以自动帮助我们生成无需手动</p></blockquote><h2 id="JDK动态代理"><a href="#JDK动态代理" class="headerlink" title="JDK动态代理"></a>JDK动态代理</h2><blockquote><p>JDK动态代理是基于反射机制，生成一个实现代理接口的匿名类，然后重写方法进行方法增强。在调用具体方法前通过调用InvokeHandler的invoke方法来处理。<br>他的特点是生成代理类的速度很快，但是运行时调用方法操作会比较慢，因为是基于反射机制的，而且只能针对接口编程，即目标对象要实现接口</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">implements</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hi 我是一名学生"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JDKProxy</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">{</span>    Object target<span class="token punctuation">;</span>    <span class="token keyword">public</span> Object <span class="token function">newProxy</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> obj<span class="token punctuation">;</span>        <span class="token keyword">return</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你好"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object invoke <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"再见"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> invoke<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JDKTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Person proxy <span class="token operator">=</span> <span class="token punctuation">(</span>Person<span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">JDKProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newProxy</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        proxy<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/a005188a94fc450892ddf3c0d5592a00.png" alt="在这里插入图片描述"></p><h2 id="CGLIB动态代理"><a href="#CGLIB动态代理" class="headerlink" title="CGLIB动态代理"></a>CGLIB动态代理</h2><blockquote><p>Cglib（Code Generation Library）是一个强大的，高性能，高质量的Code生成类库，它是开源的。动态代理是利用 asm 开源包，将目标对象类的 class 文件加载进来，然后修改其字节码生成新的子类来进行扩展处理</p></blockquote><pre class="line-numbers language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>cglib<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>cglib<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.3.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hi 我是一名学生"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CglibProxy</span> <span class="token keyword">implements</span> <span class="token class-name">MethodInterceptor</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Object target<span class="token punctuation">;</span>    <span class="token keyword">public</span> Object <span class="token function">newProxy</span><span class="token punctuation">(</span>Object target<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 增强器</span>        Enhancer enhancer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Enhancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        enhancer<span class="token punctuation">.</span><span class="token function">setCallback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        enhancer<span class="token punctuation">.</span><span class="token function">setSuperclass</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> enhancer<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     *     * @param o 生成代理类的实例     * @param method 上文实体类所调用的被代理的方法引用     * @param objects 方法列表参数     * @param methodProxy 生成代理类对方法的引用     * @return     * @throws Throwable     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">intercept</span><span class="token punctuation">(</span>Object o<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> objects<span class="token punctuation">,</span> MethodProxy methodProxy<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你好"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object invoke <span class="token operator">=</span> methodProxy<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> objects<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"再见"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> invoke<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CglibTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        CglibProxy proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CglibProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Student student <span class="token operator">=</span> <span class="token punctuation">(</span>Student<span class="token punctuation">)</span> proxy<span class="token punctuation">.</span><span class="token function">newProxy</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        student<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/e07ec90cf73f4847bbe26f4a60429c2e.png" alt="在这里插入图片描述"></p><h2 id="两种代理方式的区别"><a href="#两种代理方式的区别" class="headerlink" title="两种代理方式的区别"></a>两种代理方式的区别</h2><blockquote><p>JDK动态代理是基于<strong>反射机制</strong>，生成一个实现了接口继承了proxy类的匿名类而Cglib动态代理是基于<strong>继承机制</strong>，继承被代理类，底层是基于asm第三方框架对代理对象类的class文件加载进来，通过修改其字节码生成子类来处理<br><strong>JDK</strong>动态代理<strong>生成类的速度快</strong>，后续执行类的<strong>方法操作慢</strong>而<strong>Cglib</strong>代理是<strong>生成类的速度慢</strong>，后续执行类的<strong>方法操作快</strong></p></blockquote><blockquote><p><strong>为什么JDK生成快，执行慢而Cglib与之相反</strong><br><br><br>JDK动态代理通过会拦截方法，通过反射获取模板接口名字、内部方法以及参数，拼接生成一个新的Java代理对象<br>生成的代理对象不能直接调用被代理对象的方法，而是通过反射所有每次都得用反射调用一次所以执行方法都需要通过反射<br><br><br>Cglib代理实际上通过继承，生成一个子类，就是将代理对象类的class文件加载进来，通过修改其字节码生成子类来处理，生成类的速度慢但是后续执行时候就很快</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> 动态代理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bean的生命周期</title>
      <link href="/2022/05/21/bean-de-sheng-ming-zhou-qi/"/>
      <url>/2022/05/21/bean-de-sheng-ming-zhou-qi/</url>
      
        <content type="html"><![CDATA[<p>先直接说出过程，再来演示具体的操作</p><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><p><img src="https://img-blog.csdnimg.cn/eefabac9b74d4a568d1d12b99edf2fef.png" alt="在这里插入图片描述"></p><p>简化来说就是</p><p>1、首先是实例化Bean，当客户向容器请求一个尚未初始化的bean时，或初始化bean的时候需要注入另一个尚末初始化的依赖时，容器就会调用doCreateBean()方法进行实例化，实际上就是通过反射的方式创建出一个bean对象</p><p>2、Bean实例创建出来后，接着就是给这个Bean对象进行属性填充，也就是注入这个Bean依赖的其它bean对象</p><p>3、属性填充完成后，进行初始化Bean操作，初始化阶段又可以分为几个步骤：</p><ul><li>执行Aware接口的方法<br>Spring会检测该对象是否实现了xxxAware接口，通过Aware类型的接口，可以让我们拿到Spring容器的些资源。如实现<br>BeanNameAware接口可以获取到BeanName，实现BeanFactoryAware接口可以获取到工厂对象BeanFactory等</li><li>执行BeanPostProcessor的前置处理方法postProcessBeforelnitialization()，对Bean进行一些自定义的前置处理</li><li>判断Bean是否实现了InitializingBean接口，如果实现了，将会执行lnitializingBean的afeterPropertiesSet()初始化方法；</li><li>执行用户自定义的初始化方法，如init-method等；</li><li>执行BeanPostProcessor的后置处理方法postProcessAfterinitialization()</li></ul><p>4、初始化完成后，Bean就成功创建了，之后就可以使用这个Bean， 当Bean不再需要时，会进行销毁操作，</p><ul><li>首先判断Bean是否实现了DestructionAwareBeanPostProcessor接口，如果实现了，则会执行DestructionAwareBeanPostProcessor后置处理器的销毁回调方法</li><li>其次会判断Bean是否实现了DisposableBean接口，如果实现了将会调用其实现的destroy()方法</li><li>最后判断这个Bean是否配置了dlestroy-method等自定义的销毁方法，如果有的话，则会自动调用其配置的销毁方法；</li></ul><h2 id="调用构造方法"><a href="#调用构造方法" class="headerlink" title="调用构造方法"></a>调用构造方法</h2><p><img src="https://img-blog.csdnimg.cn/7f13e6c23c304091adba8ce12b1f0221.png" alt="在这里插入图片描述"></p><h2 id="设置属性"><a href="#设置属性" class="headerlink" title="设置属性"></a>设置属性</h2><p><img src="https://img-blog.csdnimg.cn/7c939ac76d3b4e2196a4fbe5b218c668.png" alt="在这里插入图片描述"></p><h2 id="看是否实现了xxxAware接口"><a href="#看是否实现了xxxAware接口" class="headerlink" title="看是否实现了xxxAware接口"></a>看是否实现了xxxAware接口</h2><p><img src="https://img-blog.csdnimg.cn/43e923c7c11341df9b1e76e32fcbeedb.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/ed99df09f7bf430a8c6723fea2d49910.png" alt="在这里插入图片描述"></p><h2 id="看是否设置了BeanPostProcessor接口中的postProcessBeforeInitialization方法"><a href="#看是否设置了BeanPostProcessor接口中的postProcessBeforeInitialization方法" class="headerlink" title="看是否设置了BeanPostProcessor接口中的postProcessBeforeInitialization方法"></a>看是否设置了BeanPostProcessor接口中的postProcessBeforeInitialization方法</h2><p><img src="https://img-blog.csdnimg.cn/fd30615bfd8242528710f303a065adac.png" alt="在这里插入图片描述"></p><h2 id="看是否设置了初始化方法"><a href="#看是否设置了初始化方法" class="headerlink" title="看是否设置了初始化方法"></a>看是否设置了初始化方法</h2><p><img src="https://img-blog.csdnimg.cn/91dc723d716e4ff9af988e9779c2dd5e.png" alt="在这里插入图片描述"></p><h2 id="看是否设置了BeanPostProcessor接口中的postProcessAfterInitialization方法"><a href="#看是否设置了BeanPostProcessor接口中的postProcessAfterInitialization方法" class="headerlink" title="看是否设置了BeanPostProcessor接口中的postProcessAfterInitialization方法"></a>看是否设置了BeanPostProcessor接口中的postProcessAfterInitialization方法</h2><p><img src="https://img-blog.csdnimg.cn/b7f2f5b11a02465497a5bc235460ba02.png" alt="在这里插入图片描述"></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p><img src="https://img-blog.csdnimg.cn/485cd05a4fa34ab48633e5b4098ecdda.png" alt="在这里插入图片描述"></p><h2 id="看是否设置了销毁前的方法"><a href="#看是否设置了销毁前的方法" class="headerlink" title="看是否设置了销毁前的方法"></a>看是否设置了销毁前的方法</h2><p><img src="https://img-blog.csdnimg.cn/5fe09849d565477cbac69c433f14b53b.png" alt="在这里插入图片描述"></p><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p><img src="https://img-blog.csdnimg.cn/baed07b4db1e43038e6500ebf7bb10ee.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/6e8f9778c37448e985c3c9869b28726f.png" alt="在这里插入图片描述"></p><h2 id="初始化和销毁前的方法都有三种方式"><a href="#初始化和销毁前的方法都有三种方式" class="headerlink" title="初始化和销毁前的方法都有三种方式"></a>初始化和销毁前的方法都有三种方式</h2><blockquote><p>声明式注解 @PostConstruct（初始化）@PreDestroy（销毁）<br>接口式  InitializingBean（初始化接口）、DisposableBean（销毁接口）<br>自定义式 xml/@Bean方式<br>顺序都是<strong>声明式-&gt;接口式-&gt;自定义式</strong></p></blockquote><p><img src="https://img-blog.csdnimg.cn/a109766b3e9844fda0ad61ccde1551da.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/75c6399eb36f4fd3933e52f4201bf735.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/6b2fa7656d81449e98d89e271d1fe075.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/0fb4c885e3b1477fba18bb5b6373ff96.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bean </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程池</title>
      <link href="/2022/05/20/xian-cheng-chi/"/>
      <url>/2022/05/20/xian-cheng-chi/</url>
      
        <content type="html"><![CDATA[<p>线程过多就容易引发内存溢出，因此我们有必要使用线程池的技术</p><h2 id="线程池的好处"><a href="#线程池的好处" class="headerlink" title="线程池的好处"></a>线程池的好处</h2><p><strong>降低资源消耗：</strong> 通过重复利用已创建的线程降低线程创建和销毁造成的消耗<br><strong>提高响应速度：</strong> 当任务到达时，任务可以不需要等待线程创建就能立即执行<br><strong>提高线程管理性：</strong> 线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源还会降低系统的稳定性，使用线程池可以进行统一的分配、调优和监控</p><h2 id="线程池的创建"><a href="#线程池的创建" class="headerlink" title="线程池的创建"></a>线程池的创建</h2><p>线程池的真正实现类是ThreadPoolExecutor，其中具有七个重要参数</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">,</span>                              <span class="token keyword">int</span> maximumPoolSize<span class="token punctuation">,</span>                              <span class="token keyword">long</span> keepAliveTime<span class="token punctuation">,</span>                              TimeUnit unit<span class="token punctuation">,</span>                              BlockingQueue<span class="token operator">&lt;</span>Runnable<span class="token operator">></span> workQueue<span class="token punctuation">,</span>                              ThreadFactory threadFactory<span class="token punctuation">,</span>                              RejectedExecutionHandler handler<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="corePoolSize"><a href="#corePoolSize" class="headerlink" title="corePoolSize"></a>corePoolSize</h3><p><strong>核心线程数</strong>。默认情况下核心线程会一直存活，但是当将<strong>allowsCoreThreadTimeOut</strong>设置为true时，核心线程也会超时回收。核心线程最开始并不会立即创建而是等任务来了再创建，然后存活下去</p><h3 id="maximumPoolSize"><a href="#maximumPoolSize" class="headerlink" title="maximumPoolSize"></a>maximumPoolSize</h3><p><strong>最大线程数</strong> 。线程池所能容纳的最大线程数。当活跃线程数达到该数值后，后续的新任务将会阻塞。最大线程数 = 核心线程数 + 非核心线程数</p><h3 id="keepAliveTime"><a href="#keepAliveTime" class="headerlink" title="keepAliveTime"></a>keepAliveTime</h3><p><strong>非核心线程闲置超时时间</strong> 。如果超过该时长，非核心线程将会回收</p><h3 id="unit"><a href="#unit" class="headerlink" title="unit"></a>unit</h3><p><strong>超时单位</strong> 。指定KeepAliveTime超时时间的单位。</p><h3 id="workQueue"><a href="#workQueue" class="headerlink" title="workQueue"></a>workQueue</h3><p><strong>任务队列</strong> 。当核心线程全被使用的时候，且任务队列未满时候就会先将任务放到任务队列中</p><h3 id="threadFactory"><a href="#threadFactory" class="headerlink" title="threadFactory"></a>threadFactory</h3><p><strong>线程工厂</strong> 。用于指定为线程创建新线程的方式</p><h3 id="handler"><a href="#handler" class="headerlink" title="handler"></a>handler</h3><p><strong>拒绝策略</strong> 。当最大线程数达到饱和时候需要执行的饱和策略</p><h3 id="任务队列"><a href="#任务队列" class="headerlink" title="任务队列"></a>任务队列</h3><p>任务队列是基于阻塞队列实现的，即采用生产者消费者模式，在Java中需要实现BlockingQueue接口，但Java已经为我们提供了7种阻塞队列的实现</p><blockquote><p><strong>ArrayBlockingQueue</strong></p><p>一个由数组结构构成的有界阻塞队列(数组结构可配合指针实现一个环形队列)</p><p><strong>LinkedBlockingQueue</strong></p><p>一个由链表结构构成的有界阻塞队列，在未指明容量时默认为Integer.MAX_VALUE</p><p><strong>PriorityBlockingQueue</strong></p><p>一个支持优先级排序的无界队列，对元素没有要求，可以实现Comparable接口来进行比较</p><p><strong>DelayQueue</strong></p><p>类似于<strong>PriorityBlockingQueue</strong>，是二叉堆形成的无界优先队列。要求元素都实现DelayQueue接口，通过执行时延从队列中提取任务，时间没到任务取不出来</p><p><strong>SynchronousQueue</strong></p><p>一个不存储元素的阻塞队列，消费者线程调用take()方法时会发生阻塞，直到有一个生产者生产了一个元素，同理生产者调用put()方法</p><p><strong>LinkedBlockingDeque</strong></p><p>使用双向队列实现的有界双端阻塞队列。双端意味着可以像普通队列一样FIFO也可以像栈一样FILO</p><p><strong>LinkedTransferQueue</strong></p><p>这是一个无界队列</p></blockquote><h3 id="拒绝策略"><a href="#拒绝策略" class="headerlink" title="拒绝策略"></a>拒绝策略</h3><p>当线程池的线程达到最大线程数时，需要执行拒绝策略，拒绝策略需要实现RejectedExecutionHandler接口，并实现rejectedExcution方法，Executors为我们实现了4种拒绝策略</p><ol><li>**AbortPolicy(默认)**：丢弃任务并抛出异常</li><li><strong>CallerRunsPolicy</strong>：由调用线程处理该任务</li><li><strong>DiscardPolicy</strong>：丢弃任务，但是不抛出异常</li><li><strong>DiscardOldestPolicy</strong>：丢弃队列中最早未处理的异常</li></ol><p><img src="https://img-blog.csdnimg.cn/e82d158a6ee04d3487c060ad73788716.jpeg" alt="在这里插入图片描述"></p><h2 id="功能线程池"><a href="#功能线程池" class="headerlink" title="功能线程池"></a>功能线程池</h2><h3 id="定长线程池-newFixedThreadPool"><a href="#定长线程池-newFixedThreadPool" class="headerlink" title="定长线程池(newFixedThreadPool)"></a>定长线程池(newFixedThreadPool)</h3><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> ExecutorService <span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token keyword">int</span> nThreads<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>nThreads<span class="token punctuation">,</span> nThreads<span class="token punctuation">,</span>                                      0L<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">,</span>                                      <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token operator">&lt;</span>Runnable<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> ExecutorService <span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token keyword">int</span> nThreads<span class="token punctuation">,</span> ThreadFactory threadFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>nThreads<span class="token punctuation">,</span> nThreads<span class="token punctuation">,</span>                                      0L<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">,</span>                                      <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token operator">&lt;</span>Runnable<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                      threadFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>特点</strong> ： 只有核心线程，线程数量固定，全是核心线程任务队列为链表的有界队列<br><strong>应用场景：</strong> 控制线程最大并发数<br><strong>缺点：</strong> 他的任务队列是LinkedBlockingQueue且没有指定容量，则当线程数满了之后就会一直放任务进任务队列，容易造成OOM</p></blockquote><h3 id="单线程化线程池-newSingleThreadExecutor"><a href="#单线程化线程池-newSingleThreadExecutor" class="headerlink" title="单线程化线程池(newSingleThreadExecutor)"></a>单线程化线程池(newSingleThreadExecutor)</h3><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> ExecutorService <span class="token function">newSingleThreadExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FinalizableDelegatedExecutorService</span>            <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span>                                    0L<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">,</span>                                    <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token operator">&lt;</span>Runnable<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>与上面类似</p></blockquote><h3 id="可缓存线程池-newCachedThreadPool"><a href="#可缓存线程池-newCachedThreadPool" class="headerlink" title="可缓存线程池(newCachedThreadPool)"></a>可缓存线程池(newCachedThreadPool)</h3><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> ExecutorService <span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">,</span>                                      60L<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span>                                      <span class="token keyword">new</span> <span class="token class-name">SynchronousQueue</span><span class="token operator">&lt;</span>Runnable<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>特点</strong>：没有核心线程数只有非核心线程数，整个线程池表现为线程池数会根据任务量不断增长，没有增长，当任务执行完毕，空闲1分钟后释放线程<br><strong>用途</strong> ：适合任务数比较密集，但每个任务执行时间较短的情况<br><strong>缺点</strong> ： 如果任务多那么线程就会创建过多的线程，创建线程会很耗时并且容易导致OOM</p></blockquote><h3 id="定时线程池-newScheduledThreadPool"><a href="#定时线程池-newScheduledThreadPool" class="headerlink" title="定时线程池(newScheduledThreadPool)"></a>定时线程池(newScheduledThreadPool)</h3><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> ScheduledExecutorService <span class="token function">newScheduledThreadPool</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ScheduledThreadPoolExecutor</span><span class="token punctuation">(</span>corePoolSize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">ScheduledThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>corePoolSize<span class="token punctuation">,</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> NANOSECONDS<span class="token punctuation">,</span>              <span class="token keyword">new</span> <span class="token class-name">DelayedWorkQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>特点：</strong> 和性能线程固定，非核心线程很多，执行完立即删除<br><strong>应用场景：</strong> 执行定时或周期性的任务<br><strong>缺点：</strong> 线程数量上限是Integer.MAX_VALUE</p></blockquote><h2 id="线程池中的方法"><a href="#线程池中的方法" class="headerlink" title="线程池中的方法"></a>线程池中的方法</h2><blockquote><p><strong>void execute(Runnable command);</strong><br>执行任务</p></blockquote><blockquote><p><strong><T> Future<T> submit(Callable<T> task)</T></T></T></strong><br>提交任务task，用返回值Future获取任务执行结果</p></blockquote><blockquote><p><strong><T> List&lt;Future<T>&gt; invokeAll(Collection&lt;? extends Callable<T>&gt; tasks)</T></T></T></strong><br>提交tasks中所有的任务</p></blockquote><blockquote><p><strong><T> List&lt;Future<T>&gt; invokeAll(Collection&lt;? extends Callable<T>&gt; tasks, long timeout, TimeUnit unit)</T></T></T></strong><br>提交tasks中所有的任务带超时时间</p></blockquote><blockquote><p><strong><T> T invokeAny(Collection&lt;? extends Callable<T>&gt; tasks)</T></T></strong><br>提交tasks中的任务那个先执行完毕返回该任务的结果其它任务取消</p></blockquote><blockquote><p><strong><T> T invokeAny(Collection&lt;? extends Callable<T>&gt; tasks,long timeout, TimeUnit unit)</T></T></strong><br>提交tasks中的任务那个先执行完毕返回该任务的结果其它任务取消带超时时间</p></blockquote><p><strong>shutdown与shutdownnow</strong></p><blockquote><p><strong>shutdown</strong><br>线程池状态修改为SHUTDOWN<br>不会接收新的任务，但已提交的会执行完， 只打断空闲线程<br><br><br><strong>shutdownnow</strong><br>修改线程池状态为stop<br>不接收新任务、打断所有线程、会将队列中的任务返回</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序算法</title>
      <link href="/2022/05/20/pai-xu-suan-fa/"/>
      <url>/2022/05/20/pai-xu-suan-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p><img src="https://img-blog.csdnimg.cn/145866746f6f4a6ab7348bed9c731daa.gif" alt="在这里插入图片描述"></p><blockquote><p><strong>平均时间复杂度：</strong> o(n^2)<br><strong>最好时间：</strong> o(n)<br><strong>最坏时间：</strong> o(n^2)<br><strong>空间复杂度：</strong> o(1)<br><strong>是否稳定：</strong> 稳定</p></blockquote><p><strong>简单的冒泡排序</strong></p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>len <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> nums<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> len<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">int</span> temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    nums<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="冒泡排序的优化"><a href="#冒泡排序的优化" class="headerlink" title="冒泡排序的优化"></a>冒泡排序的优化</h3><p><strong>设置标志位</strong></p><blockquote><p>设置一个标志位来标识这次遍历是否进行过交换<br>如果没有进行过交换则表示数组已经有序，直接退出</p></blockquote><pre class="line-numbers language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">binarySort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>len <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> nums<span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">boolean</span> isSort <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//是否有序</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> len<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">int</span> temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    nums<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>                    isSort <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>isSort<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>设置结束位置</strong></p><blockquote><p>比如初始数组为[4,3,2,1,5,6]<br>经过第一次排序后数组变为[3,2,1,4,5,6]<br>如果按照普通冒泡排序下次需要遍历的下标范围为[0,4]<br>但是[3,4]是已经有序的，所以可以减少比较，保存上次交换的结束位置</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>len <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token keyword">int</span> max_index <span class="token operator">=</span> len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> index <span class="token operator">=</span> max_index<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">boolean</span> isSort <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//是否有序</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> index<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">int</span> temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                nums<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>                isSort <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                max_index<span class="token operator">=</span>j<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>isSort<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        index <span class="token operator">=</span> max_index<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>双向冒泡排序</strong></p><blockquote><p>与设置结束位置类似，这个是也设置了起始位置<br>使得在left之前的都是已经排好序的</p></blockquote><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>len <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> nums<span class="token punctuation">;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> tleft <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>tright <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">boolean</span> isSort <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> left<span class="token punctuation">;</span>i <span class="token operator">&lt;</span> right<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">int</span> temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                    nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    nums<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>                    isSort <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    tright <span class="token operator">=</span> i<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>isSort<span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span>            right <span class="token operator">=</span> tright<span class="token punctuation">;</span>            isSort <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> right<span class="token punctuation">;</span>i <span class="token operator">></span> left<span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">int</span> temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                    nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>                    isSort <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    tleft <span class="token operator">=</span> i<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>isSort<span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span>            left <span class="token operator">=</span> tleft<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><p><img src="https://img-blog.csdnimg.cn/fd3b383f48e74e8e86067846af27c12b.gif" alt="在这里插入图片描述"></p><blockquote><p><strong>平均时间复杂度：</strong> o(n^2)<br><strong>最好时间：</strong> o(n^2)<br><strong>最坏时间：</strong> o(n^2)<br><strong>空间复杂度：</strong> o(1)<br><strong>是否稳定：</strong> 不稳定</p></blockquote><p><strong>选择排序</strong></p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">selectSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>len <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> nums<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> minIndex <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span>j <span class="token operator">&lt;</span> len<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    minIndex <span class="token operator">=</span> j<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">int</span> t <span class="token operator">=</span> nums<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>            nums<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><p><img src="https://img-blog.csdnimg.cn/7a7a54d942f74bfdb4b0629173d24c0c.gif" alt="在这里插入图片描述"></p><blockquote><p><strong>平均时间复杂度：</strong> o(n^2)<br><strong>最好时间：</strong> o(n)<br><strong>最坏时间：</strong> o(n^2)<br><strong>空间复杂度：</strong> o(1)<br><strong>是否稳定：</strong> 稳定</p></blockquote><p><strong>插入排序</strong></p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">insertSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>len <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> nums<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> cur <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> preIndex <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>preIndex <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>preIndex<span class="token punctuation">]</span> <span class="token operator">></span> cur<span class="token punctuation">)</span><span class="token punctuation">{</span>                nums<span class="token punctuation">[</span>preIndex<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>preIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>                preIndex<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            nums<span class="token punctuation">[</span>preIndex<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> cur<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p><img src="https://img-blog.csdnimg.cn/e34b13dd820448efb8f6664e5b1192dd.gif" alt="在这里插入图片描述"></p><blockquote><p><strong>平均时间复杂度：</strong> o(nlogn)<br><strong>最好时间：</strong> o(nlogn)<br><strong>最坏时间：</strong> o(n^2)<br><strong>空间复杂度：</strong> o(logn)<br><strong>是否稳定：</strong> 不稳定</p></blockquote><p><strong>快速排序</strong></p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span><span class="token keyword">int</span> left<span class="token punctuation">,</span><span class="token keyword">int</span> right<span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>left <span class="token operator">>=</span> right<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>       <span class="token keyword">int</span> l <span class="token operator">=</span> left <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>       <span class="token keyword">int</span> r <span class="token operator">=</span> right <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>       <span class="token keyword">int</span> t <span class="token operator">=</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token keyword">while</span><span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token keyword">do</span> l<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">&lt;</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">do</span> r<span class="token operator">--</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">></span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>               <span class="token keyword">int</span> temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>               nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">;</span>               nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>           <span class="token punctuation">}</span>       <span class="token punctuation">}</span>        <span class="token function">quickSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>left<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token function">quickSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><p><img src="https://img-blog.csdnimg.cn/73d0a113dfc94817850eb68e93437e94.gif" alt="在这里插入图片描述"></p><blockquote><p><strong>平均时间复杂度：</strong> o(nlogn)<br><strong>最好时间：</strong> o(nlogn)<br><strong>最坏时间：</strong> o(nlogn)<br><strong>空间复杂度：</strong> o(n)<br><strong>是否稳定：</strong> 稳定</p></blockquote><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span><span class="token keyword">int</span> left<span class="token punctuation">,</span><span class="token keyword">int</span> right<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>left <span class="token operator">>=</span> right<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> right <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token function">mergeSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>left<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">mergeSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//需要合并 [left,mid] [mid+1,right]</span>        <span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>right<span class="token operator">-</span>left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> l <span class="token operator">=</span> left<span class="token punctuation">,</span>r <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>l <span class="token operator">&lt;=</span> mid <span class="token operator">&amp;&amp;</span> r <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span> temp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>l<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> temp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>r<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>l <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> temp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>l<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>r <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> temp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>r<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> right<span class="token punctuation">;</span>i <span class="token operator">>=</span> left<span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">[</span><span class="token operator">--</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><p><img src="https://img-blog.csdnimg.cn/22b96ad4c2174e4e8f6bfc5f47cecd6a.gif" alt="在这里插入图片描述"></p><blockquote><p><strong>平均时间复杂度：</strong> o(nlogn)<br><strong>最好时间：</strong> o(nlogn)<br><strong>最坏时间：</strong> o(nlogn)<br><strong>空间复杂度：</strong> o(1)<br><strong>是否稳定：</strong> 不稳定</p></blockquote><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">heapSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>len <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//构造大根堆</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token punctuation">(</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">>=</span><span class="token number">0</span> <span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">heap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>i<span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//将根弄到最后</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> t <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span>            <span class="token function">heap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//子树构建大顶堆</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">heap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span><span class="token keyword">int</span> index<span class="token punctuation">,</span><span class="token keyword">int</span> size<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> max <span class="token operator">=</span> index<span class="token punctuation">;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> index <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>left <span class="token operator">&lt;</span> size <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>max<span class="token punctuation">]</span><span class="token punctuation">)</span> max <span class="token operator">=</span> left<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>right <span class="token operator">&lt;</span> size <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>max<span class="token punctuation">]</span><span class="token punctuation">)</span> max <span class="token operator">=</span> right<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>max <span class="token operator">!=</span> index<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> t <span class="token operator">=</span> nums<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>            nums<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>max<span class="token punctuation">]</span><span class="token punctuation">;</span>            nums<span class="token punctuation">[</span>max<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span>            <span class="token function">heap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>max<span class="token punctuation">,</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 常见算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XSS攻击与预防</title>
      <link href="/2022/02/04/xss-gong-ji-yu-yu-fang/"/>
      <url>/2022/02/04/xss-gong-ji-yu-yu-fang/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是XSS攻击"><a href="#什么是XSS攻击" class="headerlink" title="什么是XSS攻击"></a>什么是XSS攻击</h2><blockquote><p><strong>XSS跨站脚本攻击</strong>（Cross Site Scripting）的本质是攻击者在web页面插入恶意的script代码，当用户浏览该网页之时，嵌入其中的script代码就会被执行，从而达到恶意攻击用户的目的，比如读cookie，sesssion，tokens，或者网站其它敏感信息。</p></blockquote><h2 id="XSS攻击的危害"><a href="#XSS攻击的危害" class="headerlink" title="XSS攻击的危害"></a>XSS攻击的危害</h2><blockquote><p>1、通过document.cookie<strong>盗取cookie</strong>中的信息<br>2、使用js或css<strong>破坏页面正常的结构与样式</strong><br>3、<strong>流量劫持</strong>(通过访问某段具有window.location.href 定位到其他页面)<br>4、<strong>ddos攻击</strong>：利用合理的客户端请求来占用过多的服务器，从而使合法用户无法得到服务器响应<br>5、<strong>控制企业数据</strong>，包括读取、篡改、删除等</p></blockquote><h2 id="XSS攻击的类型"><a href="#XSS攻击的类型" class="headerlink" title="XSS攻击的类型"></a>XSS攻击的类型</h2><h3 id="反射型XSS攻击"><a href="#反射型XSS攻击" class="headerlink" title="反射型XSS攻击"></a>反射型XSS攻击</h3><blockquote><p>反射型XSS漏洞常见于通过<strong>URL传递参数</strong>的功能，如网站搜索、跳转等，由于需要用户主动打开恶意的URL才能生效，攻击者往往会结合多种手段诱导用户点击</p></blockquote><p><strong>反射型XSS攻击的步骤</strong></p><blockquote><p>1、攻击者构造出特殊的URL,其中包含恶意代码<br>2、用户打开有恶意代码的URL时，网站服务器端将恶意代码从URL取出，拼接在HTML返回给浏览器<br>3、用户浏览器接收到响应后解析执行。混在其中的恶意代码也会被执行<br>4、恶意代码窃取用户数据并发送到攻击者的网站，或者冒充用户行为，调用目标网站接口执行攻击者的指定的操作</p></blockquote><p><img src="https://img-blog.csdnimg.cn/5c1d0b88255945008c2bb2a7cd61108d.png" alt="在这里插入图片描述"></p><p><strong>防御反射型XSS攻击</strong></p><blockquote><p><strong>对输入进行检查：</strong> 对请求参数进行检查，一旦发现可疑的特殊字符就拒绝请求。<br><strong>对输出进行转义再显示：</strong> 对潜在的威胁的字符进行编码、转义</p></blockquote><h3 id="存储型XSS攻击"><a href="#存储型XSS攻击" class="headerlink" title="存储型XSS攻击"></a>存储型XSS攻击</h3><blockquote><p>恶意脚本<strong>永久存储在目标服务器</strong>上，当浏览器请求数据时，脚本从服务器传回执行，影响范围比反射型和DOM型XSS更大。存储型XSS攻击的原因是没有做好数据过滤：前端提交数据到服务端时，没有做好过滤，服务器端接收到数据时，在存储之前没有做过滤，前端从服务器请求到数据时，没有过滤输出</p></blockquote><p><strong>存储型XSS攻击步骤</strong></p><blockquote><p>1、攻击者将恶意代码提交到目标网站的数据库中<br>2、用户打开目标网站时，网站服务端将恶意代码从数据库中取出，拼接在HTML中返回给浏览器<br>3、用户浏览器接收到响应后解析执行，混在其中的恶意代码也被执行<br>4、恶意代码窃取用户数据并发送到攻击者的网站，或冒充用户行为，调用目标网站接口等</p></blockquote><p><img src="https://img-blog.csdnimg.cn/310adeb47925420fbd249fcf44a20e91.png" alt="在这里插入图片描述"></p><p><strong>防御存储型XSS攻击</strong></p><blockquote><p>服务器接收到数据在存储数据库之前进行转义或过滤<br>前端接收到服务器传递过来的数据，在展示页面之前先进行转义或过滤</p></blockquote><h3 id="DOM型XSS攻击"><a href="#DOM型XSS攻击" class="headerlink" title="DOM型XSS攻击"></a>DOM型XSS攻击</h3><blockquote><p>DOM型XSS攻击实际上就是前端JavaScript代码不够严谨，把不可信的内容插入到了页面</p></blockquote><p><strong>DOM型XSS攻击步骤</strong></p><blockquote><p>1、 攻击者构造出特殊数据，其中包含恶意代码<br>2、用户浏览器执行了恶意代码<br>3、窃取用户数据并发送到攻击者的网站或冒充用户</p></blockquote><p><strong>防疫DOM型XSS攻击</strong></p><blockquote><p>在使用.innerHTML   outerHTML document.write()时不要把不可信的数据插入到HTML页面中，应尽量使用.textContent .setAttribute()等</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 计网 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot参数校验</title>
      <link href="/2022/02/03/springboot-can-shu-xiao-yan/"/>
      <url>/2022/02/03/springboot-can-shu-xiao-yan/</url>
      
        <content type="html"><![CDATA[<h2 id="一、参数校验"><a href="#一、参数校验" class="headerlink" title="一、参数校验"></a>一、参数校验</h2><h3 id="1-普通做法"><a href="#1-普通做法" class="headerlink" title="1.普通做法"></a>1.普通做法</h3><p>写多个if来判断条件</p><p>实体类</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String username<span class="token punctuation">;</span>    <span class="token keyword">private</span> String password<span class="token punctuation">;</span>    <span class="token keyword">private</span> String email<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/loginUser"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">loginUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> User user<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"用户名不能为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"密码不能为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"邮箱不能为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>StringUtils的依赖包</p><pre class="line-numbers language-xml"><code class="language-xml">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-lang3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.12.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-Validated注解"><a href="#2-Validated注解" class="headerlink" title="2.@Validated注解"></a>2.@Validated注解</h3><p>实体类</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"用户名不能为空"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String username<span class="token punctuation">;</span>    <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"密码不能为空"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String password<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Email</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"邮箱格式错误"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String email<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/loginUser"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">loginUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Validated</span> <span class="token annotation punctuation">@RequestBody</span> User user<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/img_convert/f252aeea0b87eb19a98f7d4ace78f18a.png" alt="image-20220403125202883"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/65583866d0b37d6bec1df12990423fad.png" alt="image-20220403125218207"></p><p>引入依赖</p><pre class="line-numbers language-xml"><code class="language-xml">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-validation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>踩坑过后的建议</p><p>字符串建议用@NotBlank不要用@NotNull</p><p>@NotNull：用在基本类型上 不能为null但是可以为空字符串</p><p>@NotEmpty：用在集合类上 不能为空并且长度必须大于0</p><p>@NotBlank：只能作用在String上 不能为null并且调用trim()后长度必须大于0</p><h3 id="3-优化异常处理"><a href="#3-优化异常处理" class="headerlink" title="3.优化异常处理"></a>3.优化异常处理</h3><p>由上面可以看出抛出了MethodArgumentNotValidException异常</p><p><img src="https://img-blog.csdnimg.cn/img_convert/219bf2da736c5b9e27f7f4070dbcad22.png" alt="image-20220403131533850"></p><p>而MethodArgumentNotValidException继承了BindException</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RestControllerAdvice</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ControllerAdvice</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>BindException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> R <span class="token function">MethodArgumentNotValidExceptionHandler</span><span class="token punctuation">(</span>BindException e<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取到错误信息</span>        String objectError <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getBindingResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAllErrors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDefaultMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">R</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setFlag</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span>objectError<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/img_convert/72e7ca3188d17148c3e011afffdd614a.png" alt="image-20220403132704144"></p><h2 id="二、统一响应"><a href="#二、统一响应" class="headerlink" title="二、统一响应"></a>二、统一响应</h2><h3 id="1-普通的响应"><a href="#1-普通的响应" class="headerlink" title="1.普通的响应"></a>1.普通的响应</h3><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/getUser"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> User <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/img_convert/fe2774a3d0818af7a1ba0e7692d3077b.png" alt="image-20220403133041494"></p><p>但是要进行和前端的交互，为了和前端妹子打好关系所以我们通常需要对数据进行包装一下，增加一下状态码，状态信息</p><h3 id="2-第一次封装"><a href="#2-第一次封装" class="headerlink" title="2.第一次封装"></a>2.第一次封装</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@Accessors</span><span class="token punctuation">(</span>chain <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">R</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> flag<span class="token punctuation">;</span>    <span class="token keyword">private</span> String message<span class="token punctuation">;</span>    <span class="token keyword">private</span> Object data<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/getUser"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> R <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">R</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setFlag</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token string">"获取用户成功"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/img_convert/01f34606ab40ccd5f7bd5615d41eef37.png" alt="image-20220403133757050"></p><p>这里面可以封装状态码信息等我只是简单封装</p><h3 id="3-封装改进"><a href="#3-封装改进" class="headerlink" title="3.封装改进"></a>3.封装改进</h3><p>每次返回都要new R()并且设置flag很麻烦所以提供一个静态方法</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@Accessors</span><span class="token punctuation">(</span>chain <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">R</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> flag<span class="token punctuation">;</span>    <span class="token keyword">private</span> String message<span class="token punctuation">;</span>    <span class="token keyword">private</span> Object data<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> R <span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">R</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setFlag</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> R <span class="token function">error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">R</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setFlag</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/getUser"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> R <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> R<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token string">"获取用户成功"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-另一种封装的方式"><a href="#4-另一种封装的方式" class="headerlink" title="4.另一种封装的方式"></a>4.另一种封装的方式</h3><p>AOP拦截所有Controller</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RestControllerAdvice</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"com.example.quickspringboot.controller"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ControllerResponseAdvice</span> <span class="token keyword">implements</span> <span class="token class-name">ResponseBodyAdvice</span><span class="token operator">&lt;</span>Object<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//判断这个类型是不是已经是 R 是了就不用封装,如果不是就会调用 beforeBodyWrite</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">supports</span><span class="token punctuation">(</span>MethodParameter returnType<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">HttpMessageConverter</span><span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> converterType<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">!</span>returnType<span class="token punctuation">.</span><span class="token function">getParameterType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@SneakyThrows</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">beforeBodyWrite</span><span class="token punctuation">(</span>Object body<span class="token punctuation">,</span> MethodParameter returnType<span class="token punctuation">,</span> MediaType selectedContentType<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">HttpMessageConverter</span><span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> selectedConverterType<span class="token punctuation">,</span> ServerHttpRequest request<span class="token punctuation">,</span> ServerHttpResponse response<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// String类型不能直接包装</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>returnType<span class="token punctuation">.</span><span class="token function">getGenericParameterType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ObjectMapper objectMapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 将数据包装在ResultVo里后转换为json串进行返回</span>                <span class="token keyword">return</span> objectMapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">R</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JsonProcessingException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"ControllerResponseAdvice String 封装失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 否则直接包装成ResultVo返回</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">R</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/getUser"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> User <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/img_convert/58000dece17439875baf4880dea2fedf.png" alt="image-20220403135451070"></p><p>但是这个只是对数据，这种可以设置成功的案列因为flag和message如果成功可以设置为默认</p><h3 id="5-不开启统一响应"><a href="#5-不开启统一响应" class="headerlink" title="5.不开启统一响应"></a>5.不开启统一响应</h3><p>假如有需求返回结果不要R类型需要String类型或者其他类型，那么第一种封装就可以很快直接返回就行而使用AOP不能，所以我们可以自定义一个注解</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>METHOD<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">NotControllerResponseAdvice</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">supports</span><span class="token punctuation">(</span>MethodParameter returnType<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">HttpMessageConverter</span><span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> converterType<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">!</span>returnType<span class="token punctuation">.</span><span class="token function">getParameterType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>                 <span class="token operator">&amp;&amp;</span> returnType<span class="token punctuation">.</span><span class="token function">hasMethodAnnotation</span><span class="token punctuation">(</span>NotControllerResponseAdvice<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/img_convert/b4cc8bb780b1212d758bc6f68a91f3e2.png" alt="image-20220403140521531"></p><h3 id="6-自定义注解的元注解的介绍"><a href="#6-自定义注解的元注解的介绍" class="headerlink" title="6.自定义注解的元注解的介绍"></a>6.自定义注解的元注解的介绍</h3><h4 id="1-Target"><a href="#1-Target" class="headerlink" title="1.@Target"></a>1.@Target</h4><p>说明注解修饰的对象范围，枚举规定了范围</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 用于描述类、接口等</span>TYPE<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//用于描述域</span>FIELD<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//用于描述方法</span>METHOD<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//用于描述参数</span>PARAMETER<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//用于描述构造器</span>CONSTRUCTOR<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//用于描述局部变量</span>LOCAL_VARIABLE<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//注解变量</span>ANNOTATION_TYPE<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//用于描述包</span>PACKAGE<span class="token punctuation">,</span>TYPE_PARAMETER<span class="token punctuation">,</span>TYPE_USE<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-Retention"><a href="#2-Retention" class="headerlink" title="2.@Retention"></a>2.@Retention</h4><p>定义该注解被保留时间长短</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//在源文件有效</span>SOURCE<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//在class文件中有效</span>CLASS<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//运行时</span>RUNTIME<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-Inherited"><a href="#3-Inherited" class="headerlink" title="3.@Inherited"></a>3.@Inherited</h4><p>@Inherited 元注解是一个标记注解，@Inherited阐述了某个被标注的类型是被继承的。如果一个使用了@Inherited修饰的annotation类型被用于一个class，则这个annotation将被用于该class的子类。</p><h4 id="4-Documented"><a href="#4-Documented" class="headerlink" title="4.@Documented"></a>4.@Documented</h4><p>@Documented用于描述其它类型的annotation应该被作为被标注的程序成员的公共API，因此可以被例如javadoc此类的工具文档化。Documented是一个标记注解，没有成员</p><h2 id="三、统一异常处理"><a href="#三、统一异常处理" class="headerlink" title="三、统一异常处理"></a>三、统一异常处理</h2><p>首先继承异常类</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyException</span> <span class="token keyword">extends</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> code<span class="token punctuation">;</span>    <span class="token keyword">private</span> String msg<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RestControllerAdvice</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ControllerAdvice</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>BindException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> R <span class="token function">MethodArgumentNotValidExceptionHandler</span><span class="token punctuation">(</span>BindException e<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取到错误信息</span>        String objectError <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getBindingResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAllErrors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDefaultMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">R</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setFlag</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span>objectError<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>MyException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 参数校验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSRF理解与预防</title>
      <link href="/2022/02/03/csrf-li-jie-yu-yu-fang/"/>
      <url>/2022/02/03/csrf-li-jie-yu-yu-fang/</url>
      
        <content type="html"><![CDATA[<h2 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h2><blockquote><p>CSRF即跨站请求攻击。简单来说是<strong>攻击者通过一些技术手段欺骗用户浏览器去访问一个自己以前认证过的站点并运行一些操作</strong>，因为浏览器之前认证过，所以被访问的站点会觉得这是真正的用户操作。<br>这就利用了web用户身份认证的一个漏洞：简单的身份验证仅仅能保证请求发自某个用户的浏览器，却不能保证请求本身是用户自愿发出的<br>简单来说：<strong>CSRF就是攻击者盗用了你的身份，以你的名义发送恶意请求</strong></p></blockquote><p><img src="https://img-blog.csdnimg.cn/10c366121a494ac6b28397e564aa74a8.png" alt="在这里插入图片描述"></p><blockquote><p><strong>必要条件</strong><br><br><br>登录受信任网站A，并在本地生成Cookie<br>在不登出A的情况下，访问危险网站B</p></blockquote><h2 id="CSRF代码演示-简单基于Get方式"><a href="#CSRF代码演示-简单基于Get方式" class="headerlink" title="CSRF代码演示(简单基于Get方式)"></a>CSRF代码演示(简单基于Get方式)</h2><blockquote><p><strong>在127.0.0.1:8080服务器下</strong></p></blockquote><p><img src="https://img-blog.csdnimg.cn/e1019fc4251a4dc2a54f596d319ee49d.png" alt="在这里插入图片描述"></p><blockquote><p>没有登录不能进行转账</p></blockquote><p><img src="https://img-blog.csdnimg.cn/7eefd545d4574c98a43a9343add65882.png" alt="在这里插入图片描述"></p><blockquote><p>登录成功</p></blockquote><p><img src="https://img-blog.csdnimg.cn/cbf43fc7685f44c7929025e16b3cb8df.png" alt="在这里插入图片描述"></p><blockquote><p>可以转账</p></blockquote><p><img src="https://img-blog.csdnimg.cn/ec0a54569b954057a12dcaa6d9f432c2.png" alt="在这里插入图片描述"></p><blockquote><p><strong>在127.0.0.1:5000服务器下</strong></p></blockquote><p><img src="https://img-blog.csdnimg.cn/aaa1f8006f3c4cfd922fa0c73570e3fe.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/4a2e8ac8b80f4ae7b671ea9295d182eb.png" alt="在这里插入图片描述"></p><blockquote><p>访问网站的时候请求了127.0.0.1:8080服务器下的trans</p></blockquote><p><img src="https://img-blog.csdnimg.cn/a1c74c5d8ef54cdc904f37cb1d85b1c4.png" alt="在这里插入图片描述"></p><h2 id="CSRF预防"><a href="#CSRF预防" class="headerlink" title="CSRF预防"></a>CSRF预防</h2><p><strong>提交验证码</strong></p><blockquote><p>在表单添加一个随机数字或验证码，通过强制用户与应用交互来有效遏制CSR攻击</p></blockquote><p><strong>Referer/Origin Check</strong></p><blockquote><p>在http请求头中有个字段为referer，如果是在正常站点A访问那么referer就是A，如果在恶意请求站点B中去请求A那么referer就是B，所以可以判断是否正常页面进来<br>但是referer可能可以被修改<br>Origin与Referer相比他不包含路径信息比如Referer是A/test所以Origin就是A</p></blockquote><p><strong>HTTP头中自定义属性并验证</strong></p><blockquote><p>因为CSRF是利用cookie来攻击的，当我们定义一个HTTP头部属性时候，这个B中的A请求就没有这个Header属性所以可以预防</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 计网 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSRF </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
