<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>如何定位慢查询SQL以及优化</title>
      <link href="/2022/10/03/ru-he-ding-wei-man-cha-xun-sql-yi-ji-you-hua/"/>
      <url>/2022/10/03/ru-he-ding-wei-man-cha-xun-sql-yi-ji-you-hua/</url>
      
        <content type="html"><![CDATA[<h2 id="慢查询日志记录慢SQL"><a href="#慢查询日志记录慢SQL" class="headerlink" title="慢查询日志记录慢SQL"></a>慢查询日志记录慢SQL</h2><p>定位慢SQL可以通过慢查询日志来查看慢SQL，默认的情况下，MySQL数据库不开启慢查询日志(slow query log)，需要手动把它打开<br>SET GLOBAL slow_query_log = ‘ON’;<br><img src="https://img-blog.csdnimg.cn/ca5a435941b34b31ac9d3667f4b1796f.png" alt="在这里插入图片描述"></p><p><strong>查看下慢查询日志配置</strong><br>SHOW VARIABLES LIKE ‘slow_query_log%’</p><p>slow_query_log：表示慢查询开启的状态<br>slow_query_log_file：表示慢查询日志存放的位置</p><p><strong>查看超过多少时间，才记录到慢查询日志</strong><br>SHOW VARIABLES LIKE ‘long_query_time’</p><p>注意： 这样配置是临时的如果需要永久修改需要去配置文件(/etc/my.cnf)</p><h2 id="explain查看分析SQL执行计划"><a href="#explain查看分析SQL执行计划" class="headerlink" title="explain查看分析SQL执行计划"></a>explain查看分析SQL执行计划</h2><p>通过慢查询日志定位出查询效率较低的SQL，可以使用explain查看SQL的执行计划<br><img src="https://img-blog.csdnimg.cn/363d74d85a864fafb0c7dc973c65b02f.png" alt="在这里插入图片描述"></p><p><strong>id</strong></p><blockquote><p><strong>1. id 值相同时，被视为一组从上向下执行。</strong><br><strong>2. 如果是子查询，id 值会递增，id 值越高，优先级越高</strong><br><strong>3. id为NULL最后执行</strong></p></blockquote><p><strong>select_type</strong></p><blockquote><p><strong>1. simple: 简单的select, 查询中不包含子查询或者 union。例如: select name from student where id= 100<br>2. primary: 子查询中最外层查询, 查询中若包含任何复杂的子部分, 最外层的select被标记为primary<br>3. derived：在 from 的列表中包含的子查询被标记成 derived（派生表）。例如: explain select id from (select id,name from student) student1 where name= ‘name100’<br>4. subquery：在 select 或 where 列表中包含了子查询，则子查询被标记成 subquery。例如: explain select id from student where score = (select score from student where<br>name=’name100’);<br>5. union: union中的第二个或后面的select语句. 例如: EXPLAIN select id from student where id&lt;12691055 UNION all select id from student where id&lt;12691060;</strong></p></blockquote><p><strong>table</strong></p><blockquote><p><strong>显示这一步所访问数据库中表名称. 有时候不是真实的表名, 可能是简称</strong></p></blockquote><p><strong>partitions</strong></p><blockquote><p><strong>该字段看table所在的分区, 值为NULL表示表未被分区</strong></p></blockquote><p><strong>possible_keys</strong></p><blockquote><p><strong>可能会使用到的索引(ps.其实不太重要)</strong></p></blockquote><p><strong>重点关注的字段</strong><br><strong>type</strong></p><blockquote><p><strong>表示连接类型，查看索引执行情况的一个重要指标 以下性能从好到坏依次：system &gt; const &gt; eq_ref &gt; ref &gt;<br>ref_or_null &gt; index_merge &gt; unique_subquery &gt; index_subquery &gt; range &gt;<br>index &gt; ALL<br>system：这种类型要求数据库表中只有一条数据，是const类型的一个特例，一般情况下是不会出现的<br>const：通过一次索引就能找到数据，一般用于主键或唯一索引作为条件，这类扫描效率极高，速度非常快<br>eq_ref：常用于主键或唯一索引扫描，一般指使用主键的关联查询 ref : 常用于非主键和唯一索引扫描<br>ref_or_null：这种连接类型类似于ref，区别在于MySQL会额外搜索包含NULL值的行<br>index_merge：使用了索引合并优化方法，查询使用了两个以上的索引<br>unique_subquery：类似于eq_ref，条件用了in子查询<br>index_subquery：区别于unique_subquery，用于非唯一索引，可以返回重复值<br>range：常用于范围查询，比如：between … and 或 In 等操作 index：全索引扫描 ALL：全表扫描</strong></p></blockquote><p><strong>key</strong></p><blockquote><p><strong>实际使用到的索引</strong></p></blockquote><p><strong>key_len</strong></p><blockquote><p><strong>实际使用到的索引的长度</strong></p></blockquote><p><strong>rows</strong></p><blockquote><p><strong>该列表示MySQL估算找到我们所需的记录，需要读取的行数</strong></p></blockquote><p><strong>filtered</strong></p><blockquote><p><strong>该列是一个百分比，是满足条件的记录数量与我们查询了多少记录数量的比值</strong></p></blockquote><p><strong>extra</strong></p><blockquote><p><strong>该字段包含有关MySQL如何解析查询的其他信息，它一般会出现这几个值：<br>● Usingfilesort：表示按文件排序，一般是在指定的排序和索引排序不一致的情况才会出现，一般见于order by语句<br>● Using index：表示是否用了覆盖索引<br>● Using temporary: 表示是否使用了临时表,性能特别差，需要重点优化，一般多见于groupby语句，或者union语句<br>● Using where : 表示使用了where条件过滤<br>● Using index condition：MySQL5.6之后新增的索引下推，在存储引擎层进行数据过滤，而不是在服务层过滤，利用索引现有的数据减少回表的数据</strong></p></blockquote><h2 id="profile分析执行耗时"><a href="#profile分析执行耗时" class="headerlink" title="profile分析执行耗时"></a>profile分析执行耗时</h2><blockquote><p><strong>explain只是看到SQL预估的执行计划，如果要了解SQL真正的执行线程状态及消耗的时间，需要使用profiling，开启profiling参数后，后续执行的SQL语句都会记录其资源开销，包括IO，上下文切换，CPU，内存等等，可以根据这些开销进一步分析当前慢SQL的瓶颈再进一步进行优化</strong></p></blockquote><p><img src="https://img-blog.csdnimg.cn/c556a8c892074bc08daf7cac58ba8d5f.png" alt="在这里插入图片描述"></p><h2 id="Optimizer-Trace分析详情"><a href="#Optimizer-Trace分析详情" class="headerlink" title="Optimizer Trace分析详情"></a>Optimizer Trace分析详情</h2><blockquote><p><strong>profile只能查看到SQL的执行耗时，但无法看到SQL真正执行的过程信息，不知道MySQL优化器是如何选择执行计划，这时候，可以使用Optimizer<br>Trace，它可以跟踪执行语句的解析优化执行的全过程</strong></p></blockquote><p><img src="https://img-blog.csdnimg.cn/f1315716958849f9a15717c99201a7f0.png" alt="在这里插入图片描述"></p><p>三个阶段分为对应：准备阶段、分析阶段、执行阶段</p><h1 id="确定问题采用响应措施"><a href="#确定问题采用响应措施" class="headerlink" title="确定问题采用响应措施"></a>确定问题采用响应措施</h1><p>● 多数慢SQL都跟索引有关，比如不加索引，索引不生效、不合理等，这时候，可以优化索引<br>● 还可以优化SQL语句，比如一些in元素过多问题(分批)，深分页问题(基于上一次数据过滤等)，进行时间分段查询<br>● SQL没办法很好优化，可以改用ES的方式，或者数仓<br>● 如果单表数据量过大导致慢查询，可以考虑分库分表<br>● 如果数据库在刷脏页导致慢查询，考虑是否可以优化一些参数<br>● 如果存量数据量太大，考虑是否可以让部分数据归档</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> SQL优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>索引的学习与理解</title>
      <link href="/2022/10/02/suo-yin-de-xue-xi-yu-li-jie/"/>
      <url>/2022/10/02/suo-yin-de-xue-xi-yu-li-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="为什么使用索引"><a href="#为什么使用索引" class="headerlink" title="为什么使用索引"></a>为什么使用索引</h2><p>索引是存储引擎用于快速找到数据记录的一种数据结构。MySQL在进行数据查找时，首先查看查询条件是否命中某条索引，符合则<strong>通过索引查找</strong>相关数据，如果不符合则<strong>全表扫描</strong>，建索引目的就是为了<strong>减少磁盘I/O次数</strong>，加快查询效率。</p><h2 id="索引及其优缺点"><a href="#索引及其优缺点" class="headerlink" title="索引及其优缺点"></a>索引及其优缺点</h2><h3 id="索引概述"><a href="#索引概述" class="headerlink" title="索引概述"></a>索引概述</h3><blockquote><p><strong>索引本质</strong>：索引是数据结构。这些数据结构以某种方式指向数据，这样可以在这些数据结构的基础上实现高效查找算法。<br><strong>索引是在存储引擎实现的</strong>，因此每种存储引擎的索引不一定完全相同，并且每种存储引擎不一定支持所有类型的索引。同时存储引擎可以定义每个表的最大索引数和最大索引长度。所有存储引擎支持每个表至少16个索引，总索引长度至少为256字节。</p></blockquote><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><blockquote><p>1、提高数据检索的效率，降低数据库的I/O成本<br>2、通过创建唯一索引，可以保证数据库表中每一行数据的唯一性<br>3、可以加速表和表之间的连接。对于有依赖关系的子表和父表联合查询时，可以提高查询速度<br>4、在使用分组和排序子句进行数据查询时，可以显著减少查询中分组和排序的时间，降低CPU的消耗</p></blockquote><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><blockquote><p>1、创建索引和维护索引要耗费时间<br>2、索引需要占磁盘空间，存储在磁盘上<br>3、虽然索引大大提高了查询 速度，同时也会降低更新表的速度</p></blockquote><h2 id="InnoDB中的索引"><a href="#InnoDB中的索引" class="headerlink" title="InnoDB中的索引"></a>InnoDB中的索引</h2><h3 id="常见索引概念"><a href="#常见索引概念" class="headerlink" title="常见索引概念"></a>常见索引概念</h3><blockquote><p><strong>聚簇索引</strong> 并不是一种单独的索引类型，而是一种数据存储方式（所有的用户记录都存储在了叶子节点）。<br><strong>特点</strong><br>1、使用主键值的大小进行记录和页的排序<br>页内的记录是按照主键大小顺序排成一个单向链表<br>各个存放用户记录的页排序成一个双向链表<br>存放目录项的页也排成一个双向链表<br>2、B+树的叶子节点存储的是完整的用户记录<br><strong>优点</strong><br>数据访问更快，因为聚簇索引将索引和数据保存在同一个B+树中，因此从聚簇索引获取数据比非聚簇索引更快<br>聚簇索引对于主键的排序查找和范围查找更快<br>因为聚簇索引排列顺序，查询显示一定范围数据时不用从多个数据块中提取数据，节省了大量I/O操作<br><strong>缺点</strong><br>插入速度严重依赖插入顺序，按照主键的顺序插入是最快的方式，否则会出现页分裂，严重影响性能<br>更新主键的代价很高，因为将会导致被更新的行移动<br>二级索引需要两次索引查找</p></blockquote><blockquote><p><strong>非聚簇索引</strong>与聚簇索引的区别就是叶子节点放的是主键</p></blockquote><h2 id="索引的代价"><a href="#索引的代价" class="headerlink" title="索引的代价"></a>索引的代价</h2><blockquote><p><strong>空间上的代价</strong><br>每建立一颗B+树，每一颗B+树的每一个节点都是一个数据页，一个页默认占用16kb的存储空间，一颗很大的B+树由许多数据页组成<br><strong>时间上的代价</strong><br>每次对表中数据进行<strong>增删改</strong>操作时，都需要去修改各个B+树索引</p></blockquote><h2 id="索引的声明与使用"><a href="#索引的声明与使用" class="headerlink" title="索引的声明与使用"></a>索引的声明与使用</h2><h3 id="索引的分类"><a href="#索引的分类" class="headerlink" title="索引的分类"></a>索引的分类</h3><blockquote><p>从<strong>功能逻辑</strong>分为普通索引、唯一索引、主键索引、全文索引<br>从<strong>物理实现</strong>方式分聚簇索引和非聚簇索引<br>从<strong>作用字段个数</strong>分单列索引和联合索引</p></blockquote><blockquote><p><strong>普通索引</strong><br>在创建索引时，不附加任何限制条件，只是用于提高查询效率。这类索引可以创建在任何数据类型</p></blockquote><blockquote><p><strong>唯一索引</strong><br>使用UNIQUE参数可以设置唯一性索引，在创建唯一性索引时限制该索引的值必须是唯一的，但允许有空值。一张数据表里可以有多个唯一索引</p></blockquote><blockquote><p><strong>主键索引</strong><br>主键索引就是一种特殊的唯一性索引，不能为空且最多只有一个主键索引</p></blockquote><blockquote><p><strong>单列索引</strong><br>在单个字段创建索引</p></blockquote><blockquote><p><strong>多列索引</strong><br>多个字段组合上创建一个索引，使用组合索引时需要遵循<strong>最左前缀集合</strong></p></blockquote><blockquote><p><strong>全文索引</strong><br>利用分词技术等多种算法智能分析出文本文字中关键词的频率和重要性，然后按照一定的算法智能的筛选出我们想要的搜索结果。全文索引适合大型数据集，对于小的数据集，用处不大。<br>使用参数FULLTEXT设置全文索引</p></blockquote><h3 id="索引的创建"><a href="#索引的创建" class="headerlink" title="索引的创建"></a>索引的创建</h3><blockquote><p>查看索引<br>show create table 表名；<br>show index from 表名；</p></blockquote><blockquote><p>在<strong>创建表的定义语句</strong>中指定索引列，使用<strong>alter table</strong>语句或者<strong>create index</strong></p></blockquote><blockquote><p><strong>创建表时</strong><br><strong>隐式创建索引</strong><br>添加约束的时候自动创建<br><strong>显示创建索引</strong><br>create table table_name(<br>name varchar(30),<br>[unique | fulltext | spatial] [index | key] (col_name [length]) [asc | desc])<br><strong>alter table</strong><br>alter table 表名 add index 索引名(字段名)<br><strong>create index</strong><br>create index 索引名 on 表名(字段名)</p></blockquote><h3 id="索引的删除"><a href="#索引的删除" class="headerlink" title="索引的删除"></a>索引的删除</h3><blockquote><p>alter table .. drop index …<br>drop index … on table_name</p></blockquote><h2 id="索引的设计原则"><a href="#索引的设计原则" class="headerlink" title="索引的设计原则"></a>索引的设计原则</h2><blockquote><p>1.针对数据量较大,且查询比较频繁的表建立索引<br>2.针对于常作为查询条件(where)、排序(order by)、分组(group by)操作的字段建立索引<br>3.尽量选择区分度高的列作为索引,尽量建立唯一索引,区分度越高,使用索引的效率越高<br>4.如果是字符串类型的字段,字段的长度较长,可以针对字段的特点建立前缀索引<br>5.尽量使用联合索引,减少单列索引,查询时,联合索引很多时候可以覆盖索引,节省存储空间,避免回表,提高查询效率<br>6.要控制索引的数量,索引并不是多多益善,索引越多,维护索引结构的代价也就越大,会影响增删改的效率<br>7.如果索引列不能存储NULL值,请在创建表时使用NOT NULL约束它.当优化器知道每列是否包含NULL值时,它可以更好的确定那个索引最有效的用于查询</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> 索引 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis持久化</title>
      <link href="/2022/10/01/redis-chi-jiu-hua/"/>
      <url>/2022/10/01/redis-chi-jiu-hua/</url>
      
        <content type="html"><![CDATA[<h2 id="Redis如何实现数据不丢失"><a href="#Redis如何实现数据不丢失" class="headerlink" title="Redis如何实现数据不丢失"></a>Redis如何实现数据不丢失</h2><p>Redis的读写操作都是在内存中，所以Redis性能才会高，但是当Redis重启后，内存中的数据就会丢失，那为了保存内存中的数据不会丢失，Redis实现了数据持久化机制，会把数据保存到磁盘，这样Redis重启就能够从磁盘恢复原有的数据</p><p>Redis提供了三种数据持久化方式</p><blockquote><p><strong>AOF日志</strong>：每执行一条写操作命令就把该命令以追加的方式写入一个文件里<br><strong>RDB快照</strong>：将某一时刻的内存数据以二进制的方式写入磁盘<br><strong>混合持久化</strong>：集成了AOF与RDB的优点</p></blockquote><h2 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h2><p><strong>AOF步骤</strong><br>Redis在执行完一条命令后就会把该命令以追加的方式写到一个文件，然后Redis重启时，会读取该命令然后逐一执行命令的方式来进行数据恢复</p><p><img src="https://img-blog.csdnimg.cn/134afa3dbfc347a0aeea66e5c560e653.png" alt="在这里插入图片描述"></p><blockquote><p><strong>why先执行命令后写入磁盘？</strong></p></blockquote><p>避免额外的检查开销：因为如果先将写操作记录到AOF日志中，再执行该命令的话，如果当前命令有问题如果不检查的话，Redis使用该命令进行恢复的时候就可能会出错<br>不会阻塞当前写操作命令的执行：因为是在当前线程的写操作之后</p><ul><li>数据可能会丢失：当前线程执行完命令而还没有写入磁盘时就宕机了</li><li>可能阻塞其它操作：因为记录AOF日志也是在主线程中执行，所以当Redis把日志写入磁盘时会阻塞后续的命令</li></ul><p><strong>AOF的写回策略</strong></p><blockquote><p><strong>Always</strong>：每次写操作命令都会执行完后，同步AOF日志数据写回硬盘<br><strong>Everysec</strong>：每次写操作命令执行完后，先写入AOF日志缓冲区，每秒写回磁盘<br><strong>No</strong>：不由Redis控制写回磁盘，每次都写入AOF日志缓冲区，再由操作系统决定何时写回磁盘</p></blockquote><p><img src="https://img-blog.csdnimg.cn/27c09236c66d461ea1e16e0aebb80d61.png" alt="在这里插入图片描述"></p><p><strong>AOF日志文件过大怎么办?</strong></p><p>AOF日志是一个文件，随着写命令的执行，文件会越来越大，如果文件过大就会带来性能问题，比如AOF恢复中执行的命令就会很多就会导致恢复过程很慢<br>所以Redis提供了AOF重写机制，当AOF文件大小超过设定的阈值时AOF就会启用重写机制来压缩AOF文件，比如set name lixiaobo 与set name lidabo 就会设置为一条指令set name lidabo</p><p><strong>重写AOF日志过程</strong></p><p>Redis的重写AOF过程是由后台子进程bgwriteaof来完成的，这么做的好处：</p><blockquote><p> 1、子进程进行AOF重写期间，主进程可以继续处理命令请求，从而避免阻塞主进程<br>2、子进程带有父进程的数据副本，之所以不使用多线程是因为多线程会共享内存那么修改时候就需要加锁来保证数据安全而这样就会降低性能。而使用子进程，创建子进程时候父子进程是共享内存数据，而当父子进程任意一方修改就会发生写时复制</p></blockquote><p>触发重写机制后，主进程会创建重写AOF的子进程，此时子进程只会对这个内存进行只读，重写AOF子进程会读取所有指令，并逐一把内存数据的键值对转换成另一条命令，再将命令记录到重写日志(新的AOF文件)<br>但是重写过程中，主进程依然可以正常处理命令，所以就出现了问题，如果主进程修改了已经存在的key-value，那么就会发生写时复制，此时这个key-value数据在子进程的内存数据就与主进程的内存数据不一样了<br>为了解决这种数据不一致，Redis设置了一个<strong>AOF重写缓冲区</strong>，这个缓冲区在创建bgwriteaof子进程之后开始使用<br>在重写AOF期间，当Redis执行完一个写命令之后，它会同时把这个写命令放入AOF缓冲区与AOF<strong>重写缓冲区</strong><br>也就是说在bgwriteaof期间，主进程需要执行三个工作</p><blockquote><p> 1、 执行客户端发来的命令<br> 2、将执行后的命令写入AOF缓冲区<br> 3、将执行后的命令写入AOF重写缓冲区</p></blockquote><p>当子进程重写完成之后会向主进程发送一条信号，信号是进程间通信的一种方式<br>主进程收到该信号后，会调用一个信号处理函数</p><blockquote><p>1、将AOF重写缓冲区中的所有内容追加到新的AOF文件中，使得新旧两个AOF所保存的数据一致<br>2、新的AOF的文件进行改名，覆盖现有的AOF文件</p></blockquote><p><img src="https://img-blog.csdnimg.cn/442937bc9f6b4b3fad68ff93403d1349.png" alt="在这里插入图片描述"></p><h2 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h2><p>RDB记录的是某一个瞬间的内存数据，记录的是实际数据，因此在数据恢复时，RDB恢复数据的效率比AOF高些</p><p><strong>如何进行RDB</strong></p><p>redis提供了两个命令来执行RDB</p><blockquote><p><strong>save</strong>：执行save会在主线程生成RDB文件，所以会阻塞主线程<br><strong>bgsave</strong>：创建一个子进程来生成RDB文件，避免阻塞主线程</p></blockquote><p>Redis的快照是全量快照，也就是每次执行快照都会把内存中的数据都记录到磁盘，所以这是一个比较重的操作</p><p><strong>RDB执行快照时候数据能修改？</strong></p><p>可以修改，在执行bgsave过程，Redis依旧可以继续处理操作命令，也就是数据是能被修改，关键技术还是写时复制</p><h2 id="混合持久化"><a href="#混合持久化" class="headerlink" title="混合持久化"></a>混合持久化</h2><p><strong>混合持久化步骤</strong></p><p>AOF的优点是丢失数据少，但是数据恢复慢，而RDB是优点是恢复速度快而快照的频率不好把握，如果频率过低，数据丢失的量就比较多，如果频率高就会影响性能<br>所以退出了混合持久化集成两者优点，在AOF重写日志时，fork出来的子进程会把当前主线程共享的内存数据以RDB方式写入到AOF文件，然后主线程处理的命令被记录到重写缓冲区中，重写缓冲区中的命令会以追加AOF的形式存在AOF日志中</p><p><img src="https://img-blog.csdnimg.cn/225c19b532ba4bf886564bfdd8e05a24.png" alt="在这里插入图片描述"></p><p>混合持久化的优缺点<br><strong>优点</strong><br>集成了AOF与RDB的优点<br><strong>缺点</strong><br>文件可读性变差</p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 持久化 </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TCP详解</title>
      <link href="/2022/07/10/tcp-xiang-jie/"/>
      <url>/2022/07/10/tcp-xiang-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="TCP概述"><a href="#TCP概述" class="headerlink" title="TCP概述"></a>TCP概述</h2><blockquote><p>TCP是一种面向连接的协议，在发送数据前通信双方必须在彼此间建立一条连接<br>所谓的连接其实就是客户端和服务器的内存里保存一份关于对方的信息，如IP地址、端口<br>TCP是一种字节流，它会处理IP层的丢包、重复以及错误问题<br>在建立连接的过程中，双方交换的一些参数可以放到TCP的头部<br><br><br><strong>总结</strong> ：TCP提供了一种可靠、面向连接、字节流、传输层的服务，采用三次握手建立一个连接，四次挥手关闭一个连接</p></blockquote><h2 id="TCP报文格式"><a href="#TCP报文格式" class="headerlink" title="TCP报文格式"></a>TCP报文格式</h2><p><img src="https://img-blog.csdnimg.cn/6d88c41f3f2844c689c758bfebf8ad91.png" alt="在这里插入图片描述"></p><blockquote><p>源端口、目的端口：发送方和接收方的端口号<br>序号：TCP连接中的字节流都有编号。如果101开始，传送了100个字节，那么下次就是从201开始<br>确认序号：接送方发给发送方下次需要的字节序号<br>首部长度：就是TCP首部的长度，记录了TCP报文数据到TCP报文段开始的距离<br>保留：留待以后使用<br>URG：紧急字段 1-代表有紧急数据 0-代表没有<br>ACK：在TCP报文段中，字段ACK=1时，确认号字段才有效。TCP规定，在连接建立后所有传送的报文段都必须把ACK置1<br>PSH：当两个应用在进行交互时，如果想要立马得到对方的回复就PSH设置为1<br>RST：RST为1时代表需要重新建立连接<br>SYN：在连接建立时用来同步序号。当SYN=1，ACK=0，表明是连接请求报文，若同意连接，则响应报文中应该使SYN=1，ACK=1；<br>FIN：用来释放连接；当FIN=1时代表终止连接<br>窗口大小：用来进行流量控制<br>校验和：对整个TCP报文段进行校验和计算，由目标端进行校验<br>紧急指针：记录一个偏移量，指向紧急数据的最后一位（也可以是紧急数据的下一位，两者都是标准），在读取到紧急指针所指向的位置之前，TCP的接受进程都处于紧急状态，当读取到紧急数据后一位时，回复到正常状态。</p></blockquote><h2 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h2><p><img src="https://img-blog.csdnimg.cn/37c4b1312b664a1db07bc41d73a744d7.png" alt="在这里插入图片描述"></p><h2 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h2><p><img src="https://img-blog.csdnimg.cn/f5e97c195559437d9838abfd54b5ffb3.png" alt="在这里插入图片描述"></p><h2 id="流量控制"><a href="#流量控制" class="headerlink" title="流量控制"></a>流量控制</h2><blockquote><p>如果发送者发送数据过快，接收者来不及接收，那么就会有分组丢失。为了避免分组丢失，控制发送者的发送速度，使得接收者来得及接收，这就是流量控制。流量控制根本目的是防止分组丢失，它是构成TCP可靠性的一方面<br><br><br>流量控制主要是用滑动窗口实现<br>发送窗口 = 1，接收窗口 = 1 停止等待<br>发送窗口 &gt; 1，接收窗口 = 1 回退N帧协议<br>发送窗口 &gt; 1，接收窗口 &gt; 1 选择重传协议</p></blockquote><blockquote><p><strong>停止协议</strong><br>发送方必须受到接收方返回回来的ACK数据包才能继续发送下一个不然就超时重传<br>性能较差一次只能发送一个<br><strong>没有问题</strong><br><img src="https://img-blog.csdnimg.cn/2feb827ef1644264993505337918b90c.png" alt="在这里插入图片描述"><br><strong>出现问题</strong><br><img src="https://img-blog.csdnimg.cn/ba562a4b9a324146a4e98e95896ffa75.png" alt="在这里插入图片描述"></p></blockquote><blockquote><p><strong>回退N帧协议</strong><br>发送窗口<br>新的分组落入发送缓冲区，发送-&gt;前沿移动<br>超时重发机制让发送端将发送窗口中的所有方法发送出去<br>接收窗口<br>收到乱序分组，没有落入到接收窗口范围，抛弃<br>发送老分组的确认，累计确认</p></blockquote><blockquote><p><strong>选择重传协议</strong><br>发送窗口<br>新的分组落入发送区域缓冲区范围，发送-&gt;前沿移动<br>超时重发机制让发送端将超时的分组重新发送出去<br>来了乱序分组的确认-&gt;后沿不向前移动-&gt;新的分组无法落入发送缓冲区的范围<br>接收窗口<br>收到乱序分组，落入到接收窗口范围，接收<br>收到该分组的确认，单独确认</p></blockquote><h2 id="拥塞控制"><a href="#拥塞控制" class="headerlink" title="拥塞控制"></a>拥塞控制</h2><blockquote><p>在某段时间内，若对网络中某一资源的需求超过了该资源所能提供的可用部分，网络的性能就要变坏。这种情况就叫拥塞控制。拥塞控制就是为了防止过多的数据注入到网络中，这样就可以使网络中的路由器或链路不致过载。拥塞控制所要做的都有一个前提，就是网络能够承受现有的网络负荷。<strong>拥塞控制是一个全局性的过程，涉及到所有的主机，所有的路由器以及与降低网络传输有关的因素。相反，流量控制往往是控制点对点的通信量，是个端到端的问题。流量控制所要做到的就是抑制发送端发送数据的速率，以便于接收方来得及接收</strong></p></blockquote><p><img src="https://img-blog.csdnimg.cn/c0f46ea208e1440bb6777e8d60a10fb3.png" alt="在这里插入图片描述"></p><blockquote><p><strong>慢开始</strong><br><br><br>拥塞窗口和接收窗口共同决定的发送窗口<br>当主机开始发送数据时，如果把大量数据字节注入到网络中，那么会引起网络阻塞，因为现在不知道网络的负荷情况<br>所有较好的办法就是先探测一下，即由小到大逐渐增大发送窗口，也就是由小到大逐渐增大拥塞窗口数值。cwnd初始值为1，每经过一个传播轮次，cwnd加倍<br><br><br>如果不对cwnd限制马上就会导致cwnd膨胀所有就有一个慢启动阈值ssthresh<br>如果cwnd &gt; ssthresh 就用拥塞避免<br>如果cwnd &lt; ssthresh 就用慢开始</p></blockquote><blockquote><p><strong>拥塞避免</strong><br><br><br>拥塞避免算法的思路是让拥塞窗口 cwnd 缓慢增大，即每经过一个往返时间 RTT 就把发送放的 cwnd 加 1<br><br><br>不论是慢开始还是拥塞避免只要网络出现拥塞（没有按时到达）时，就把ssthresh的值置为出现拥塞时的拥塞窗口的一半（但不能小于2），以及cwnd置为1，进行慢开始。 目的是迅速减少主机发送到网络中的分组数，使得发生 拥塞的路由器有足够时间把队列中积压的分组处理完毕。</p></blockquote><blockquote><p><strong>快重传与快恢复</strong><br>快重传详情看 重传机制-快速重传<br><br><br><strong>快速恢复</strong><br>当发送方连续收到三个重复确认，就执行”乘法减小”算法，把慢开始门限<strong>ssthresh减半</strong>。然后立即重传丢失报文段，并将<strong>cwnd设置为新的ssthresh</strong>然后进行<strong>拥塞避免算法</strong></p></blockquote><h2 id="重传机制"><a href="#重传机制" class="headerlink" title="重传机制"></a>重传机制</h2><h3 id="超时重传"><a href="#超时重传" class="headerlink" title="超时重传"></a>超时重传</h3><blockquote><p><strong>RTT</strong>：往返时间（发送方发给服务方然后发送方收到服务方应答的时间）<br><strong>RTO</strong>：超时重传时间</p></blockquote><blockquote><p>在发送数据包时就开启一个定时器，如果定时器超时了还没有收到ACK就发起重传，如果收到了ACK就发送数据包再重置定时器<br><br><br>超时重传发生情况：<br>    1、数据包丢失<br>2、确认应答丢失<br><br><br>RTO时间设置<br>1、RTO 较大时：重发就慢，丢了过后很久才发，效率低<br>2、RTO 较小时：可能没有丢失，但是RTO到了就重发，导致网络拥塞，导致更多的超时，导致更多的重发<br>所有RTO应略大于RTT</p></blockquote><h3 id="快速重传"><a href="#快速重传" class="headerlink" title="快速重传"></a>快速重传</h3><blockquote><p>快速重传的工作方式是当收到三个相同的 ACK 报文时，会在定时器过期之前，重传丢失的报文段。<br>为什么是三次冗余ACK<br>通过大量经验表明三次比较合适</p></blockquote><h2 id="为什么不进行两次握手"><a href="#为什么不进行两次握手" class="headerlink" title="为什么不进行两次握手"></a>为什么不进行两次握手</h2><blockquote><p>1、确认双方的接收与发送能力是否正常<br>第一次握手：客户端发送网络包，服务端收到了。服务端：客户端的发送能力、服务端的接收能力正常<br>第二次握手：服务端发包，客户端收到了。客户端：服务的发送能力、服务端的接收能力、客户端的接收能力、发送能力正常<br>第三次握手：客户端发包，服务端收到了。服务端：服务端的发送能力，客户端的接收能力正常<br>2、防止已经失效的连接请求报文突然又传送到了服务器，从而产生错误<br>如果客户端发出连接请求，因连接请求报文丢失而未收到确认，于是客户端再重传一次连接请求。后来收到了确认，建立了连接。数据传输完毕后释放连接，客户端发出了两个连接请求报文段，其中一个丢失了，第二个到达了服务端，但是第一个丢失的报文段有可能只是由于某些网络节点长时间滞留了，延误到连接释放以后的某个节点，此时服务端认为是客户端又发出一次请求，于是就向客户端发出确认报文段，同意建立连接，不采用三次握手，只要服务端发出确认就建立了新的连接，此时客户端忽略服务端发来的确认，也不发送数据，则服务端一致等待客户端发送数据，浪费资源</p></blockquote><h2 id="为什么关闭连接时客户端会等待2MSL"><a href="#为什么关闭连接时客户端会等待2MSL" class="headerlink" title="为什么关闭连接时客户端会等待2MSL"></a>为什么关闭连接时客户端会等待2MSL</h2><blockquote><p>MSL：报文段最大存活时间<br>1、为了保证客户端发送的最后一个ACK报文能够到达服务器，因为在这个ACK报文可能丢失，站在服务器的角度看来，我已经发送了FIN+ACK报文请求断开了，客户端没有给我回应，应该是我发送的请求断开报文它没有收到，于是服务器又会重新发送一次，而客户端就能在这个2MSL时间段内收到这个重传的报文，接着给出回应报文，并且重启2MSL计时器<br>2、防止类似与”三次握手中提到了”已经失效的请求报文段”出现在本连接中。客户端发送完最后一个确认报文后，在这个2MSL时间中，就可以使本连接持续的时间内所产生的所有报文段都从网络中消失。这样新的连接中就不会出现旧连接的请求报文</p></blockquote><h2 id="建立连接后客户端出现故障怎么办"><a href="#建立连接后客户端出现故障怎么办" class="headerlink" title="建立连接后客户端出现故障怎么办"></a>建立连接后客户端出现故障怎么办</h2><blockquote><p>TCP设有一个保活计时器，当客户端出现故障时，服务器不能一直等待下去，白白浪费资源。服务器每收到一个客户端的请求后都会复位这个计时器，时间通常设置为2小时，若超时后还没有收到客户端的任何数据，服务器就会发送一个探测报文段，以后每隔75s发送一次。若一连发送10个探测报文仍然没有反应，服务器就认为客户端出了故障，接着就关闭连接</p></blockquote><h2 id="TCP黏包与粘包问题"><a href="#TCP黏包与粘包问题" class="headerlink" title="TCP黏包与粘包问题"></a>TCP黏包与粘包问题</h2><h3 id="什么是黏包与粘包"><a href="#什么是黏包与粘包" class="headerlink" title="什么是黏包与粘包"></a>什么是黏包与粘包</h3><blockquote><p>TCP传输的是字节流，所谓流，就是发送的是一连串的数据，没有界限。TCP底层不会解析具体的数据内容，它会根据缓冲区的实际情况进行包的划分（发送和接收），由此会导致上层业务的一个完整的包被拆分成多个包进行发送（“拆包”），或者多个小包被封装成一个大的数据包进行发送（“粘包”），这就是所谓的TCP的拆包和粘包问题。</p></blockquote><h3 id="如何解决"><a href="#如何解决" class="headerlink" title="如何解决"></a>如何解决</h3><blockquote><p>1、固定应用层发送消息的长度，如果不够就补充空格<br>2、在包尾添加回车换行符进行分割<br>3、将消息分为消息头与消息体，消息头中包含长度<br>4、更复杂的应用层协议</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 计网 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> TCP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态代理</title>
      <link href="/2022/06/03/dong-tai-dai-li/"/>
      <url>/2022/06/03/dong-tai-dai-li/</url>
      
        <content type="html"><![CDATA[<h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><p>代理类在程序运行时创建的代理方式被称为动态代理<br> 静态代理中，代理类是自己定义好的，在程序运行之前就已经编译完成。然而动态代理，代理类并不是在Java代码中定义的，而是运行时根据我们在Java代码中的指示动态生成的。<strong>相比较静态代理，动态代理的优势在于可以很方便的对代理类的函数进行统一的处理，而不用修改每个代理类中的方法</strong>，比如想要在每个代理方法前都加上一个处理方法，静态代理就需要在每个类内部加上这个方法</p><h3 id="静态代理与动态代理的区别"><a href="#静态代理与动态代理的区别" class="headerlink" title="静态代理与动态代理的区别"></a>静态代理与动态代理的区别</h3><p> <strong>静态代理</strong></p><blockquote><p><strong>优点</strong><br>简单、效率高、容易理解<br><strong>缺点</strong><br>当目标类增多，代理类也需要增加<br>当接口方法增加或修改的时候，很多类都需要修改，因为目标类和代理类都实现了相同的接口</p></blockquote><p><strong>动态代理</strong></p><blockquote><p><strong>优点</strong><br>动态代理中的目标类很多的时候代理类的数量可以很少<br>修改接口的方法的时候不会影响到代理类<br>代理类可以自动帮助我们生成无需手动</p></blockquote><h2 id="JDK动态代理"><a href="#JDK动态代理" class="headerlink" title="JDK动态代理"></a>JDK动态代理</h2><blockquote><p>JDK动态代理是基于反射机制，生成一个实现代理接口的匿名类，然后重写方法进行方法增强。在调用具体方法前通过调用InvokeHandler的invoke方法来处理。<br>他的特点是生成代理类的速度很快，但是运行时调用方法操作会比较慢，因为是基于反射机制的，而且只能针对接口编程，即目标对象要实现接口</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">implements</span> <span class="token class-name">Person</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hi 我是一名学生"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JDKProxy</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Object target<span class="token punctuation">;</span>    <span class="token keyword">public</span> Object <span class="token function">newProxy</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> obj<span class="token punctuation">;</span>        <span class="token keyword">return</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你好"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object invoke <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"再见"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> invoke<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JDKTest</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Person proxy <span class="token operator">=</span> <span class="token punctuation">(</span>Person<span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">JDKProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newProxy</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        proxy<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://img-blog.csdnimg.cn/a005188a94fc450892ddf3c0d5592a00.png" alt="在这里插入图片描述"></p><h2 id="CGLIB动态代理"><a href="#CGLIB动态代理" class="headerlink" title="CGLIB动态代理"></a>CGLIB动态代理</h2><blockquote><p>Cglib（Code Generation Library）是一个强大的，高性能，高质量的Code生成类库，它是开源的。动态代理是利用 asm 开源包，将目标对象类的 class 文件加载进来，然后修改其字节码生成新的子类来进行扩展处理</p></blockquote><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>cglib<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>cglib<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.3.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hi 我是一名学生"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CglibProxy</span> <span class="token keyword">implements</span> <span class="token class-name">MethodInterceptor</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Object target<span class="token punctuation">;</span>    <span class="token keyword">public</span> Object <span class="token function">newProxy</span><span class="token punctuation">(</span>Object target<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 增强器</span>        Enhancer enhancer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Enhancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        enhancer<span class="token punctuation">.</span><span class="token function">setCallback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        enhancer<span class="token punctuation">.</span><span class="token function">setSuperclass</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> enhancer<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     *     * @param o 生成代理类的实例     * @param method 上文实体类所调用的被代理的方法引用     * @param objects 方法列表参数     * @param methodProxy 生成代理类对方法的引用     * @return     * @throws Throwable     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">intercept</span><span class="token punctuation">(</span>Object o<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> objects<span class="token punctuation">,</span> MethodProxy methodProxy<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你好"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object invoke <span class="token operator">=</span> methodProxy<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> objects<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"再见"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> invoke<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CglibTest</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        CglibProxy proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CglibProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Student student <span class="token operator">=</span> <span class="token punctuation">(</span>Student<span class="token punctuation">)</span> proxy<span class="token punctuation">.</span><span class="token function">newProxy</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        student<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://img-blog.csdnimg.cn/e07ec90cf73f4847bbe26f4a60429c2e.png" alt="在这里插入图片描述"></p><h2 id="两种代理方式的区别"><a href="#两种代理方式的区别" class="headerlink" title="两种代理方式的区别"></a>两种代理方式的区别</h2><blockquote><p>JDK动态代理是基于<strong>反射机制</strong>，生成一个实现了接口继承了proxy类的匿名类而Cglib动态代理是基于<strong>继承机制</strong>，继承被代理类，底层是基于asm第三方框架对代理对象类的class文件加载进来，通过修改其字节码生成子类来处理<br><strong>JDK</strong>动态代理<strong>生成类的速度快</strong>，后续执行类的<strong>方法操作慢</strong>而<strong>Cglib</strong>代理是<strong>生成类的速度慢</strong>，后续执行类的<strong>方法操作快</strong></p></blockquote><blockquote><p><strong>为什么JDK生成快，执行慢而Cglib与之相反</strong><br><br><br>JDK动态代理通过会拦截方法，通过反射获取模板接口名字、内部方法以及参数，拼接生成一个新的Java代理对象<br>生成的代理对象不能直接调用被代理对象的方法，而是通过反射所有每次都得用反射调用一次所以执行方法都需要通过反射<br><br><br>Cglib代理实际上通过继承，生成一个子类，就是将代理对象类的class文件加载进来，通过修改其字节码生成子类来处理，生成类的速度慢但是后续执行时候就很快</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> 动态代理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序算法</title>
      <link href="/2022/05/20/pai-xu-suan-fa/"/>
      <url>/2022/05/20/pai-xu-suan-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p><img src="https://img-blog.csdnimg.cn/145866746f6f4a6ab7348bed9c731daa.gif" alt="在这里插入图片描述"></p><blockquote><p><strong>平均时间复杂度：</strong> o(n^2)<br><strong>最好时间：</strong> o(n)<br><strong>最坏时间：</strong> o(n^2)<br><strong>空间复杂度：</strong> o(1)<br><strong>是否稳定：</strong> 稳定</p></blockquote><p><strong>简单的冒泡排序</strong></p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>len <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> nums<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> len<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token keyword">int</span> temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    nums<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="冒泡排序的优化"><a href="#冒泡排序的优化" class="headerlink" title="冒泡排序的优化"></a>冒泡排序的优化</h3><p><strong>设置标志位</strong></p><blockquote><p>设置一个标志位来标识这次遍历是否进行过交换<br>如果没有进行过交换则表示数组已经有序，直接退出</p></blockquote><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">binarySort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>len <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> nums<span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">boolean</span> isSort <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//是否有序</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> len<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token keyword">int</span> temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    nums<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>                    isSort <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>isSort<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>设置结束位置</strong></p><blockquote><p>比如初始数组为[4,3,2,1,5,6]<br>经过第一次排序后数组变为[3,2,1,4,5,6]<br>如果按照普通冒泡排序下次需要遍历的下标范围为[0,4]<br>但是[3,4]是已经有序的，所以可以减少比较，保存上次交换的结束位置</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>len <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token keyword">int</span> max_index <span class="token operator">=</span> len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> index <span class="token operator">=</span> max_index<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> isSort <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//是否有序</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> index<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                nums<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>                isSort <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                max_index<span class="token operator">=</span>j<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>isSort<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        index <span class="token operator">=</span> max_index<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>双向冒泡排序</strong></p><blockquote><p>与设置结束位置类似，这个是也设置了起始位置<br>使得在left之前的都是已经排好序的</p></blockquote><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>len <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> nums<span class="token punctuation">;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> tleft <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>tright <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">boolean</span> isSort <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> left<span class="token punctuation">;</span>i <span class="token operator">&lt;</span> right<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token keyword">int</span> temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                    nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    nums<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>                    isSort <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    tright <span class="token operator">=</span> i<span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>isSort<span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span>            right <span class="token operator">=</span> tright<span class="token punctuation">;</span>            isSort <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> right<span class="token punctuation">;</span>i <span class="token operator">></span> left<span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token keyword">int</span> temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                    nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>                    isSort <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    tleft <span class="token operator">=</span> i<span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>isSort<span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span>            left <span class="token operator">=</span> tleft<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><p><img src="https://img-blog.csdnimg.cn/fd3b383f48e74e8e86067846af27c12b.gif" alt="在这里插入图片描述"></p><blockquote><p><strong>平均时间复杂度：</strong> o(n^2)<br><strong>最好时间：</strong> o(n^2)<br><strong>最坏时间：</strong> o(n^2)<br><strong>空间复杂度：</strong> o(1)<br><strong>是否稳定：</strong> 不稳定</p></blockquote><p><strong>选择排序</strong></p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">selectSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>len <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> nums<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> minIndex <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span>j <span class="token operator">&lt;</span> len<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    minIndex <span class="token operator">=</span> j<span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> t <span class="token operator">=</span> nums<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>            nums<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><p><img src="https://img-blog.csdnimg.cn/7a7a54d942f74bfdb4b0629173d24c0c.gif" alt="在这里插入图片描述"></p><blockquote><p><strong>平均时间复杂度：</strong> o(n^2)<br><strong>最好时间：</strong> o(n)<br><strong>最坏时间：</strong> o(n^2)<br><strong>空间复杂度：</strong> o(1)<br><strong>是否稳定：</strong> 稳定</p></blockquote><p><strong>插入排序</strong></p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">insertSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>len <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> nums<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> cur <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> preIndex <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>preIndex <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>preIndex<span class="token punctuation">]</span> <span class="token operator">></span> cur<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                nums<span class="token punctuation">[</span>preIndex<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>preIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>                preIndex<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            nums<span class="token punctuation">[</span>preIndex<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> cur<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p><img src="https://img-blog.csdnimg.cn/e34b13dd820448efb8f6664e5b1192dd.gif" alt="在这里插入图片描述"></p><blockquote><p><strong>平均时间复杂度：</strong> o(nlogn)<br><strong>最好时间：</strong> o(nlogn)<br><strong>最坏时间：</strong> o(n^2)<br><strong>空间复杂度：</strong> o(logn)<br><strong>是否稳定：</strong> 不稳定</p></blockquote><p><strong>快速排序</strong></p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span><span class="token keyword">int</span> left<span class="token punctuation">,</span><span class="token keyword">int</span> right<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>left <span class="token operator">>=</span> right<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>       <span class="token keyword">int</span> l <span class="token operator">=</span> left <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>       <span class="token keyword">int</span> r <span class="token operator">=</span> right <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>       <span class="token keyword">int</span> t <span class="token operator">=</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token keyword">while</span><span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>           <span class="token keyword">do</span> l<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">&lt;</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">do</span> r<span class="token operator">--</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">></span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>               <span class="token keyword">int</span> temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>               nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">;</span>               nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>           <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>       <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token function">quickSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>left<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token function">quickSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><p><img src="https://img-blog.csdnimg.cn/73d0a113dfc94817850eb68e93437e94.gif" alt="在这里插入图片描述"></p><blockquote><p><strong>平均时间复杂度：</strong> o(nlogn)<br><strong>最好时间：</strong> o(nlogn)<br><strong>最坏时间：</strong> o(nlogn)<br><strong>空间复杂度：</strong> o(n)<br><strong>是否稳定：</strong> 稳定</p></blockquote><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span><span class="token keyword">int</span> left<span class="token punctuation">,</span><span class="token keyword">int</span> right<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>left <span class="token operator">>=</span> right<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> right <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token function">mergeSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>left<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">mergeSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//需要合并 [left,mid] [mid+1,right]</span>        <span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>right<span class="token operator">-</span>left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> l <span class="token operator">=</span> left<span class="token punctuation">,</span>r <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>l <span class="token operator">&lt;=</span> mid <span class="token operator">&amp;&amp;</span> r <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span> temp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>l<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> temp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>r<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>l <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> temp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>l<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>r <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> temp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>r<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> right<span class="token punctuation">;</span>i <span class="token operator">>=</span> left<span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">[</span><span class="token operator">--</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><p><img src="https://img-blog.csdnimg.cn/22b96ad4c2174e4e8f6bfc5f47cecd6a.gif" alt="在这里插入图片描述"></p><blockquote><p><strong>平均时间复杂度：</strong> o(nlogn)<br><strong>最好时间：</strong> o(nlogn)<br><strong>最坏时间：</strong> o(nlogn)<br><strong>空间复杂度：</strong> o(1)<br><strong>是否稳定：</strong> 不稳定</p></blockquote><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">heapSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>len <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//构造大根堆</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token punctuation">(</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">>=</span><span class="token number">0</span> <span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">heap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>i<span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将根弄到最后</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> t <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span>            <span class="token function">heap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//子树构建大顶堆</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">heap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span><span class="token keyword">int</span> index<span class="token punctuation">,</span><span class="token keyword">int</span> size<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> max <span class="token operator">=</span> index<span class="token punctuation">;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> index <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>left <span class="token operator">&lt;</span> size <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>max<span class="token punctuation">]</span><span class="token punctuation">)</span> max <span class="token operator">=</span> left<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>right <span class="token operator">&lt;</span> size <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>max<span class="token punctuation">]</span><span class="token punctuation">)</span> max <span class="token operator">=</span> right<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>max <span class="token operator">!=</span> index<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> t <span class="token operator">=</span> nums<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>            nums<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>max<span class="token punctuation">]</span><span class="token punctuation">;</span>            nums<span class="token punctuation">[</span>max<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span>            <span class="token function">heap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>max<span class="token punctuation">,</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 常见算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序算法 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
