<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>LongAdder的源码学习</title>
      <link href="/2022/11/03/longadder-de-yuan-ma-xue-xi/"/>
      <url>/2022/11/03/longadder-de-yuan-ma-xue-xi/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 累加单元组，懒惰初始化</span><span class="token keyword">transient</span> <span class="token keyword">volatile</span> Cell<span class="token punctuation">[</span><span class="token punctuation">]</span> cells<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 基础值，如果没有竞争，则用cas累加这个值</span><span class="token keyword">transient</span> <span class="token keyword">volatile</span> <span class="token keyword">long</span> base<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//在cells创建或者扩容时，置为1，表示加锁</span><span class="token keyword">transient</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> cellsBusy<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><font color="#FF000"> <strong>cellsBusy</strong></font>作用是当要修改cells数组时加锁，防止多线程同时修改cells数组，0为无锁，1为加锁，加锁的情况有三种<br>1、cells数组初始化的时候<br>2、cells数组扩容的时候<br>3、如果cells数组中某个元素为null，给这个位置创建新的Cell对象的时候</p></blockquote><blockquote><p><font color="#FF000"><strong>base</strong></font>有两个作用<br>在开始没有竞争的时候，将累加值到base<br>在cells初始化的过程中，cells不可用，这时候会尝试将值累加到base上</p></blockquote><p><img src="https://img-blog.csdnimg.cn/649e4b0ad8434ca3af2d19e411dde0e5.png" alt="在这里插入图片描述"></p><blockquote><p><font color="#FF000"><strong>@sun.misc.Contended</strong></font>注解是为了防止<strong>缓存行伪共享</strong></p></blockquote><p>因为CPU与内存之间速度还是存在较大差距所以现在计算机在内存与CPU之间引入了三级缓存</p><p><img src="https://img-blog.csdnimg.cn/3a5494726c3b44cfb0547566577babd7.png" alt="在这里插入图片描述"></p><blockquote><p><strong>L1与L2是每个CPU独享的，L3是所有CPU共享的</strong></p></blockquote><p><img src="https://img-blog.csdnimg.cn/f55d37ad8ca644e2af6876f6af962baa.png" alt="在这里插入图片描述"></p><blockquote><p>因为CPU与内存的速度差异很大，需要靠预读数据至缓存来提升效率<br>而缓存以缓存行为单位，每个缓存行对应着一块内存，一般是64byte<br>缓存的加入会造成<strong>数据副本</strong>的产生，即同一份数据会缓存在不同核心的缓存行中<br><strong>CPU要保证数据的一致性</strong>，<strong>如果某个CPU核心更改了数据</strong>，<strong>其他CPU核心对应的整个缓存行必须失效</strong></p></blockquote><p><img src="https://img-blog.csdnimg.cn/e1264fdf42224c20a9038141c44fefb5.png" alt="在这里插入图片描述"></p><blockquote><p>因为cell是数组形式，在内存中是连续存储的，一个Cell为24个字节(16字节的对象头和8字节的value)，因此缓存行可以存下2个Cell对象，所以问题来了：<br>Core-0要修改Cell[0]<br>Core-1要修改Cell[1]<br>无论谁修改成功，都会导致对方Core的缓存行失效<br><br><br>@sun.misc.Contended注解就是用来解决这个问题，它的原理是在适用此注解的对象或字段的前后各增加128字节大小的padding，从而让CPU将对象预读至缓存时占用不同的缓存行，这样就不会造成对方的缓存行失效</p></blockquote><h2 id="有了AtomicLong为什么还要LongAdder"><a href="#有了AtomicLong为什么还要LongAdder" class="headerlink" title="有了AtomicLong为什么还要LongAdder"></a>有了AtomicLong为什么还要LongAdder</h2><blockquote><p>虽然AtomicLong使用CAS算法，但是CAS失败后还是通过无限循环的自旋锁不断的尝试，在高并发下CAS性能低下的原因所在</p></blockquote><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">getAndAddInt</span><span class="token punctuation">(</span>Object o<span class="token punctuation">,</span> <span class="token keyword">long</span> offset<span class="token punctuation">,</span> <span class="token keyword">int</span> delta<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> v<span class="token punctuation">;</span>        <span class="token keyword">do</span> <span class="token punctuation">{</span>            v <span class="token operator">=</span> <span class="token function">getIntVolatile</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> offset<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> v<span class="token punctuation">,</span> v <span class="token operator">+</span> delta<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> v<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>高并发下N多线程同时去操作一个变量会造成大量CAS失败，然后处于自选状态，导致严重浪费CPU资源，降低了并发性。既然AtomicLong性能问题是由于多线程同时去竞争同一个变量的更新而降低，那么把一个变量分解为多个变量，让同样多的线程去竞争多个资源</p></blockquote><p><img src="https://img-blog.csdnimg.cn/9de930f3e8fe4dc5bf5d5c5a08c2dd33.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/386c35635d014e8da079f5f858c254ee.png" alt="在这里插入图片描述"></p><blockquote><p>LongAdder在内部维护了一个Cells数组，每个Cell里面有一个初始值为0的long型变量，在同等并发量的情况下，争夺单个变量的线程会减少，这是变相减少了争夺共享资源的并发量，另外多个线程在争夺同一个原子变量时候，如果失败不是自选CAS重试而是尝试获取其他原子变量的锁，最后当获取当前值的时候把所有变量的值累加后再加上base的值返回<br>Cells占用内存相对比较大的所以一开始并不创建，而是在需要时候再创建，也就是<strong>惰性加载</strong>，当一开始没有空间的时候，所有的更新都是操作base变量</p></blockquote><h2 id="LongAdder中的主要方法"><a href="#LongAdder中的主要方法" class="headerlink" title="LongAdder中的主要方法"></a>LongAdder中的主要方法</h2><p><strong>add方法</strong></p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">long</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Cell<span class="token punctuation">[</span><span class="token punctuation">]</span> as<span class="token punctuation">;</span> <span class="token keyword">long</span> b<span class="token punctuation">,</span> v<span class="token punctuation">;</span> <span class="token keyword">int</span> m<span class="token punctuation">;</span> Cell a<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**        * casBase 就是使用CAS来进行更改值的        * 只有两种情况才会执行if内的语句        * 1、cells数组不为空的时候(cells数组为空时候不存在竞争，所以直接操作caseBase，当不为空的时候就存在多个线程来竞争)        * 2、cells为空，casBase执行失败的时候(casBase执行成功，则直接返回，如果casBase失败，说明第一次争用冲突产生，需要对cells数组初始化进入if)        */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>as <span class="token operator">=</span> cells<span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">casBase</span><span class="token punctuation">(</span>b <span class="token operator">=</span> base<span class="token punctuation">,</span> b <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">boolean</span> uncontended <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/**            * as == null ：cells数组没有初始化，成立就进入if执行cell初始化            * (m = as.length - 1) &lt; 0 ：cells数组的长度为0            * 上面两个条件都代表cells数组没有被初始化成功            * (a = as[getProbe() &amp; m]) == null ：说明当前线程获取的cells数组的这个位置的cell没有做过累加，所以需要创建一个cell对象            * !(uncontended = a.cas(v = a.value, v + x)) ：尝试对这个位置的cell进行累加并返回结果，如果累加失败就找另外一个cell            *            * 进入longAccumulate方法有三种情况            * 1、cells没有初始化            * 2、当前线程获取cell[i]的地方为空，需要创建一个cell对象            * 3、当前对cell[i]cas加值失败            */</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>as <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token punctuation">(</span>m <span class="token operator">=</span> as<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span>                <span class="token punctuation">(</span>a <span class="token operator">=</span> as<span class="token punctuation">[</span><span class="token function">getProbe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> m<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">||</span>                <span class="token operator">!</span><span class="token punctuation">(</span>uncontended <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">cas</span><span class="token punctuation">(</span>v <span class="token operator">=</span> a<span class="token punctuation">.</span>value<span class="token punctuation">,</span> v <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token function">longAccumulate</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> null<span class="token punctuation">,</span> uncontended<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>longAccumulate方法</strong></p><pre class="line-numbers language-java"><code class="language-java"> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">longAccumulate</span><span class="token punctuation">(</span><span class="token keyword">long</span> x<span class="token punctuation">,</span> LongBinaryOperator fn<span class="token punctuation">,</span><span class="token keyword">boolean</span> wasUncontended<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> h<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**        *         */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>h <span class="token operator">=</span> <span class="token function">getProbe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ThreadLocalRandom<span class="token punctuation">.</span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// force initialization</span>            h <span class="token operator">=</span> <span class="token function">getProbe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            wasUncontended <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// cas冲突标志位</span>        <span class="token keyword">boolean</span> collide <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// True if last slot nonempty</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Cell<span class="token punctuation">[</span><span class="token punctuation">]</span> as<span class="token punctuation">;</span> Cell a<span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">;</span> <span class="token keyword">long</span> v<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/**            * 有三个分支            * 主分支一：cells初始化好(处理add方法中的第3，4个条件)            * 主分支二：cells数组没有初始化或者长度为0的情况(这个分支处理add方法的第1，2个条件)            * 主分支三：cells数组正在被其他线程初始化则尝试将累加值通过cas累加到base上            */</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>as <span class="token operator">=</span> cells<span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> as<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">/**                * 小分支一：如果当前cess[i]的位置为空处理的是第三个条件                */</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">=</span> as<span class="token punctuation">[</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> h<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 代表没有其他线程修改</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>cellsBusy <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">// Try to attach new Cell</span>                        <span class="token comment" spellcheck="true">// 创建一个cell对象</span>                        Cell r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cell</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// Optimistically create</span>                        <span class="token comment" spellcheck="true">// 如果没有其它线程修改通过cas将cellBusy设置为1</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>cellsBusy <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">casCellsBusy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token comment" spellcheck="true">//标记create是否创建成功并放入cells数组被hash的位置上</span>                            <span class="token keyword">boolean</span> created <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                            <span class="token keyword">try</span> <span class="token punctuation">{</span>               <span class="token comment" spellcheck="true">// Recheck under lock</span>                                                                Cell<span class="token punctuation">[</span><span class="token punctuation">]</span> rs<span class="token punctuation">;</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> j<span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">//再次检查cells数组不为空并且长度大于0</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>rs <span class="token operator">=</span> cells<span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span>                                    <span class="token punctuation">(</span>m <span class="token operator">=</span> rs<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>                                    rs<span class="token punctuation">[</span>j <span class="token operator">=</span> <span class="token punctuation">(</span>m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> h<span class="token punctuation">]</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                    rs<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> r<span class="token punctuation">;</span>                                    <span class="token comment" spellcheck="true">// 表示执行成功</span>                                    created <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                                <span class="token punctuation">}</span>                            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                                <span class="token comment" spellcheck="true">//去掉锁</span>                                cellsBusy <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                            <span class="token comment" spellcheck="true">// 成功跳出循环</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>created<span class="token punctuation">)</span>                                <span class="token keyword">break</span><span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">//失败说明被其它线程赋值了cells[i]位置</span>                            <span class="token keyword">continue</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// Slot is now non-empty</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                    collide <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">/**                * 小分支二：如果add方法中条件4通过cas加cell[i]失败则重新设置为true去找另一个cell                */</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>wasUncontended<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">// CAS already known to fail</span>                    wasUncontended <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// Continue after rehash</span>                <span class="token comment" spellcheck="true">/**                * 小分支三：给cell[i]加值如果成功则直接退出                */</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">cas</span><span class="token punctuation">(</span>v <span class="token operator">=</span> a<span class="token punctuation">.</span>value<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>fn <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> v <span class="token operator">+</span> x <span class="token operator">:</span>fn<span class="token punctuation">.</span><span class="token function">applyAsLong</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/**                * 小分支四：如果cells发生了扩容或者当前cells数组长度大于了CPU的数量就存在冲突                */</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">>=</span> NCPU <span class="token operator">||</span> cells <span class="token operator">!=</span> as<span class="token punctuation">)</span>                    collide <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// At max size or stale</span>                <span class="token comment" spellcheck="true">/**                * 小分支五：如果发生了冲突设置为true再次hash                */</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>collide<span class="token punctuation">)</span>                    collide <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/**                * 小分支六： 扩容                */</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cellsBusy <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">casCellsBusy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// 检查cells是否已经扩容</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>cells <span class="token operator">==</span> as<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// Expand table unless stale</span>                            Cell<span class="token punctuation">[</span><span class="token punctuation">]</span> rs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cell</span><span class="token punctuation">[</span>n <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>                                rs<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> as<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                            cells <span class="token operator">=</span> rs<span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                        cellsBusy <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    collide <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">// Retry with expanded table</span>                <span class="token punctuation">}</span>                                <span class="token comment" spellcheck="true">// 重新计算hash</span>                h <span class="token operator">=</span> <span class="token function">advanceProbe</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">/**            * 主分支二：初始化            */</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cellsBusy <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> cells <span class="token operator">==</span> as <span class="token operator">&amp;&amp;</span> <span class="token function">casCellsBusy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">boolean</span> init <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                           <span class="token comment" spellcheck="true">// Initialize table</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>cells <span class="token operator">==</span> as<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        Cell<span class="token punctuation">[</span><span class="token punctuation">]</span> rs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cell</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                        rs<span class="token punctuation">[</span>h <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cell</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>                        cells <span class="token operator">=</span> rs<span class="token punctuation">;</span>                        init <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                    cellsBusy <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>init<span class="token punctuation">)</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">/**            * 主分支三：如果别人正在初始化就尝试CAS加base            */</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">casBase</span><span class="token punctuation">(</span>v <span class="token operator">=</span> base<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>fn <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> v <span class="token operator">+</span> x <span class="token operator">:</span>fn<span class="token punctuation">.</span><span class="token function">applyAsLong</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>                          <span class="token comment" spellcheck="true">// Fall back on using base</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>advanceProbe</strong></p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">advanceProbe</span><span class="token punctuation">(</span><span class="token keyword">int</span> probe<span class="token punctuation">)</span> <span class="token punctuation">{</span>        probe <span class="token operator">^=</span> probe <span class="token operator">&lt;&lt;</span> <span class="token number">13</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// xorshift</span>        probe <span class="token operator">^=</span> probe <span class="token operator">>>></span> <span class="token number">17</span><span class="token punctuation">;</span>        probe <span class="token operator">^=</span> probe <span class="token operator">&lt;&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span>        UNSAFE<span class="token punctuation">.</span><span class="token function">putInt</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> PROBE<span class="token punctuation">,</span> probe<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> probe<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><font color="red">怎么确保Probe是当前线程的</font><br>在Thread类中定义了三个变量</p></blockquote><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@sun</span><span class="token punctuation">.</span>misc<span class="token punctuation">.</span><span class="token function">Contended</span><span class="token punctuation">(</span><span class="token string">"tlr"</span><span class="token punctuation">)</span>    <span class="token keyword">long</span> threadLocalRandomSeed<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/** Probe hash value; nonzero if threadLocalRandomSeed initialized */</span>    <span class="token annotation punctuation">@sun</span><span class="token punctuation">.</span>misc<span class="token punctuation">.</span><span class="token function">Contended</span><span class="token punctuation">(</span><span class="token string">"tlr"</span><span class="token punctuation">)</span>    <span class="token keyword">int</span> threadLocalRandomProbe<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/** Secondary seed isolated from public ThreadLocalRandom sequence */</span>    <span class="token annotation punctuation">@sun</span><span class="token punctuation">.</span>misc<span class="token punctuation">.</span><span class="token function">Contended</span><span class="token punctuation">(</span><span class="token string">"tlr"</span><span class="token punctuation">)</span>    <span class="token keyword">int</span> threadLocalRandomSecondarySeed<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 持久化 </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何定位慢查询SQL以及优化</title>
      <link href="/2022/10/03/ru-he-ding-wei-man-cha-xun-sql-yi-ji-you-hua/"/>
      <url>/2022/10/03/ru-he-ding-wei-man-cha-xun-sql-yi-ji-you-hua/</url>
      
        <content type="html"><![CDATA[<h2 id="慢查询日志记录慢SQL"><a href="#慢查询日志记录慢SQL" class="headerlink" title="慢查询日志记录慢SQL"></a>慢查询日志记录慢SQL</h2><p>定位慢SQL可以通过慢查询日志来查看慢SQL，默认的情况下，MySQL数据库不开启慢查询日志(slow query log)，需要手动把它打开<br>SET GLOBAL slow_query_log = ‘ON’;<br><img src="https://img-blog.csdnimg.cn/ca5a435941b34b31ac9d3667f4b1796f.png" alt="在这里插入图片描述"></p><p><strong>查看下慢查询日志配置</strong><br>SHOW VARIABLES LIKE ‘slow_query_log%’</p><p>slow_query_log：表示慢查询开启的状态<br>slow_query_log_file：表示慢查询日志存放的位置</p><p><strong>查看超过多少时间，才记录到慢查询日志</strong><br>SHOW VARIABLES LIKE ‘long_query_time’</p><p>注意： 这样配置是临时的如果需要永久修改需要去配置文件(/etc/my.cnf)</p><h2 id="explain查看分析SQL执行计划"><a href="#explain查看分析SQL执行计划" class="headerlink" title="explain查看分析SQL执行计划"></a>explain查看分析SQL执行计划</h2><p>通过慢查询日志定位出查询效率较低的SQL，可以使用explain查看SQL的执行计划<br><img src="https://img-blog.csdnimg.cn/363d74d85a864fafb0c7dc973c65b02f.png" alt="在这里插入图片描述"></p><p><strong>id</strong></p><blockquote><p><strong>1. id 值相同时，被视为一组从上向下执行。</strong><br><strong>2. 如果是子查询，id 值会递增，id 值越高，优先级越高</strong><br><strong>3. id为NULL最后执行</strong></p></blockquote><p><strong>select_type</strong></p><blockquote><p><strong>1. simple: 简单的select, 查询中不包含子查询或者 union。例如: select name from student where id= 100<br>2. primary: 子查询中最外层查询, 查询中若包含任何复杂的子部分, 最外层的select被标记为primary<br>3. derived：在 from 的列表中包含的子查询被标记成 derived（派生表）。例如: explain select id from (select id,name from student) student1 where name= ‘name100’<br>4. subquery：在 select 或 where 列表中包含了子查询，则子查询被标记成 subquery。例如: explain select id from student where score = (select score from student where<br>name=’name100’);<br>5. union: union中的第二个或后面的select语句. 例如: EXPLAIN select id from student where id&lt;12691055 UNION all select id from student where id&lt;12691060;</strong></p></blockquote><p><strong>table</strong></p><blockquote><p><strong>显示这一步所访问数据库中表名称. 有时候不是真实的表名, 可能是简称</strong></p></blockquote><p><strong>partitions</strong></p><blockquote><p><strong>该字段看table所在的分区, 值为NULL表示表未被分区</strong></p></blockquote><p><strong>possible_keys</strong></p><blockquote><p><strong>可能会使用到的索引(ps.其实不太重要)</strong></p></blockquote><p><strong>重点关注的字段</strong><br><strong>type</strong></p><blockquote><p><strong>表示连接类型，查看索引执行情况的一个重要指标 以下性能从好到坏依次：system &gt; const &gt; eq_ref &gt; ref &gt;<br>ref_or_null &gt; index_merge &gt; unique_subquery &gt; index_subquery &gt; range &gt;<br>index &gt; ALL<br>system：这种类型要求数据库表中只有一条数据，是const类型的一个特例，一般情况下是不会出现的<br>const：通过一次索引就能找到数据，一般用于主键或唯一索引作为条件，这类扫描效率极高，速度非常快<br>eq_ref：常用于主键或唯一索引扫描，一般指使用主键的关联查询 ref : 常用于非主键和唯一索引扫描<br>ref_or_null：这种连接类型类似于ref，区别在于MySQL会额外搜索包含NULL值的行<br>index_merge：使用了索引合并优化方法，查询使用了两个以上的索引<br>unique_subquery：类似于eq_ref，条件用了in子查询<br>index_subquery：区别于unique_subquery，用于非唯一索引，可以返回重复值<br>range：常用于范围查询，比如：between … and 或 In 等操作 index：全索引扫描 ALL：全表扫描</strong></p></blockquote><p><strong>key</strong></p><blockquote><p><strong>实际使用到的索引</strong></p></blockquote><p><strong>key_len</strong></p><blockquote><p><strong>实际使用到的索引的长度</strong></p></blockquote><p><strong>rows</strong></p><blockquote><p><strong>该列表示MySQL估算找到我们所需的记录，需要读取的行数</strong></p></blockquote><p><strong>filtered</strong></p><blockquote><p><strong>该列是一个百分比，是满足条件的记录数量与我们查询了多少记录数量的比值</strong></p></blockquote><p><strong>extra</strong></p><blockquote><p><strong>该字段包含有关MySQL如何解析查询的其他信息，它一般会出现这几个值：<br>● Usingfilesort：表示按文件排序，一般是在指定的排序和索引排序不一致的情况才会出现，一般见于order by语句<br>● Using index：表示是否用了覆盖索引<br>● Using temporary: 表示是否使用了临时表,性能特别差，需要重点优化，一般多见于groupby语句，或者union语句<br>● Using where : 表示使用了where条件过滤<br>● Using index condition：MySQL5.6之后新增的索引下推，在存储引擎层进行数据过滤，而不是在服务层过滤，利用索引现有的数据减少回表的数据</strong></p></blockquote><h2 id="profile分析执行耗时"><a href="#profile分析执行耗时" class="headerlink" title="profile分析执行耗时"></a>profile分析执行耗时</h2><blockquote><p><strong>explain只是看到SQL预估的执行计划，如果要了解SQL真正的执行线程状态及消耗的时间，需要使用profiling，开启profiling参数后，后续执行的SQL语句都会记录其资源开销，包括IO，上下文切换，CPU，内存等等，可以根据这些开销进一步分析当前慢SQL的瓶颈再进一步进行优化</strong></p></blockquote><p><img src="https://img-blog.csdnimg.cn/c556a8c892074bc08daf7cac58ba8d5f.png" alt="在这里插入图片描述"></p><h2 id="Optimizer-Trace分析详情"><a href="#Optimizer-Trace分析详情" class="headerlink" title="Optimizer Trace分析详情"></a>Optimizer Trace分析详情</h2><blockquote><p><strong>profile只能查看到SQL的执行耗时，但无法看到SQL真正执行的过程信息，不知道MySQL优化器是如何选择执行计划，这时候，可以使用Optimizer<br>Trace，它可以跟踪执行语句的解析优化执行的全过程</strong></p></blockquote><p><img src="https://img-blog.csdnimg.cn/f1315716958849f9a15717c99201a7f0.png" alt="在这里插入图片描述"></p><p>三个阶段分为对应：准备阶段、分析阶段、执行阶段</p><h1 id="确定问题采用响应措施"><a href="#确定问题采用响应措施" class="headerlink" title="确定问题采用响应措施"></a>确定问题采用响应措施</h1><p>● 多数慢SQL都跟索引有关，比如不加索引，索引不生效、不合理等，这时候，可以优化索引<br>● 还可以优化SQL语句，比如一些in元素过多问题(分批)，深分页问题(基于上一次数据过滤等)，进行时间分段查询<br>● SQL没办法很好优化，可以改用ES的方式，或者数仓<br>● 如果单表数据量过大导致慢查询，可以考虑分库分表<br>● 如果数据库在刷脏页导致慢查询，考虑是否可以优化一些参数<br>● 如果存量数据量太大，考虑是否可以让部分数据归档</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> SQL优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>索引的学习与理解</title>
      <link href="/2022/10/02/suo-yin-de-xue-xi-yu-li-jie/"/>
      <url>/2022/10/02/suo-yin-de-xue-xi-yu-li-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="为什么使用索引"><a href="#为什么使用索引" class="headerlink" title="为什么使用索引"></a>为什么使用索引</h2><p>索引是存储引擎用于快速找到数据记录的一种数据结构。MySQL在进行数据查找时，首先查看查询条件是否命中某条索引，符合则<strong>通过索引查找</strong>相关数据，如果不符合则<strong>全表扫描</strong>，建索引目的就是为了<strong>减少磁盘I/O次数</strong>，加快查询效率。</p><h2 id="索引及其优缺点"><a href="#索引及其优缺点" class="headerlink" title="索引及其优缺点"></a>索引及其优缺点</h2><h3 id="索引概述"><a href="#索引概述" class="headerlink" title="索引概述"></a>索引概述</h3><blockquote><p><strong>索引本质</strong>：索引是数据结构。这些数据结构以某种方式指向数据，这样可以在这些数据结构的基础上实现高效查找算法。<br><strong>索引是在存储引擎实现的</strong>，因此每种存储引擎的索引不一定完全相同，并且每种存储引擎不一定支持所有类型的索引。同时存储引擎可以定义每个表的最大索引数和最大索引长度。所有存储引擎支持每个表至少16个索引，总索引长度至少为256字节。</p></blockquote><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><blockquote><p>1、提高数据检索的效率，降低数据库的I/O成本<br>2、通过创建唯一索引，可以保证数据库表中每一行数据的唯一性<br>3、可以加速表和表之间的连接。对于有依赖关系的子表和父表联合查询时，可以提高查询速度<br>4、在使用分组和排序子句进行数据查询时，可以显著减少查询中分组和排序的时间，降低CPU的消耗</p></blockquote><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><blockquote><p>1、创建索引和维护索引要耗费时间<br>2、索引需要占磁盘空间，存储在磁盘上<br>3、虽然索引大大提高了查询 速度，同时也会降低更新表的速度</p></blockquote><h2 id="InnoDB中的索引"><a href="#InnoDB中的索引" class="headerlink" title="InnoDB中的索引"></a>InnoDB中的索引</h2><h3 id="常见索引概念"><a href="#常见索引概念" class="headerlink" title="常见索引概念"></a>常见索引概念</h3><blockquote><p><strong>聚簇索引</strong> 并不是一种单独的索引类型，而是一种数据存储方式（所有的用户记录都存储在了叶子节点）。<br><strong>特点</strong><br>1、使用主键值的大小进行记录和页的排序<br>页内的记录是按照主键大小顺序排成一个单向链表<br>各个存放用户记录的页排序成一个双向链表<br>存放目录项的页也排成一个双向链表<br>2、B+树的叶子节点存储的是完整的用户记录<br><strong>优点</strong><br>数据访问更快，因为聚簇索引将索引和数据保存在同一个B+树中，因此从聚簇索引获取数据比非聚簇索引更快<br>聚簇索引对于主键的排序查找和范围查找更快<br>因为聚簇索引排列顺序，查询显示一定范围数据时不用从多个数据块中提取数据，节省了大量I/O操作<br><strong>缺点</strong><br>插入速度严重依赖插入顺序，按照主键的顺序插入是最快的方式，否则会出现页分裂，严重影响性能<br>更新主键的代价很高，因为将会导致被更新的行移动<br>二级索引需要两次索引查找</p></blockquote><blockquote><p><strong>非聚簇索引</strong>与聚簇索引的区别就是叶子节点放的是主键</p></blockquote><h2 id="索引的代价"><a href="#索引的代价" class="headerlink" title="索引的代价"></a>索引的代价</h2><blockquote><p><strong>空间上的代价</strong><br>每建立一颗B+树，每一颗B+树的每一个节点都是一个数据页，一个页默认占用16kb的存储空间，一颗很大的B+树由许多数据页组成<br><strong>时间上的代价</strong><br>每次对表中数据进行<strong>增删改</strong>操作时，都需要去修改各个B+树索引</p></blockquote><h2 id="索引的声明与使用"><a href="#索引的声明与使用" class="headerlink" title="索引的声明与使用"></a>索引的声明与使用</h2><h3 id="索引的分类"><a href="#索引的分类" class="headerlink" title="索引的分类"></a>索引的分类</h3><blockquote><p>从<strong>功能逻辑</strong>分为普通索引、唯一索引、主键索引、全文索引<br>从<strong>物理实现</strong>方式分聚簇索引和非聚簇索引<br>从<strong>作用字段个数</strong>分单列索引和联合索引</p></blockquote><blockquote><p><strong>普通索引</strong><br>在创建索引时，不附加任何限制条件，只是用于提高查询效率。这类索引可以创建在任何数据类型</p></blockquote><blockquote><p><strong>唯一索引</strong><br>使用UNIQUE参数可以设置唯一性索引，在创建唯一性索引时限制该索引的值必须是唯一的，但允许有空值。一张数据表里可以有多个唯一索引</p></blockquote><blockquote><p><strong>主键索引</strong><br>主键索引就是一种特殊的唯一性索引，不能为空且最多只有一个主键索引</p></blockquote><blockquote><p><strong>单列索引</strong><br>在单个字段创建索引</p></blockquote><blockquote><p><strong>多列索引</strong><br>多个字段组合上创建一个索引，使用组合索引时需要遵循<strong>最左前缀集合</strong></p></blockquote><blockquote><p><strong>全文索引</strong><br>利用分词技术等多种算法智能分析出文本文字中关键词的频率和重要性，然后按照一定的算法智能的筛选出我们想要的搜索结果。全文索引适合大型数据集，对于小的数据集，用处不大。<br>使用参数FULLTEXT设置全文索引</p></blockquote><h3 id="索引的创建"><a href="#索引的创建" class="headerlink" title="索引的创建"></a>索引的创建</h3><blockquote><p>查看索引<br>show create table 表名；<br>show index from 表名；</p></blockquote><blockquote><p>在<strong>创建表的定义语句</strong>中指定索引列，使用<strong>alter table</strong>语句或者<strong>create index</strong></p></blockquote><blockquote><p><strong>创建表时</strong><br><strong>隐式创建索引</strong><br>添加约束的时候自动创建<br><strong>显示创建索引</strong><br>create table table_name(<br>name varchar(30),<br>[unique | fulltext | spatial] [index | key] (col_name [length]) [asc | desc])<br><strong>alter table</strong><br>alter table 表名 add index 索引名(字段名)<br><strong>create index</strong><br>create index 索引名 on 表名(字段名)</p></blockquote><h3 id="索引的删除"><a href="#索引的删除" class="headerlink" title="索引的删除"></a>索引的删除</h3><blockquote><p>alter table .. drop index …<br>drop index … on table_name</p></blockquote><h2 id="索引的设计原则"><a href="#索引的设计原则" class="headerlink" title="索引的设计原则"></a>索引的设计原则</h2><blockquote><p>1.针对数据量较大,且查询比较频繁的表建立索引<br>2.针对于常作为查询条件(where)、排序(order by)、分组(group by)操作的字段建立索引<br>3.尽量选择区分度高的列作为索引,尽量建立唯一索引,区分度越高,使用索引的效率越高<br>4.如果是字符串类型的字段,字段的长度较长,可以针对字段的特点建立前缀索引<br>5.尽量使用联合索引,减少单列索引,查询时,联合索引很多时候可以覆盖索引,节省存储空间,避免回表,提高查询效率<br>6.要控制索引的数量,索引并不是多多益善,索引越多,维护索引结构的代价也就越大,会影响增删改的效率<br>7.如果索引列不能存储NULL值,请在创建表时使用NOT NULL约束它.当优化器知道每列是否包含NULL值时,它可以更好的确定那个索引最有效的用于查询</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> 索引 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis持久化</title>
      <link href="/2022/10/01/redis-chi-jiu-hua/"/>
      <url>/2022/10/01/redis-chi-jiu-hua/</url>
      
        <content type="html"><![CDATA[<h2 id="Redis如何实现数据不丢失"><a href="#Redis如何实现数据不丢失" class="headerlink" title="Redis如何实现数据不丢失"></a>Redis如何实现数据不丢失</h2><p>Redis的读写操作都是在内存中，所以Redis性能才会高，但是当Redis重启后，内存中的数据就会丢失，那为了保存内存中的数据不会丢失，Redis实现了数据持久化机制，会把数据保存到磁盘，这样Redis重启就能够从磁盘恢复原有的数据</p><p>Redis提供了三种数据持久化方式</p><blockquote><p><strong>AOF日志</strong>：每执行一条写操作命令就把该命令以追加的方式写入一个文件里<br><strong>RDB快照</strong>：将某一时刻的内存数据以二进制的方式写入磁盘<br><strong>混合持久化</strong>：集成了AOF与RDB的优点</p></blockquote><h2 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h2><p><strong>AOF步骤</strong><br>Redis在执行完一条命令后就会把该命令以追加的方式写到一个文件，然后Redis重启时，会读取该命令然后逐一执行命令的方式来进行数据恢复</p><p><img src="https://img-blog.csdnimg.cn/134afa3dbfc347a0aeea66e5c560e653.png" alt="在这里插入图片描述"></p><blockquote><p><strong>why先执行命令后写入磁盘？</strong></p></blockquote><p>避免额外的检查开销：因为如果先将写操作记录到AOF日志中，再执行该命令的话，如果当前命令有问题如果不检查的话，Redis使用该命令进行恢复的时候就可能会出错<br>不会阻塞当前写操作命令的执行：因为是在当前线程的写操作之后</p><ul><li>数据可能会丢失：当前线程执行完命令而还没有写入磁盘时就宕机了</li><li>可能阻塞其它操作：因为记录AOF日志也是在主线程中执行，所以当Redis把日志写入磁盘时会阻塞后续的命令</li></ul><p><strong>AOF的写回策略</strong></p><blockquote><p><strong>Always</strong>：每次写操作命令都会执行完后，同步AOF日志数据写回硬盘<br><strong>Everysec</strong>：每次写操作命令执行完后，先写入AOF日志缓冲区，每秒写回磁盘<br><strong>No</strong>：不由Redis控制写回磁盘，每次都写入AOF日志缓冲区，再由操作系统决定何时写回磁盘</p></blockquote><p><img src="https://img-blog.csdnimg.cn/27c09236c66d461ea1e16e0aebb80d61.png" alt="在这里插入图片描述"></p><p><strong>AOF日志文件过大怎么办?</strong></p><p>AOF日志是一个文件，随着写命令的执行，文件会越来越大，如果文件过大就会带来性能问题，比如AOF恢复中执行的命令就会很多就会导致恢复过程很慢<br>所以Redis提供了AOF重写机制，当AOF文件大小超过设定的阈值时AOF就会启用重写机制来压缩AOF文件，比如set name lixiaobo 与set name lidabo 就会设置为一条指令set name lidabo</p><p><strong>重写AOF日志过程</strong></p><p>Redis的重写AOF过程是由后台子进程bgwriteaof来完成的，这么做的好处：</p><blockquote><p> 1、子进程进行AOF重写期间，主进程可以继续处理命令请求，从而避免阻塞主进程<br>2、子进程带有父进程的数据副本，之所以不使用多线程是因为多线程会共享内存那么修改时候就需要加锁来保证数据安全而这样就会降低性能。而使用子进程，创建子进程时候父子进程是共享内存数据，而当父子进程任意一方修改就会发生写时复制</p></blockquote><p>触发重写机制后，主进程会创建重写AOF的子进程，此时子进程只会对这个内存进行只读，重写AOF子进程会读取所有指令，并逐一把内存数据的键值对转换成另一条命令，再将命令记录到重写日志(新的AOF文件)<br>但是重写过程中，主进程依然可以正常处理命令，所以就出现了问题，如果主进程修改了已经存在的key-value，那么就会发生写时复制，此时这个key-value数据在子进程的内存数据就与主进程的内存数据不一样了<br>为了解决这种数据不一致，Redis设置了一个<strong>AOF重写缓冲区</strong>，这个缓冲区在创建bgwriteaof子进程之后开始使用<br>在重写AOF期间，当Redis执行完一个写命令之后，它会同时把这个写命令放入AOF缓冲区与AOF<strong>重写缓冲区</strong><br>也就是说在bgwriteaof期间，主进程需要执行三个工作</p><blockquote><p> 1、 执行客户端发来的命令<br> 2、将执行后的命令写入AOF缓冲区<br> 3、将执行后的命令写入AOF重写缓冲区</p></blockquote><p>当子进程重写完成之后会向主进程发送一条信号，信号是进程间通信的一种方式<br>主进程收到该信号后，会调用一个信号处理函数</p><blockquote><p>1、将AOF重写缓冲区中的所有内容追加到新的AOF文件中，使得新旧两个AOF所保存的数据一致<br>2、新的AOF的文件进行改名，覆盖现有的AOF文件</p></blockquote><p><img src="https://img-blog.csdnimg.cn/442937bc9f6b4b3fad68ff93403d1349.png" alt="在这里插入图片描述"></p><h2 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h2><p>RDB记录的是某一个瞬间的内存数据，记录的是实际数据，因此在数据恢复时，RDB恢复数据的效率比AOF高些</p><p><strong>如何进行RDB</strong></p><p>redis提供了两个命令来执行RDB</p><blockquote><p><strong>save</strong>：执行save会在主线程生成RDB文件，所以会阻塞主线程<br><strong>bgsave</strong>：创建一个子进程来生成RDB文件，避免阻塞主线程</p></blockquote><p>Redis的快照是全量快照，也就是每次执行快照都会把内存中的数据都记录到磁盘，所以这是一个比较重的操作</p><p><strong>RDB执行快照时候数据能修改？</strong></p><p>可以修改，在执行bgsave过程，Redis依旧可以继续处理操作命令，也就是数据是能被修改，关键技术还是写时复制</p><h2 id="混合持久化"><a href="#混合持久化" class="headerlink" title="混合持久化"></a>混合持久化</h2><p><strong>混合持久化步骤</strong></p><p>AOF的优点是丢失数据少，但是数据恢复慢，而RDB是优点是恢复速度快而快照的频率不好把握，如果频率过低，数据丢失的量就比较多，如果频率高就会影响性能<br>所以退出了混合持久化集成两者优点，在AOF重写日志时，fork出来的子进程会把当前主线程共享的内存数据以RDB方式写入到AOF文件，然后主线程处理的命令被记录到重写缓冲区中，重写缓冲区中的命令会以追加AOF的形式存在AOF日志中</p><p><img src="https://img-blog.csdnimg.cn/225c19b532ba4bf886564bfdd8e05a24.png" alt="在这里插入图片描述"></p><p>混合持久化的优缺点<br><strong>优点</strong><br>集成了AOF与RDB的优点<br><strong>缺点</strong><br>文件可读性变差</p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 持久化 </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TCP详解</title>
      <link href="/2022/07/10/tcp-xiang-jie/"/>
      <url>/2022/07/10/tcp-xiang-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="TCP概述"><a href="#TCP概述" class="headerlink" title="TCP概述"></a>TCP概述</h2><blockquote><p>TCP是一种面向连接的协议，在发送数据前通信双方必须在彼此间建立一条连接<br>所谓的连接其实就是客户端和服务器的内存里保存一份关于对方的信息，如IP地址、端口<br>TCP是一种字节流，它会处理IP层的丢包、重复以及错误问题<br>在建立连接的过程中，双方交换的一些参数可以放到TCP的头部<br><br><br><strong>总结</strong> ：TCP提供了一种可靠、面向连接、字节流、传输层的服务，采用三次握手建立一个连接，四次挥手关闭一个连接</p></blockquote><h2 id="TCP报文格式"><a href="#TCP报文格式" class="headerlink" title="TCP报文格式"></a>TCP报文格式</h2><p><img src="https://img-blog.csdnimg.cn/6d88c41f3f2844c689c758bfebf8ad91.png" alt="在这里插入图片描述"></p><blockquote><p>源端口、目的端口：发送方和接收方的端口号<br>序号：TCP连接中的字节流都有编号。如果101开始，传送了100个字节，那么下次就是从201开始<br>确认序号：接送方发给发送方下次需要的字节序号<br>首部长度：就是TCP首部的长度，记录了TCP报文数据到TCP报文段开始的距离<br>保留：留待以后使用<br>URG：紧急字段 1-代表有紧急数据 0-代表没有<br>ACK：在TCP报文段中，字段ACK=1时，确认号字段才有效。TCP规定，在连接建立后所有传送的报文段都必须把ACK置1<br>PSH：当两个应用在进行交互时，如果想要立马得到对方的回复就PSH设置为1<br>RST：RST为1时代表需要重新建立连接<br>SYN：在连接建立时用来同步序号。当SYN=1，ACK=0，表明是连接请求报文，若同意连接，则响应报文中应该使SYN=1，ACK=1；<br>FIN：用来释放连接；当FIN=1时代表终止连接<br>窗口大小：用来进行流量控制<br>校验和：对整个TCP报文段进行校验和计算，由目标端进行校验<br>紧急指针：记录一个偏移量，指向紧急数据的最后一位（也可以是紧急数据的下一位，两者都是标准），在读取到紧急指针所指向的位置之前，TCP的接受进程都处于紧急状态，当读取到紧急数据后一位时，回复到正常状态。</p></blockquote><h2 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h2><p><img src="https://img-blog.csdnimg.cn/37c4b1312b664a1db07bc41d73a744d7.png" alt="在这里插入图片描述"></p><h2 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h2><p><img src="https://img-blog.csdnimg.cn/f5e97c195559437d9838abfd54b5ffb3.png" alt="在这里插入图片描述"></p><h2 id="流量控制"><a href="#流量控制" class="headerlink" title="流量控制"></a>流量控制</h2><blockquote><p>如果发送者发送数据过快，接收者来不及接收，那么就会有分组丢失。为了避免分组丢失，控制发送者的发送速度，使得接收者来得及接收，这就是流量控制。流量控制根本目的是防止分组丢失，它是构成TCP可靠性的一方面<br><br><br>流量控制主要是用滑动窗口实现<br>发送窗口 = 1，接收窗口 = 1 停止等待<br>发送窗口 &gt; 1，接收窗口 = 1 回退N帧协议<br>发送窗口 &gt; 1，接收窗口 &gt; 1 选择重传协议</p></blockquote><blockquote><p><strong>停止协议</strong><br>发送方必须受到接收方返回回来的ACK数据包才能继续发送下一个不然就超时重传<br>性能较差一次只能发送一个<br><strong>没有问题</strong><br><img src="https://img-blog.csdnimg.cn/2feb827ef1644264993505337918b90c.png" alt="在这里插入图片描述"><br><strong>出现问题</strong><br><img src="https://img-blog.csdnimg.cn/ba562a4b9a324146a4e98e95896ffa75.png" alt="在这里插入图片描述"></p></blockquote><blockquote><p><strong>回退N帧协议</strong><br>发送窗口<br>新的分组落入发送缓冲区，发送-&gt;前沿移动<br>超时重发机制让发送端将发送窗口中的所有方法发送出去<br>接收窗口<br>收到乱序分组，没有落入到接收窗口范围，抛弃<br>发送老分组的确认，累计确认</p></blockquote><blockquote><p><strong>选择重传协议</strong><br>发送窗口<br>新的分组落入发送区域缓冲区范围，发送-&gt;前沿移动<br>超时重发机制让发送端将超时的分组重新发送出去<br>来了乱序分组的确认-&gt;后沿不向前移动-&gt;新的分组无法落入发送缓冲区的范围<br>接收窗口<br>收到乱序分组，落入到接收窗口范围，接收<br>收到该分组的确认，单独确认</p></blockquote><h2 id="拥塞控制"><a href="#拥塞控制" class="headerlink" title="拥塞控制"></a>拥塞控制</h2><blockquote><p>在某段时间内，若对网络中某一资源的需求超过了该资源所能提供的可用部分，网络的性能就要变坏。这种情况就叫拥塞控制。拥塞控制就是为了防止过多的数据注入到网络中，这样就可以使网络中的路由器或链路不致过载。拥塞控制所要做的都有一个前提，就是网络能够承受现有的网络负荷。<strong>拥塞控制是一个全局性的过程，涉及到所有的主机，所有的路由器以及与降低网络传输有关的因素。相反，流量控制往往是控制点对点的通信量，是个端到端的问题。流量控制所要做到的就是抑制发送端发送数据的速率，以便于接收方来得及接收</strong></p></blockquote><p><img src="https://img-blog.csdnimg.cn/c0f46ea208e1440bb6777e8d60a10fb3.png" alt="在这里插入图片描述"></p><blockquote><p><strong>慢开始</strong><br><br><br>拥塞窗口和接收窗口共同决定的发送窗口<br>当主机开始发送数据时，如果把大量数据字节注入到网络中，那么会引起网络阻塞，因为现在不知道网络的负荷情况<br>所有较好的办法就是先探测一下，即由小到大逐渐增大发送窗口，也就是由小到大逐渐增大拥塞窗口数值。cwnd初始值为1，每经过一个传播轮次，cwnd加倍<br><br><br>如果不对cwnd限制马上就会导致cwnd膨胀所有就有一个慢启动阈值ssthresh<br>如果cwnd &gt; ssthresh 就用拥塞避免<br>如果cwnd &lt; ssthresh 就用慢开始</p></blockquote><blockquote><p><strong>拥塞避免</strong><br><br><br>拥塞避免算法的思路是让拥塞窗口 cwnd 缓慢增大，即每经过一个往返时间 RTT 就把发送放的 cwnd 加 1<br><br><br>不论是慢开始还是拥塞避免只要网络出现拥塞（没有按时到达）时，就把ssthresh的值置为出现拥塞时的拥塞窗口的一半（但不能小于2），以及cwnd置为1，进行慢开始。 目的是迅速减少主机发送到网络中的分组数，使得发生 拥塞的路由器有足够时间把队列中积压的分组处理完毕。</p></blockquote><blockquote><p><strong>快重传与快恢复</strong><br>快重传详情看 重传机制-快速重传<br><br><br><strong>快速恢复</strong><br>当发送方连续收到三个重复确认，就执行”乘法减小”算法，把慢开始门限<strong>ssthresh减半</strong>。然后立即重传丢失报文段，并将<strong>cwnd设置为新的ssthresh</strong>然后进行<strong>拥塞避免算法</strong></p></blockquote><h2 id="重传机制"><a href="#重传机制" class="headerlink" title="重传机制"></a>重传机制</h2><h3 id="超时重传"><a href="#超时重传" class="headerlink" title="超时重传"></a>超时重传</h3><blockquote><p><strong>RTT</strong>：往返时间（发送方发给服务方然后发送方收到服务方应答的时间）<br><strong>RTO</strong>：超时重传时间</p></blockquote><blockquote><p>在发送数据包时就开启一个定时器，如果定时器超时了还没有收到ACK就发起重传，如果收到了ACK就发送数据包再重置定时器<br><br><br>超时重传发生情况：<br>    1、数据包丢失<br>2、确认应答丢失<br><br><br>RTO时间设置<br>1、RTO 较大时：重发就慢，丢了过后很久才发，效率低<br>2、RTO 较小时：可能没有丢失，但是RTO到了就重发，导致网络拥塞，导致更多的超时，导致更多的重发<br>所有RTO应略大于RTT</p></blockquote><h3 id="快速重传"><a href="#快速重传" class="headerlink" title="快速重传"></a>快速重传</h3><blockquote><p>快速重传的工作方式是当收到三个相同的 ACK 报文时，会在定时器过期之前，重传丢失的报文段。<br>为什么是三次冗余ACK<br>通过大量经验表明三次比较合适</p></blockquote><h2 id="为什么不进行两次握手"><a href="#为什么不进行两次握手" class="headerlink" title="为什么不进行两次握手"></a>为什么不进行两次握手</h2><blockquote><p>1、确认双方的接收与发送能力是否正常<br>第一次握手：客户端发送网络包，服务端收到了。服务端：客户端的发送能力、服务端的接收能力正常<br>第二次握手：服务端发包，客户端收到了。客户端：服务的发送能力、服务端的接收能力、客户端的接收能力、发送能力正常<br>第三次握手：客户端发包，服务端收到了。服务端：服务端的发送能力，客户端的接收能力正常<br>2、防止已经失效的连接请求报文突然又传送到了服务器，从而产生错误<br>如果客户端发出连接请求，因连接请求报文丢失而未收到确认，于是客户端再重传一次连接请求。后来收到了确认，建立了连接。数据传输完毕后释放连接，客户端发出了两个连接请求报文段，其中一个丢失了，第二个到达了服务端，但是第一个丢失的报文段有可能只是由于某些网络节点长时间滞留了，延误到连接释放以后的某个节点，此时服务端认为是客户端又发出一次请求，于是就向客户端发出确认报文段，同意建立连接，不采用三次握手，只要服务端发出确认就建立了新的连接，此时客户端忽略服务端发来的确认，也不发送数据，则服务端一致等待客户端发送数据，浪费资源</p></blockquote><h2 id="为什么关闭连接时客户端会等待2MSL"><a href="#为什么关闭连接时客户端会等待2MSL" class="headerlink" title="为什么关闭连接时客户端会等待2MSL"></a>为什么关闭连接时客户端会等待2MSL</h2><blockquote><p>MSL：报文段最大存活时间<br>1、为了保证客户端发送的最后一个ACK报文能够到达服务器，因为在这个ACK报文可能丢失，站在服务器的角度看来，我已经发送了FIN+ACK报文请求断开了，客户端没有给我回应，应该是我发送的请求断开报文它没有收到，于是服务器又会重新发送一次，而客户端就能在这个2MSL时间段内收到这个重传的报文，接着给出回应报文，并且重启2MSL计时器<br>2、防止类似与”三次握手中提到了”已经失效的请求报文段”出现在本连接中。客户端发送完最后一个确认报文后，在这个2MSL时间中，就可以使本连接持续的时间内所产生的所有报文段都从网络中消失。这样新的连接中就不会出现旧连接的请求报文</p></blockquote><h2 id="建立连接后客户端出现故障怎么办"><a href="#建立连接后客户端出现故障怎么办" class="headerlink" title="建立连接后客户端出现故障怎么办"></a>建立连接后客户端出现故障怎么办</h2><blockquote><p>TCP设有一个保活计时器，当客户端出现故障时，服务器不能一直等待下去，白白浪费资源。服务器每收到一个客户端的请求后都会复位这个计时器，时间通常设置为2小时，若超时后还没有收到客户端的任何数据，服务器就会发送一个探测报文段，以后每隔75s发送一次。若一连发送10个探测报文仍然没有反应，服务器就认为客户端出了故障，接着就关闭连接</p></blockquote><h2 id="TCP黏包与粘包问题"><a href="#TCP黏包与粘包问题" class="headerlink" title="TCP黏包与粘包问题"></a>TCP黏包与粘包问题</h2><h3 id="什么是黏包与粘包"><a href="#什么是黏包与粘包" class="headerlink" title="什么是黏包与粘包"></a>什么是黏包与粘包</h3><blockquote><p>TCP传输的是字节流，所谓流，就是发送的是一连串的数据，没有界限。TCP底层不会解析具体的数据内容，它会根据缓冲区的实际情况进行包的划分（发送和接收），由此会导致上层业务的一个完整的包被拆分成多个包进行发送（“拆包”），或者多个小包被封装成一个大的数据包进行发送（“粘包”），这就是所谓的TCP的拆包和粘包问题。</p></blockquote><h3 id="如何解决"><a href="#如何解决" class="headerlink" title="如何解决"></a>如何解决</h3><blockquote><p>1、固定应用层发送消息的长度，如果不够就补充空格<br>2、在包尾添加回车换行符进行分割<br>3、将消息分为消息头与消息体，消息头中包含长度<br>4、更复杂的应用层协议</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 计网 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> TCP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>session共享</title>
      <link href="/2022/07/08/session-gong-xiang/"/>
      <url>/2022/07/08/session-gong-xiang/</url>
      
        <content type="html"><![CDATA[<h2 id="tomcat的安装与配置"><a href="#tomcat的安装与配置" class="headerlink" title="tomcat的安装与配置"></a>tomcat的安装与配置</h2><h3 id="tomcat的安装"><a href="#tomcat的安装" class="headerlink" title="tomcat的安装"></a>tomcat的安装</h3><p><strong>官网下载</strong></p><p><a href="https://tomcat.apache.org/">Apache Tomcat官网</a></p><blockquote><p> 我下载的版本为<strong>8.5.82</strong></p></blockquote><p><img src="https://img-blog.csdnimg.cn/7e354ff584b74ca780399b8490b042ca.png" alt="在这里插入图片描述"></p><p><strong>解压两份</strong></p><p><img src="https://img-blog.csdnimg.cn/a97adaace08743d0be95900e6825f518.png" alt="在这里插入图片描述"></p><h3 id="tomcat集群的配置"><a href="#tomcat集群的配置" class="headerlink" title="tomcat集群的配置"></a>tomcat集群的配置</h3><p><strong>官网提供的配置</strong></p><p><a href="https://tomcat.apache.org/tomcat-8.5-doc/cluster-howto.html">官网配置地址</a></p><p><img src="https://img-blog.csdnimg.cn/c560ac8546ee42b494d6b0fe1545a807.png" alt="在这里插入图片描述"></p><p><strong>我的配置步骤</strong></p><pre class="line-numbers language-xml"><code class="language-xml">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Cluster</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.apache.catalina.ha.tcp.SimpleTcpCluster<span class="token punctuation">"</span></span>                 <span class="token attr-name">channelSendOptions</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Manager</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.apache.catalina.ha.session.DeltaManager<span class="token punctuation">"</span></span>                   <span class="token attr-name">expireSessionsOnShutdown</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>                   <span class="token attr-name">notifyListenersOnReplication</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Channel</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.apache.catalina.tribes.group.GroupChannel<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Membership</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.apache.catalina.tribes.membership.McastService<span class="token punctuation">"</span></span>                        <span class="token attr-name">address</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>228.0.0.4<span class="token punctuation">"</span></span>                        <span class="token attr-name">port</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>45564<span class="token punctuation">"</span></span>                        <span class="token attr-name">frequency</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>500<span class="token punctuation">"</span></span>                        <span class="token attr-name">dropTime</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3000<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Receiver</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.apache.catalina.tribes.transport.nio.NioReceiver<span class="token punctuation">"</span></span>                      <span class="token attr-name">address</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>auto<span class="token punctuation">"</span></span>                      <span class="token attr-name">port</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>4000<span class="token punctuation">"</span></span>                      <span class="token attr-name">autoBind</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span>                      <span class="token attr-name">selectorTimeout</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>5000<span class="token punctuation">"</span></span>                      <span class="token attr-name">maxThreads</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>6<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Sender</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.apache.catalina.tribes.transport.ReplicationTransmitter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Transport</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.apache.catalina.tribes.transport.nio.PooledParallelSender<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Sender</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Interceptor</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.apache.catalina.tribes.group.interceptors.TcpFailureDetector<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Interceptor</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.apache.catalina.tribes.group.interceptors.MessageDispatchInterceptor<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Channel</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Valve</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.apache.catalina.ha.tcp.ReplicationValve<span class="token punctuation">"</span></span>                 <span class="token attr-name">filter</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Valve</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.apache.catalina.ha.session.JvmRouteBinderValve<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Deployer</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.apache.catalina.ha.deploy.FarmWarDeployer<span class="token punctuation">"</span></span>                    <span class="token attr-name">tempDir</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/tmp/war-temp/<span class="token punctuation">"</span></span>                    <span class="token attr-name">deployDir</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/tmp/war-deploy/<span class="token punctuation">"</span></span>                    <span class="token attr-name">watchDir</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/tmp/war-listen/<span class="token punctuation">"</span></span>                    <span class="token attr-name">watchEnabled</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ClusterListener</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.apache.catalina.ha.session.ClusterSessionListener<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Cluster</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>1、将上面的复制到两个tomcat的server.xml配置文件中</strong></p><p><img src="https://img-blog.csdnimg.cn/aadbe1a6fd1b44af81387a16dd4c32ea.png" alt="在这里插入图片描述"></p><p><strong>2、改端口</strong></p><blockquote><p>为啥改端口：<strong>因为我只有一台电脑</strong><br><br><br>只要不与tomcat1相同就行</p></blockquote><p><img src="https://img-blog.csdnimg.cn/f1a3242f29d94d73a7d2977f528b8433.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/64316338d2b34668872effce067c0db0.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/7d23fc889de94f8b96035ffc52eac3aa.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/fda2f588963f4ee99b4b239b97ed1607.png" alt="在这里插入图片描述"><br><strong>3、在tomcat1和tomcat2中的webapps\ROOT目录下删除页面然后加上这三个页面</strong></p><blockquote><p><strong>第一个是index，第二个是login，第三个是logout</strong><br>index是首页，login是设置session，logout是删除session<br>把tomcat2改为tomcat1然后继续复制</p></blockquote><p><img src="https://img-blog.csdnimg.cn/80ccadf49bc94ffcaf21987bfa22fb3f.png" alt="在这里插入图片描述"></p><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">%</span>@ page contentType<span class="token operator">=</span><span class="token string">"text/html;charset=UTF-8"</span> language<span class="token operator">=</span><span class="token string">"java"</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span>    <span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span>    tomcat2    <span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>body<span class="token operator">></span>        SessionID<span class="token operator">:</span><span class="token operator">&lt;</span><span class="token operator">%=</span>session<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token operator">></span>        <span class="token operator">&lt;</span>br<span class="token operator">></span>        SessionValue<span class="token operator">:</span><span class="token operator">&lt;</span><span class="token operator">%=</span>session<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"session"</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token operator">></span>        <span class="token operator">&lt;</span>br<span class="token operator">></span>        SessionIP<span class="token operator">:</span><span class="token operator">&lt;</span><span class="token operator">%=</span>request<span class="token punctuation">.</span><span class="token function">getServerName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token operator">></span>        <span class="token operator">&lt;</span>br<span class="token operator">></span>        SessionPort<span class="token operator">:</span><span class="token operator">&lt;</span><span class="token operator">%=</span>request<span class="token punctuation">.</span><span class="token function">getServerPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token operator">></span>        <span class="token operator">&lt;</span>br<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">%</span>            out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"this is tomcat 2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">%</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">%</span>@ page contentType<span class="token operator">=</span><span class="token string">"text/html;charset=UTF-8"</span> language<span class="token operator">=</span><span class="token string">"java"</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span>    <span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span>    tomcat2    <span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>body<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">%</span>            session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"session"</span><span class="token punctuation">,</span><span class="token string">"libo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">%</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">%</span>            out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"this is set SessionValue success"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">%</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">%</span>@ page contentType<span class="token operator">=</span><span class="token string">"text/html;charset=UTF-8"</span> language<span class="token operator">=</span><span class="token string">"java"</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span>    <span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span>    tomcat2    <span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>body<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">%</span>            session<span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span><span class="token string">"session"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">%</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">%</span>            out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"this is remove SessionValue success"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">%</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="session问题解决方法"><a href="#session问题解决方法" class="headerlink" title="session问题解决方法"></a>session问题解决方法</h2><h3 id="前端存储"><a href="#前端存储" class="headerlink" title="前端存储"></a>前端存储</h3><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><blockquote><p>每次前端发请求时候都把这个携带走</p></blockquote><p><img src="https://img-blog.csdnimg.cn/4909059c93fb438baa6d6a29cd5169ca.png" alt="在这里插入图片描述"></p><h4 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h4><blockquote><p><strong>优点</strong><br>不占用服务端内存<br><br><br><strong>缺点</strong><br>存在安全风险<br>数据大小受cookie限制<br>占用外网宽带</p></blockquote><h3 id="session的复制"><a href="#session的复制" class="headerlink" title="session的复制"></a>session的复制</h3><h4 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h4><blockquote><p>在每个tomcat 的 “webapps\ROOT\WEB-INF\web.xml” 里面加上  distributable标签</p></blockquote><p><img src="https://img-blog.csdnimg.cn/e51cf65ffef444be8e9ced407ab2c1b3.png" alt="在这里插入图片描述"></p><p><strong>都没有登录</strong></p><p><img src="https://img-blog.csdnimg.cn/05d7e0229a36468592abd08f23b5fbbe.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/e1121723bd26439a841cd6aa84dc9310.png" alt="在这里插入图片描述"></p><p><strong>tomcat1登录</strong></p><p><img src="https://img-blog.csdnimg.cn/a464ebfd58334b6b8ed5e1334fbad6a6.png" alt="在这里插入图片描述"></p><p><strong>tomcat2查看是否可以获取数据</strong></p><blockquote><p>获取成功</p></blockquote><p><img src="https://img-blog.csdnimg.cn/8d8ea8de9d134fb49f244b64d6312564.png" alt="在这里插入图片描述"><br><strong>tomcat1退出</strong></p><p><img src="https://img-blog.csdnimg.cn/b528729fd1b44e7a99ffd50325cc17be.png" alt="在这里插入图片描述"></p><p><strong>tomcat2查看是否可以获取数据</strong></p><blockquote><p>获取不到了，因为session是共享，已经在tomcat1那里退出登录了</p></blockquote><p><img src="https://img-blog.csdnimg.cn/495cf848e3b9456f84ef728bcbc72a3e.png" alt="在这里插入图片描述"></p><h4 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h4><blockquote><p>多个server之间相互同步session，这样每个server之间都包含全部的session</p></blockquote><p><img src="https://img-blog.csdnimg.cn/631068384eea4249a46d73f3b50066b4.png" alt="在这里插入图片描述"></p><h4 id="优缺点-1"><a href="#优缺点-1" class="headerlink" title="优缺点"></a>优缺点</h4><blockquote><p><strong>优点</strong><br>1、只需要设定配置，应用程序不需要修改代码<br>2、有一台机器挂了，其他机器还保存有<br><br><br><strong>缺点</strong><br>1、ession的同步需要数据传输，占内网带宽，有延时<br>2、所有server都包含所有session数据，数据量受最小内存的sever限制</p></blockquote><h3 id="session粘性"><a href="#session粘性" class="headerlink" title="session粘性"></a>session粘性</h3><h4 id="操作步骤-1"><a href="#操作步骤-1" class="headerlink" title="操作步骤"></a>操作步骤</h4><p><strong>下载安装nginx</strong></p><blockquote><p>官网下载，我是已经下载过的了<br>CSDN博客找篇按照下载</p></blockquote><p><strong>配置nginx.conf</strong></p><blockquote><p>这样就会轮询两个tomcat服务器</p></blockquote><p><img src="https://img-blog.csdnimg.cn/e4c36920337b481b80d4e519695e53d3.png" alt="在这里插入图片描述"><br><strong>把刚才tomcat里面的web.xml去掉distributable标签</strong></p><p><strong>访问localhost然后就会一直是一个tomcat</strong></p><p><img src="https://img-blog.csdnimg.cn/e21a730aafb5413b85cba7c32e902bdb.png" alt="在这里插入图片描述"><br><strong>注意</strong></p><blockquote><p>如果还是轮询的话,可能是配置文件没有生效<br> 去任务管理器关闭所有带有nginx的进程<br><img src="https://img-blog.csdnimg.cn/fc05d8db557f41cba5be75bd7f26a312.png" alt="在这里插入图片描述"></p></blockquote><h4 id="原理-2"><a href="#原理-2" class="headerlink" title="原理"></a>原理</h4><blockquote><p>可以通过某种形式，将用户的每次请求都固定到某一台机器上。例如通过Nginx的ip_hash策略进行负载均衡，只要用户的IP固定不变，总能访问到同一台服务器上</p></blockquote><p><img src="https://img-blog.csdnimg.cn/b57e19917ee54ea3b9ba346b23fee7b8.png" alt="在这里插入图片描述"></p><h4 id="优缺点-2"><a href="#优缺点-2" class="headerlink" title="优缺点"></a>优缺点</h4><blockquote><p><strong>优点</strong><br>无需修改代码<br>服务端可以水平扩展<br><br><br><strong>缺点</strong><br>如果某台服务器挂掉了，Session就会丢失<br>如果一个局域网内大量用户那么也没啥用了（使用默认的ip_hash算法）</p></blockquote><h3 id="后端存储-Mysql、Redis等"><a href="#后端存储-Mysql、Redis等" class="headerlink" title="后端存储(Mysql、Redis等)"></a>后端存储(Mysql、Redis等)</h3><blockquote><p>原理都是一样的，但是如果要是海量请求同时发送，请求数据库，容易造成数据库的压力过大从而崩溃，<strong>所以我们演示是基于Redis</strong></p></blockquote><h4 id="操作步骤-2"><a href="#操作步骤-2" class="headerlink" title="操作步骤"></a>操作步骤</h4><p>访问我仓库下载代码<br><a href="https://gitee.com/isleeboer/jsjkyfzpt/tree/master/work/session%E5%85%B1%E4%BA%AB/springboot+redis">点击进入</a></p><h4 id="原理-3"><a href="#原理-3" class="headerlink" title="原理"></a>原理</h4><blockquote><p>传统模式中，当request进入web容器，根据request获取session时，如果容器内存在session则返回，如果不存在就创建一个session然后返回，将sessionId返回<br>后端存储就是将session从容器里面抽出来，形成独立的模块，以便分布式或者集群能够共享。当request进入容器时，根据request获取session时，去找redis如果存在就返回，如果不存在就创建并存储</p></blockquote><p><img src="https://img-blog.csdnimg.cn/239d9b23b77846f18c0c6ac41974b255.png" alt="在这里插入图片描述"></p><h4 id="优缺点-3"><a href="#优缺点-3" class="headerlink" title="优缺点"></a>优缺点</h4><blockquote><p><strong>优点</strong><br>代码灵活，对web容器无侵入<br>速度比mysql更快<br><br><br><strong>缺点</strong><br>需要编写代码</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 计网 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Session </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态代理</title>
      <link href="/2022/06/03/dong-tai-dai-li/"/>
      <url>/2022/06/03/dong-tai-dai-li/</url>
      
        <content type="html"><![CDATA[<h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><p>代理类在程序运行时创建的代理方式被称为动态代理<br> 静态代理中，代理类是自己定义好的，在程序运行之前就已经编译完成。然而动态代理，代理类并不是在Java代码中定义的，而是运行时根据我们在Java代码中的指示动态生成的。<strong>相比较静态代理，动态代理的优势在于可以很方便的对代理类的函数进行统一的处理，而不用修改每个代理类中的方法</strong>，比如想要在每个代理方法前都加上一个处理方法，静态代理就需要在每个类内部加上这个方法</p><h3 id="静态代理与动态代理的区别"><a href="#静态代理与动态代理的区别" class="headerlink" title="静态代理与动态代理的区别"></a>静态代理与动态代理的区别</h3><p> <strong>静态代理</strong></p><blockquote><p><strong>优点</strong><br>简单、效率高、容易理解<br><strong>缺点</strong><br>当目标类增多，代理类也需要增加<br>当接口方法增加或修改的时候，很多类都需要修改，因为目标类和代理类都实现了相同的接口</p></blockquote><p><strong>动态代理</strong></p><blockquote><p><strong>优点</strong><br>动态代理中的目标类很多的时候代理类的数量可以很少<br>修改接口的方法的时候不会影响到代理类<br>代理类可以自动帮助我们生成无需手动</p></blockquote><h2 id="JDK动态代理"><a href="#JDK动态代理" class="headerlink" title="JDK动态代理"></a>JDK动态代理</h2><blockquote><p>JDK动态代理是基于反射机制，生成一个实现代理接口的匿名类，然后重写方法进行方法增强。在调用具体方法前通过调用InvokeHandler的invoke方法来处理。<br>他的特点是生成代理类的速度很快，但是运行时调用方法操作会比较慢，因为是基于反射机制的，而且只能针对接口编程，即目标对象要实现接口</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">implements</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hi 我是一名学生"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JDKProxy</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">{</span>    Object target<span class="token punctuation">;</span>    <span class="token keyword">public</span> Object <span class="token function">newProxy</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> obj<span class="token punctuation">;</span>        <span class="token keyword">return</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你好"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object invoke <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"再见"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> invoke<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JDKTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Person proxy <span class="token operator">=</span> <span class="token punctuation">(</span>Person<span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">JDKProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newProxy</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        proxy<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/a005188a94fc450892ddf3c0d5592a00.png" alt="在这里插入图片描述"></p><h2 id="CGLIB动态代理"><a href="#CGLIB动态代理" class="headerlink" title="CGLIB动态代理"></a>CGLIB动态代理</h2><blockquote><p>Cglib（Code Generation Library）是一个强大的，高性能，高质量的Code生成类库，它是开源的。动态代理是利用 asm 开源包，将目标对象类的 class 文件加载进来，然后修改其字节码生成新的子类来进行扩展处理</p></blockquote><pre class="line-numbers language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>cglib<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>cglib<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.3.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hi 我是一名学生"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CglibProxy</span> <span class="token keyword">implements</span> <span class="token class-name">MethodInterceptor</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Object target<span class="token punctuation">;</span>    <span class="token keyword">public</span> Object <span class="token function">newProxy</span><span class="token punctuation">(</span>Object target<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 增强器</span>        Enhancer enhancer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Enhancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        enhancer<span class="token punctuation">.</span><span class="token function">setCallback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        enhancer<span class="token punctuation">.</span><span class="token function">setSuperclass</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> enhancer<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     *     * @param o 生成代理类的实例     * @param method 上文实体类所调用的被代理的方法引用     * @param objects 方法列表参数     * @param methodProxy 生成代理类对方法的引用     * @return     * @throws Throwable     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">intercept</span><span class="token punctuation">(</span>Object o<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> objects<span class="token punctuation">,</span> MethodProxy methodProxy<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你好"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object invoke <span class="token operator">=</span> methodProxy<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> objects<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"再见"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> invoke<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CglibTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        CglibProxy proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CglibProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Student student <span class="token operator">=</span> <span class="token punctuation">(</span>Student<span class="token punctuation">)</span> proxy<span class="token punctuation">.</span><span class="token function">newProxy</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        student<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/e07ec90cf73f4847bbe26f4a60429c2e.png" alt="在这里插入图片描述"></p><h2 id="两种代理方式的区别"><a href="#两种代理方式的区别" class="headerlink" title="两种代理方式的区别"></a>两种代理方式的区别</h2><blockquote><p>JDK动态代理是基于<strong>反射机制</strong>，生成一个实现了接口继承了proxy类的匿名类而Cglib动态代理是基于<strong>继承机制</strong>，继承被代理类，底层是基于asm第三方框架对代理对象类的class文件加载进来，通过修改其字节码生成子类来处理<br><strong>JDK</strong>动态代理<strong>生成类的速度快</strong>，后续执行类的<strong>方法操作慢</strong>而<strong>Cglib</strong>代理是<strong>生成类的速度慢</strong>，后续执行类的<strong>方法操作快</strong></p></blockquote><blockquote><p><strong>为什么JDK生成快，执行慢而Cglib与之相反</strong><br><br><br>JDK动态代理通过会拦截方法，通过反射获取模板接口名字、内部方法以及参数，拼接生成一个新的Java代理对象<br>生成的代理对象不能直接调用被代理对象的方法，而是通过反射所有每次都得用反射调用一次所以执行方法都需要通过反射<br><br><br>Cglib代理实际上通过继承，生成一个子类，就是将代理对象类的class文件加载进来，通过修改其字节码生成子类来处理，生成类的速度慢但是后续执行时候就很快</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> 动态代理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序算法</title>
      <link href="/2022/05/20/pai-xu-suan-fa/"/>
      <url>/2022/05/20/pai-xu-suan-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p><img src="https://img-blog.csdnimg.cn/145866746f6f4a6ab7348bed9c731daa.gif" alt="在这里插入图片描述"></p><blockquote><p><strong>平均时间复杂度：</strong> o(n^2)<br><strong>最好时间：</strong> o(n)<br><strong>最坏时间：</strong> o(n^2)<br><strong>空间复杂度：</strong> o(1)<br><strong>是否稳定：</strong> 稳定</p></blockquote><p><strong>简单的冒泡排序</strong></p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>len <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> nums<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> len<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">int</span> temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    nums<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="冒泡排序的优化"><a href="#冒泡排序的优化" class="headerlink" title="冒泡排序的优化"></a>冒泡排序的优化</h3><p><strong>设置标志位</strong></p><blockquote><p>设置一个标志位来标识这次遍历是否进行过交换<br>如果没有进行过交换则表示数组已经有序，直接退出</p></blockquote><pre class="line-numbers language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">binarySort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>len <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> nums<span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">boolean</span> isSort <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//是否有序</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> len<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">int</span> temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    nums<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>                    isSort <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>isSort<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>设置结束位置</strong></p><blockquote><p>比如初始数组为[4,3,2,1,5,6]<br>经过第一次排序后数组变为[3,2,1,4,5,6]<br>如果按照普通冒泡排序下次需要遍历的下标范围为[0,4]<br>但是[3,4]是已经有序的，所以可以减少比较，保存上次交换的结束位置</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>len <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token keyword">int</span> max_index <span class="token operator">=</span> len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> index <span class="token operator">=</span> max_index<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">boolean</span> isSort <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//是否有序</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> index<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">int</span> temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                nums<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>                isSort <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                max_index<span class="token operator">=</span>j<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>isSort<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        index <span class="token operator">=</span> max_index<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>双向冒泡排序</strong></p><blockquote><p>与设置结束位置类似，这个是也设置了起始位置<br>使得在left之前的都是已经排好序的</p></blockquote><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>len <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> nums<span class="token punctuation">;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> tleft <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>tright <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">boolean</span> isSort <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> left<span class="token punctuation">;</span>i <span class="token operator">&lt;</span> right<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">int</span> temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                    nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    nums<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>                    isSort <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    tright <span class="token operator">=</span> i<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>isSort<span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span>            right <span class="token operator">=</span> tright<span class="token punctuation">;</span>            isSort <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> right<span class="token punctuation">;</span>i <span class="token operator">></span> left<span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">int</span> temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                    nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>                    isSort <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    tleft <span class="token operator">=</span> i<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>isSort<span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span>            left <span class="token operator">=</span> tleft<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><p><img src="https://img-blog.csdnimg.cn/fd3b383f48e74e8e86067846af27c12b.gif" alt="在这里插入图片描述"></p><blockquote><p><strong>平均时间复杂度：</strong> o(n^2)<br><strong>最好时间：</strong> o(n^2)<br><strong>最坏时间：</strong> o(n^2)<br><strong>空间复杂度：</strong> o(1)<br><strong>是否稳定：</strong> 不稳定</p></blockquote><p><strong>选择排序</strong></p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">selectSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>len <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> nums<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> minIndex <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span>j <span class="token operator">&lt;</span> len<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    minIndex <span class="token operator">=</span> j<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">int</span> t <span class="token operator">=</span> nums<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>            nums<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><p><img src="https://img-blog.csdnimg.cn/7a7a54d942f74bfdb4b0629173d24c0c.gif" alt="在这里插入图片描述"></p><blockquote><p><strong>平均时间复杂度：</strong> o(n^2)<br><strong>最好时间：</strong> o(n)<br><strong>最坏时间：</strong> o(n^2)<br><strong>空间复杂度：</strong> o(1)<br><strong>是否稳定：</strong> 稳定</p></blockquote><p><strong>插入排序</strong></p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">insertSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>len <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> nums<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> cur <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> preIndex <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>preIndex <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>preIndex<span class="token punctuation">]</span> <span class="token operator">></span> cur<span class="token punctuation">)</span><span class="token punctuation">{</span>                nums<span class="token punctuation">[</span>preIndex<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>preIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>                preIndex<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            nums<span class="token punctuation">[</span>preIndex<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> cur<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p><img src="https://img-blog.csdnimg.cn/e34b13dd820448efb8f6664e5b1192dd.gif" alt="在这里插入图片描述"></p><blockquote><p><strong>平均时间复杂度：</strong> o(nlogn)<br><strong>最好时间：</strong> o(nlogn)<br><strong>最坏时间：</strong> o(n^2)<br><strong>空间复杂度：</strong> o(logn)<br><strong>是否稳定：</strong> 不稳定</p></blockquote><p><strong>快速排序</strong></p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span><span class="token keyword">int</span> left<span class="token punctuation">,</span><span class="token keyword">int</span> right<span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>left <span class="token operator">>=</span> right<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>       <span class="token keyword">int</span> l <span class="token operator">=</span> left <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>       <span class="token keyword">int</span> r <span class="token operator">=</span> right <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>       <span class="token keyword">int</span> t <span class="token operator">=</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token keyword">while</span><span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token keyword">do</span> l<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">&lt;</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">do</span> r<span class="token operator">--</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">></span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>               <span class="token keyword">int</span> temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>               nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">;</span>               nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>           <span class="token punctuation">}</span>       <span class="token punctuation">}</span>        <span class="token function">quickSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>left<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token function">quickSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><p><img src="https://img-blog.csdnimg.cn/73d0a113dfc94817850eb68e93437e94.gif" alt="在这里插入图片描述"></p><blockquote><p><strong>平均时间复杂度：</strong> o(nlogn)<br><strong>最好时间：</strong> o(nlogn)<br><strong>最坏时间：</strong> o(nlogn)<br><strong>空间复杂度：</strong> o(n)<br><strong>是否稳定：</strong> 稳定</p></blockquote><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span><span class="token keyword">int</span> left<span class="token punctuation">,</span><span class="token keyword">int</span> right<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>left <span class="token operator">>=</span> right<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> right <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token function">mergeSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>left<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">mergeSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//需要合并 [left,mid] [mid+1,right]</span>        <span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>right<span class="token operator">-</span>left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> l <span class="token operator">=</span> left<span class="token punctuation">,</span>r <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>l <span class="token operator">&lt;=</span> mid <span class="token operator">&amp;&amp;</span> r <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span> temp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>l<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> temp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>r<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>l <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> temp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>l<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>r <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> temp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>r<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> right<span class="token punctuation">;</span>i <span class="token operator">>=</span> left<span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">[</span><span class="token operator">--</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><p><img src="https://img-blog.csdnimg.cn/22b96ad4c2174e4e8f6bfc5f47cecd6a.gif" alt="在这里插入图片描述"></p><blockquote><p><strong>平均时间复杂度：</strong> o(nlogn)<br><strong>最好时间：</strong> o(nlogn)<br><strong>最坏时间：</strong> o(nlogn)<br><strong>空间复杂度：</strong> o(1)<br><strong>是否稳定：</strong> 不稳定</p></blockquote><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">heapSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>len <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//构造大根堆</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token punctuation">(</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">>=</span><span class="token number">0</span> <span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">heap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>i<span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//将根弄到最后</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> t <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span>            <span class="token function">heap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//子树构建大顶堆</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">heap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span><span class="token keyword">int</span> index<span class="token punctuation">,</span><span class="token keyword">int</span> size<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> max <span class="token operator">=</span> index<span class="token punctuation">;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> index <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>left <span class="token operator">&lt;</span> size <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>max<span class="token punctuation">]</span><span class="token punctuation">)</span> max <span class="token operator">=</span> left<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>right <span class="token operator">&lt;</span> size <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>max<span class="token punctuation">]</span><span class="token punctuation">)</span> max <span class="token operator">=</span> right<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>max <span class="token operator">!=</span> index<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> t <span class="token operator">=</span> nums<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>            nums<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>max<span class="token punctuation">]</span><span class="token punctuation">;</span>            nums<span class="token punctuation">[</span>max<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span>            <span class="token function">heap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>max<span class="token punctuation">,</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 常见算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XSS攻击与预防</title>
      <link href="/2022/02/04/xss-gong-ji-yu-yu-fang/"/>
      <url>/2022/02/04/xss-gong-ji-yu-yu-fang/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是XSS攻击"><a href="#什么是XSS攻击" class="headerlink" title="什么是XSS攻击"></a>什么是XSS攻击</h2><blockquote><p><strong>XSS跨站脚本攻击</strong>（Cross Site Scripting）的本质是攻击者在web页面插入恶意的script代码，当用户浏览该网页之时，嵌入其中的script代码就会被执行，从而达到恶意攻击用户的目的，比如读cookie，sesssion，tokens，或者网站其它敏感信息。</p></blockquote><h2 id="XSS攻击的危害"><a href="#XSS攻击的危害" class="headerlink" title="XSS攻击的危害"></a>XSS攻击的危害</h2><blockquote><p>1、通过document.cookie<strong>盗取cookie</strong>中的信息<br>2、使用js或css<strong>破坏页面正常的结构与样式</strong><br>3、<strong>流量劫持</strong>(通过访问某段具有window.location.href 定位到其他页面)<br>4、<strong>ddos攻击</strong>：利用合理的客户端请求来占用过多的服务器，从而使合法用户无法得到服务器响应<br>5、<strong>控制企业数据</strong>，包括读取、篡改、删除等</p></blockquote><h2 id="XSS攻击的类型"><a href="#XSS攻击的类型" class="headerlink" title="XSS攻击的类型"></a>XSS攻击的类型</h2><h3 id="反射型XSS攻击"><a href="#反射型XSS攻击" class="headerlink" title="反射型XSS攻击"></a>反射型XSS攻击</h3><blockquote><p>反射型XSS漏洞常见于通过<strong>URL传递参数</strong>的功能，如网站搜索、跳转等，由于需要用户主动打开恶意的URL才能生效，攻击者往往会结合多种手段诱导用户点击</p></blockquote><p><strong>反射型XSS攻击的步骤</strong></p><blockquote><p>1、攻击者构造出特殊的URL,其中包含恶意代码<br>2、用户打开有恶意代码的URL时，网站服务器端将恶意代码从URL取出，拼接在HTML返回给浏览器<br>3、用户浏览器接收到响应后解析执行。混在其中的恶意代码也会被执行<br>4、恶意代码窃取用户数据并发送到攻击者的网站，或者冒充用户行为，调用目标网站接口执行攻击者的指定的操作</p></blockquote><p><img src="https://img-blog.csdnimg.cn/5c1d0b88255945008c2bb2a7cd61108d.png" alt="在这里插入图片描述"></p><p><strong>防御反射型XSS攻击</strong></p><blockquote><p><strong>对输入进行检查：</strong> 对请求参数进行检查，一旦发现可疑的特殊字符就拒绝请求。<br><strong>对输出进行转义再显示：</strong> 对潜在的威胁的字符进行编码、转义</p></blockquote><h3 id="存储型XSS攻击"><a href="#存储型XSS攻击" class="headerlink" title="存储型XSS攻击"></a>存储型XSS攻击</h3><blockquote><p>恶意脚本<strong>永久存储在目标服务器</strong>上，当浏览器请求数据时，脚本从服务器传回执行，影响范围比反射型和DOM型XSS更大。存储型XSS攻击的原因是没有做好数据过滤：前端提交数据到服务端时，没有做好过滤，服务器端接收到数据时，在存储之前没有做过滤，前端从服务器请求到数据时，没有过滤输出</p></blockquote><p><strong>存储型XSS攻击步骤</strong></p><blockquote><p>1、攻击者将恶意代码提交到目标网站的数据库中<br>2、用户打开目标网站时，网站服务端将恶意代码从数据库中取出，拼接在HTML中返回给浏览器<br>3、用户浏览器接收到响应后解析执行，混在其中的恶意代码也被执行<br>4、恶意代码窃取用户数据并发送到攻击者的网站，或冒充用户行为，调用目标网站接口等</p></blockquote><p><img src="https://img-blog.csdnimg.cn/310adeb47925420fbd249fcf44a20e91.png" alt="在这里插入图片描述"></p><p><strong>防御存储型XSS攻击</strong></p><blockquote><p>服务器接收到数据在存储数据库之前进行转义或过滤<br>前端接收到服务器传递过来的数据，在展示页面之前先进行转义或过滤</p></blockquote><h3 id="DOM型XSS攻击"><a href="#DOM型XSS攻击" class="headerlink" title="DOM型XSS攻击"></a>DOM型XSS攻击</h3><blockquote><p>DOM型XSS攻击实际上就是前端JavaScript代码不够严谨，把不可信的内容插入到了页面</p></blockquote><p><strong>DOM型XSS攻击步骤</strong></p><blockquote><p>1、 攻击者构造出特殊数据，其中包含恶意代码<br>2、用户浏览器执行了恶意代码<br>3、窃取用户数据并发送到攻击者的网站或冒充用户</p></blockquote><p><strong>防疫DOM型XSS攻击</strong></p><blockquote><p>在使用.innerHTML   outerHTML document.write()时不要把不可信的数据插入到HTML页面中，应尽量使用.textContent .setAttribute()等</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 计网 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSRF理解与预防</title>
      <link href="/2022/02/03/csrf-li-jie-yu-yu-fang/"/>
      <url>/2022/02/03/csrf-li-jie-yu-yu-fang/</url>
      
        <content type="html"><![CDATA[<h2 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h2><blockquote><p>CSRF即跨站请求攻击。简单来说是<strong>攻击者通过一些技术手段欺骗用户浏览器去访问一个自己以前认证过的站点并运行一些操作</strong>，因为浏览器之前认证过，所以被访问的站点会觉得这是真正的用户操作。<br>这就利用了web用户身份认证的一个漏洞：简单的身份验证仅仅能保证请求发自某个用户的浏览器，却不能保证请求本身是用户自愿发出的<br>简单来说：<strong>CSRF就是攻击者盗用了你的身份，以你的名义发送恶意请求</strong></p></blockquote><p><img src="https://img-blog.csdnimg.cn/10c366121a494ac6b28397e564aa74a8.png" alt="在这里插入图片描述"></p><blockquote><p><strong>必要条件</strong><br><br><br>登录受信任网站A，并在本地生成Cookie<br>在不登出A的情况下，访问危险网站B</p></blockquote><h2 id="CSRF代码演示-简单基于Get方式"><a href="#CSRF代码演示-简单基于Get方式" class="headerlink" title="CSRF代码演示(简单基于Get方式)"></a>CSRF代码演示(简单基于Get方式)</h2><blockquote><p><strong>在127.0.0.1:8080服务器下</strong></p></blockquote><p><img src="https://img-blog.csdnimg.cn/e1019fc4251a4dc2a54f596d319ee49d.png" alt="在这里插入图片描述"></p><blockquote><p>没有登录不能进行转账</p></blockquote><p><img src="https://img-blog.csdnimg.cn/7eefd545d4574c98a43a9343add65882.png" alt="在这里插入图片描述"></p><blockquote><p>登录成功</p></blockquote><p><img src="https://img-blog.csdnimg.cn/cbf43fc7685f44c7929025e16b3cb8df.png" alt="在这里插入图片描述"></p><blockquote><p>可以转账</p></blockquote><p><img src="https://img-blog.csdnimg.cn/ec0a54569b954057a12dcaa6d9f432c2.png" alt="在这里插入图片描述"></p><blockquote><p><strong>在127.0.0.1:5000服务器下</strong></p></blockquote><p><img src="https://img-blog.csdnimg.cn/aaa1f8006f3c4cfd922fa0c73570e3fe.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/4a2e8ac8b80f4ae7b671ea9295d182eb.png" alt="在这里插入图片描述"></p><blockquote><p>访问网站的时候请求了127.0.0.1:8080服务器下的trans</p></blockquote><p><img src="https://img-blog.csdnimg.cn/a1c74c5d8ef54cdc904f37cb1d85b1c4.png" alt="在这里插入图片描述"></p><h2 id="CSRF预防"><a href="#CSRF预防" class="headerlink" title="CSRF预防"></a>CSRF预防</h2><p><strong>提交验证码</strong></p><blockquote><p>在表单添加一个随机数字或验证码，通过强制用户与应用交互来有效遏制CSR攻击</p></blockquote><p><strong>Referer/Origin Check</strong></p><blockquote><p>在http请求头中有个字段为referer，如果是在正常站点A访问那么referer就是A，如果在恶意请求站点B中去请求A那么referer就是B，所以可以判断是否正常页面进来<br>但是referer可能可以被修改<br>Origin与Referer相比他不包含路径信息比如Referer是A/test所以Origin就是A</p></blockquote><p><strong>HTTP头中自定义属性并验证</strong></p><blockquote><p>因为CSRF是利用cookie来攻击的，当我们定义一个HTTP头部属性时候，这个B中的A请求就没有这个Header属性所以可以预防</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 计网 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSRF </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
